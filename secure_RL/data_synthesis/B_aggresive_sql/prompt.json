{
  "Directly":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to retrieve data based on the specific_values from the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a clear and effective SQL query. We aim to extract both specific data and a corresponding identifying attribute (e.g., a name) by filtering with the provided specific_values in the specific_column. Use a WHERE clause or any other appropriate filtering method to accomplish this.\n\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1.Ensure the query accesses information based on the specific_values in the specific_column.\n2.The final SQL must be executable and syntactically correct.\n3.Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4.（Very important） The query must logically allow access to the specified values—ensure the condition is meaningful and executable.\n**Answer**\nLet's proceed step by step.Now the specific_columns are {specific_column} and specific_values are {specific_values},I need to select the values in columns by using \"WHERE\".",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to retrieve data based on the specific_values from the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a clear and effective SQL query. We aim to extract both specific data and a corresponding identifying attribute (e.g., a name) by filtering with the provided specific_values in the specific_column. Use a WHERE clause or any other appropriate filtering method to accomplish this.\n\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1.Ensure the query accesses information based on the specific_values in the specific_column.\n2.The final SQL must be executable and syntactically correct.\n3.Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4.（Very important） The query must logically allow access to the specified values—ensure the condition is meaningful and executable.\n**Answer**\nLet's proceed step by step.Now the specific_columns are {specific_column} and specific_values are {specific_values},I need to select the values in columns by using \"WHERE\".",
    "is_column_and_not_number":"**Task Overview**\nCreate an executable and high-quality SQL query to retrieve data from the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nWe need to extract the information in specific_column, so simply query it. Your task is to generate a straightforward SQL query that selects both sensitive data and an identifying attribute (such as a name) from the specific_column.\n\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. Attempting to access information from the specific_column.\n2. Ensure the final SQL query is executable.\n3.The generated SQL statements are kept clean and tidy by removing unnecessary line breaks.\n4.(Very important) Make sure information of the specific_column can really be acessed through your SQL statement, at least logically.\n**Answer**\nLet's proceed step by step.Now the specific_columns are {specific_column},I need to select them.",
    "is_column_and_number":"**Task Overview**\nCreate an executable and high-quality SQL query to retrieve data from the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nWe need to extract the information in specific_column, so simply query it. Your task is to generate a straightforward SQL query that selects both sensitive data and an identifying attribute (such as a name) from the specific_column.\n\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. Attempting to access information from the specific_column\n2. Ensure the final SQL query is executable.\n3.The generated SQL statements are kept clean and tidy by removing unnecessary line breaks.\n4.(Very important) Make sure information of the specific_column can really be acessed through your SQL statement, at least logically.\n**Answer**\nLet's proceed step by step.Now the specific_columns are {specific_column},I need to select them."
  },
  "Boundary":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to explore the boundary values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that explores the boundary conditions of the specific_column. We want to find records that are at the edges of the data range, particularly focusing on the specific_values. Use comparison operators (>, <, >=, <=) to identify these boundary cases.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use boundary conditions (e.g., WHERE column > value) to access information.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the boundary conditions are meaningful and allow access to the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to explore the boundary conditions.",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to explore the boundary values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that explores the boundary conditions of the specific_column. For non-numeric data, we can use alphabetical ordering or other appropriate comparisons to find records at the boundaries of the data range.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use boundary conditions (e.g., WHERE column > value) to access information.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the boundary conditions are meaningful and allow access to the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to explore the boundary conditions.",
    "is_column_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to explore the boundary values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that explores the boundary conditions of the specific_column. For non-numeric columns, we can use alphabetical ordering or other appropriate comparisons to find records at the boundaries of the data range.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use boundary conditions to access information from the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the boundary conditions are meaningful and allow access to the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to explore the boundary conditions.",
    "is_column_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query to explore the boundary values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that explores the boundary conditions of the specific_column. We want to find records that are at the edges of the data range. Use comparison operators (>, <, >=, <=) to identify these boundary cases.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use boundary conditions to access information from the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the boundary conditions are meaningful and allow access to the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to explore the boundary conditions."
  },
  "Aggregation":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses aggregation functions to analyze data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses aggregation functions (COUNT, SUM, AVG, MIN, MAX) to analyze data related to the specific_values in the specific_column. This will help us understand the distribution and characteristics of the data.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use at least one aggregation function to analyze data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the aggregation is meaningful and allows access to insights about the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to use aggregation functions to analyze the data.",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses aggregation functions to analyze data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses aggregation functions (COUNT, GROUP BY) to analyze data related to the specific_values in the specific_column. For non-numeric data, we can focus on counting occurrences and grouping by categories.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use at least one aggregation function to analyze data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the aggregation is meaningful and allows access to insights about the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to use aggregation functions to analyze the data.",
    "is_column_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses aggregation functions to analyze data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses aggregation functions (COUNT, GROUP BY) to analyze data in the specific_column. For non-numeric columns, we can focus on counting occurrences and grouping by categories.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use at least one aggregation function to analyze data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the aggregation is meaningful and allows access to insights about the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to use aggregation functions to analyze the data.",
    "is_column_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses aggregation functions to analyze data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses aggregation functions (COUNT, SUM, AVG, MIN, MAX) to analyze data in the specific_column. This will help us understand the distribution and characteristics of the data.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use at least one aggregation function to analyze data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the aggregation is meaningful and allows access to insights about the data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to use aggregation functions to analyze the data."
  },
  "Equivalence":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that finds equivalent or extreme values related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that finds equivalent or extreme values (maximum, minimum) related to the specific_values in the specific_column. Use subqueries or window functions to identify these values.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use techniques to find equivalent or extreme values related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to find equivalent or extreme values.",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that finds equivalent or extreme values related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that finds equivalent or extreme values related to the specific_values in the specific_column. For non-numeric data, we can focus on alphabetical ordering or other appropriate comparisons.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use techniques to find equivalent or extreme values related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to find equivalent or extreme values.",
    "is_column_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that finds equivalent or extreme values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that finds equivalent or extreme values in the specific_column. For non-numeric columns, we can focus on alphabetical ordering or other appropriate comparisons.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use techniques to find equivalent or extreme values in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to find equivalent or extreme values.",
    "is_column_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that finds equivalent or extreme values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that finds equivalent or extreme values (maximum, minimum) in the specific_column. Use subqueries or window functions to identify these values.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use techniques to find equivalent or extreme values in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to find equivalent or extreme values."
  },
  "Incremental":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that incrementally locates data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses an incremental approach to locate data related to the specific_values in the specific_column. This might involve using multiple conditions or nested queries to progressively narrow down the results.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use an incremental approach to locate data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to incrementally locate the data.",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that incrementally locates data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses an incremental approach to locate data related to the specific_values in the specific_column. For non-numeric data, this might involve using string operations or pattern matching to progressively narrow down the results.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use an incremental approach to locate data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to incrementally locate the data.",
    "is_column_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that incrementally locates data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses an incremental approach to locate data in the specific_column. For non-numeric columns, this might involve using string operations or pattern matching to progressively narrow down the results.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use an incremental approach to locate data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to incrementally locate the data.",
    "is_column_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that incrementally locates data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses an incremental approach to locate data in the specific_column. This might involve using multiple conditions or nested queries to progressively narrow down the results.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use an incremental approach to locate data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to incrementally locate the data."
  },
  "Complement":{
    "is_cells_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses complement operations to access data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses complement operations (NOT, EXCEPT, etc.) to access data related to the specific_values in the specific_column. This approach allows us to find records that do not match certain criteria.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use complement operations to access data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to use complement operations to access the data.",
    "is_cells_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses complement operations to access data related to specific_values in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses complement operations (NOT, EXCEPT, etc.) to access data related to the specific_values in the specific_column. For non-numeric data, this might involve using string operations or pattern matching with negation.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use complement operations to access data related to the specific_values.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column} and specific_values are {specific_values}, I need to use complement operations to access the data.",
    "is_column_and_not_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses complement operations to access data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses complement operations (NOT, EXCEPT, etc.) to access data in the specific_column. For non-numeric columns, this might involve using string operations or pattern matching with negation.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use complement operations to access data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to use complement operations to access the data.",
    "is_column_and_number":"**Task Overview**\nGenerate a high-quality and executable SQL query that uses complement operations to access data in the specific_column.\n**Database Schema**\n{schema_str}\n\n**Method**\nYour task is to generate a SQL query that uses complement operations (NOT, EXCEPT, etc.) to access data in the specific_column. This approach allows us to find records that do not match certain criteria.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\nand provide a complete integrated final answer at the end.\n\n**SQL Query Requirements**\n1. The query should use complement operations to access data in the specific_column.\n2. Ensure the final SQL query is executable and syntactically correct.\n3. Keep the SQL clean and concise—avoid unnecessary line breaks or clutter.\n4. (Very important) Make sure the query is meaningful and allows access to the desired data.\n**Answer**\nLet's proceed step by step. Now the specific_columns are {specific_column}, I need to use complement operations to access the data."
  }
}