[
  "database schema :\ntable department , columns = [ department.department_id ( int | primary key ) , department.name ( text ) , department.creation ( text ) , department.ranking ( int ) , department.budget_in_billions ( real ) , department.num_employees ( real ) ]\ntable head , columns = [ head.head_id ( int | primary key ) , head.name ( text ) , head.born_state ( text ) , head.age ( real ) ]\ntable management , columns = [ management.department_id ( int | primary key ) , management.head_id ( int | primary key ) , management.temporary_acting ( text ) ]\nforeign keys :\nmanagement.head_id = head.head_id\nmanagement.department_id = department.department_id\nmatched contents : None",
  "database schema :\ntable city , columns = [ city.city_id ( int | primary key ) , city.official_name ( text ) , city.status ( text ) , city.area_km_2 ( real ) , city.population ( real ) , city.census_ranking ( text ) ]\ntable farm , columns = [ farm.farm_id ( int | primary key ) , farm.year ( int ) , farm.total_horses ( real ) , farm.working_horses ( real ) , farm.total_cattle ( real ) , farm.oxen ( real ) , farm.bulls ( real ) , farm.cows ( real ) , farm.pigs ( real ) , farm.sheep_and_goats ( real ) ]\ntable farm_competition , columns = [ farm_competition.competition_id ( int | primary key ) , farm_competition.year ( int ) , farm_competition.theme ( text ) , farm_competition.host_city_id ( int ) , farm_competition.hosts ( text ) ]\ntable competition_record , columns = [ competition_record.competition_id ( int | primary key ) , competition_record.farm_id ( int | primary key ) , competition_record.rank ( int ) ]\nforeign keys :\nfarm_competition.host_city_id = city.city_id\ncompetition_record.farm_id = farm.farm_id\ncompetition_record.competition_id = farm_competition.competition_id\nmatched contents : None",
  "database schema :\ntable addresses , columns = [ addresses.address_id ( integer | primary key ) , addresses.line_1 ( varchar(80) ) , addresses.line_2 ( varchar(80) ) , addresses.city ( varchar(50) ) , addresses.zip_postcode ( char(20) ) , addresses.state_province_county ( varchar(50) ) , addresses.country ( varchar(50) ) ]\ntable people , columns = [ people.person_id ( integer | primary key ) , people.first_name ( varchar(255) ) , people.middle_name ( varchar(255) ) , people.last_name ( varchar(255) ) , people.cell_mobile_number ( varchar(40) ) , people.email_address ( varchar(40) ) , people.login_name ( varchar(40) ) , people.password ( varchar(40) ) ]\ntable students , columns = [ students.student_id ( integer | primary key ) , students.student_details ( varchar(255) ) ]\ntable courses , columns = [ courses.course_id ( varchar(100) | primary key ) , courses.course_name ( varchar(120) ) , courses.course_description ( varchar(255) ) , courses.other_details ( varchar(255) ) ]\ntable people_addresses , columns = [ people_addresses.person_address_id ( integer | primary key ) , people_addresses.person_id ( integer ) , people_addresses.address_id ( integer ) , people_addresses.date_from ( datetime ) , people_addresses.date_to ( datetime ) ]\ntable student_course_registrations , columns = [ student_course_registrations.student_id ( integer | primary key ) , student_course_registrations.course_id ( integer | primary key ) , student_course_registrations.registration_date ( datetime ) ]\ntable student_course_attendance , columns = [ student_course_attendance.student_id ( integer | primary key ) , student_course_attendance.course_id ( integer | primary key ) , student_course_attendance.date_of_attendance ( datetime ) ]\ntable candidates , columns = [ candidates.candidate_id ( integer | primary key ) , candidates.candidate_details ( varchar(255) ) ]\ntable candidate_assessments , columns = [ candidate_assessments.candidate_id ( integer | primary key ) , candidate_assessments.qualification ( char(15) | primary key ) , candidate_assessments.assessment_date ( datetime ) , candidate_assessments.asessment_outcome_code ( char(15) ) ]\nforeign keys :\nstudents.student_id = people.person_id\npeople_addresses.address_id = addresses.address_id\npeople_addresses.person_id = people.person_id\nstudent_course_registrations.course_id = courses.course_id\nstudent_course_registrations.student_id = students.student_id\nstudent_course_attendance.student_id = student_course_registrations.student_id\nstudent_course_attendance.course_id = student_course_registrations.course_id\ncandidates.candidate_id = people.person_id\ncandidate_assessments.candidate_id = candidates.candidate_id\nmatched contents : None",
  "database schema :\ntable station , columns = [ station.id ( integer | primary key ) , station.name ( text ) , station.lat ( numeric | comment : latitude ) , station.long ( numeric | comment : longitude ) , station.dock_count ( integer ) , station.city ( text ) , station.installation_date ( text ) ]\ntable status , columns = [ status.station_id ( integer ) , status.bikes_available ( integer ) , status.docks_available ( integer ) , status.time ( text ) ]\ntable trip , columns = [ trip.id ( integer | primary key ) , trip.duration ( integer ) , trip.start_date ( text ) , trip.start_station_name ( text ) , trip.start_station_id ( integer ) , trip.end_date ( text ) , trip.end_station_name ( text ) , trip.end_station_id ( integer ) , trip.bike_id ( integer ) , trip.subscription_type ( text ) , trip.zip_code ( integer ) ]\ntable weather , columns = [ weather.date ( text ) , weather.max_temperature_f ( integer ) , weather.mean_temperature_f ( integer ) , weather.min_temperature_f ( integer ) , weather.max_dew_point_f ( integer ) , weather.mean_dew_point_f ( integer ) , weather.min_dew_point_f ( integer ) , weather.max_humidity ( integer ) , weather.mean_humidity ( integer ) , weather.min_humidity ( integer ) , weather.max_sea_level_pressure_inches ( numeric ) , weather.mean_sea_level_pressure_inches ( numeric ) , weather.min_sea_level_pressure_inches ( numeric ) , weather.max_visibility_miles ( integer ) , weather.mean_visibility_miles ( integer ) , weather.min_visibility_miles ( integer ) , weather.max_wind_speed_mph ( integer ) , weather.mean_wind_speed_mph ( integer ) , weather.max_gust_speed_mph ( integer ) , weather.precipitation_inches ( integer ) , weather.cloud_cover ( integer ) , weather.events ( text ) , weather.wind_dir_degrees ( integer ) , weather.zip_code ( integer ) ]\nforeign keys :\nstatus.station_id = station.id\nmatched contents :\nweather.max_temperature_f ( 85 )\nweather.max_humidity ( 85 )\nweather.mean_humidity ( 85 )",
  "database schema :\ntable publication , columns = [ publication.publication_id ( int | primary key ) , publication.book_id ( int ) , publication.publisher ( text ) , publication.publication_date ( text ) , publication.price ( real ) ]\ntable book , columns = [ book.book_id ( int | primary key ) , book.title ( text ) , book.issues ( real ) , book.writer ( text ) ]\nforeign keys :\npublication.book_id = book.book_id\nmatched contents : None",
  "database schema :\ntable musical , columns = [ musical.musical_id ( int | primary key ) , musical.name ( text ) , musical.year ( int ) , musical.award ( text ) , musical.category ( text ) , musical.nominee ( text ) , musical.result ( text ) ]\ntable actor , columns = [ actor.actor_id ( int | primary key ) , actor.name ( text ) , actor.musical_id ( int ) , actor.character ( text ) , actor.duration ( text ) , actor.age ( int ) ]\nforeign keys :\nactor.musical_id = actor.actor_id\nmatched contents : None",
  "database schema :\ntable follows , columns = [ follows.f1 ( int(11) | primary key | comment : user id ) , follows.f2 ( int(11) | primary key | comment : follower id ) ]\ntable tweets , columns = [ tweets.id ( bigint(20) | primary key ) , tweets.uid ( int(11) | comment : user id ) , tweets.text ( char(140) ) , tweets.createdate ( datetime ) ]\ntable user_profiles , columns = [ user_profiles.uid ( int(11) | primary key ) , user_profiles.name ( varchar(255) ) , user_profiles.email ( varchar(255) ) , user_profiles.partitionid ( int(11) ) , user_profiles.followers ( int(11) ) ]\nforeign keys :\nfollows.f2 = user_profiles.uid\nfollows.f1 = user_profiles.uid\ntweets.uid = user_profiles.uid\nmatched contents :\nuser_profiles.name ( Mary )",
  "database schema :\ntable attribute_definitions , columns = [ attribute_definitions.attribute_id ( integer | primary key ) , attribute_definitions.attribute_name ( varchar(30) ) , attribute_definitions.attribute_data_type ( varchar(10) ) ]\ntable catalogs , columns = [ catalogs.catalog_id ( integer | primary key ) , catalogs.catalog_name ( varchar(50) ) , catalogs.catalog_publisher ( varchar(80) ) , catalogs.date_of_publication ( datetime ) , catalogs.date_of_latest_revision ( datetime ) ]\ntable catalog_structure , columns = [ catalog_structure.catalog_level_number ( integer | primary key ) , catalog_structure.catalog_id ( integer ) , catalog_structure.catalog_level_name ( varchar(50) ) ]\ntable catalog_contents , columns = [ catalog_contents.catalog_entry_id ( integer | primary key ) , catalog_contents.catalog_level_number ( integer ) , catalog_contents.parent_entry_id ( integer ) , catalog_contents.previous_entry_id ( integer ) , catalog_contents.next_entry_id ( integer ) , catalog_contents.catalog_entry_name ( varchar(80) ) , catalog_contents.product_stock_number ( varchar(50) ) , catalog_contents.price_in_dollars ( double ) , catalog_contents.price_in_euros ( double ) , catalog_contents.price_in_pounds ( double ) , catalog_contents.capacity ( varchar(20) ) , catalog_contents.length ( varchar(20) ) , catalog_contents.height ( varchar(20) ) , catalog_contents.width ( varchar(20) ) ]\ntable catalog_contents_additional_attributes , columns = [ catalog_contents_additional_attributes.catalog_entry_id ( integer ) , catalog_contents_additional_attributes.catalog_level_number ( integer ) , catalog_contents_additional_attributes.attribute_id ( integer ) , catalog_contents_additional_attributes.attribute_value ( varchar(255) ) ]\nforeign keys :\ncatalog_structure.catalog_id = catalogs.catalog_id\ncatalog_contents.catalog_level_number = catalog_structure.catalog_level_number\ncatalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number\ncatalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\nmatched contents : None",
  "database schema :\ntable flight , columns = [ flight.flno ( number(4,0) | primary key | comment : flight number ) , flight.origin ( varchar2(20) ) , flight.destination ( varchar2(20) ) , flight.distance ( number(6,0) ) , flight.departure_date ( date ) , flight.arrival_date ( date ) , flight.price ( number(7,2) ) , flight.aid ( number(9,0) | comment : airline id ) ]\ntable aircraft , columns = [ aircraft.aid ( number(9,0) | primary key | comment : airline id ) , aircraft.name ( varchar2(30) ) , aircraft.distance ( number(6,0) ) ]\ntable employee , columns = [ employee.eid ( number(9,0) | primary key | comment : employee id ) , employee.name ( varchar2(30) ) , employee.salary ( number(10,2) ) ]\ntable certificate , columns = [ certificate.eid ( number(9,0) | primary key | comment : employee id ) , certificate.aid ( number(9,0) | primary key | comment : airline id ) ]\nforeign keys :\nflight.aid = aircraft.aid\ncertificate.aid = aircraft.aid\ncertificate.eid = employee.eid\nmatched contents : None",
  "database schema :\ntable allergy_type , columns = [ allergy_type.allergy ( varchar(20) | primary key | comment : allergy name ) , allergy_type.allergytype ( varchar(20) ) ]\ntable has_allergy , columns = [ has_allergy.stuid ( integer ) , has_allergy.allergy ( varchar(20) ) ]\ntable student , columns = [ student.stuid ( integer | primary key ) , student.lname ( varchar(12) | comment : last name ) , student.fname ( varchar(12) | comment : first name ) , student.age ( integer ) , student.sex ( varchar(1) ) , student.major ( integer ) , student.advisor ( integer ) , student.city_code ( varchar(3) ) ]\nforeign keys :\nhas_allergy.allergy = allergy_type.allergy\nhas_allergy.stuid = student.stuid\nmatched contents : None",
  "database schema :\ntable artists , columns = [ artists.id ( integer | primary key | comment : name ) , artists.name ( varchar(120) | comment : seq ) ]\ntable albums , columns = [ albums.id ( integer | primary key ) , albums.title ( varchar(160) ) , albums.artist_id ( integer ) ]\ntable employees , columns = [ employees.id ( integer | primary key ) , employees.last_name ( varchar(20) ) , employees.first_name ( varchar(20) ) , employees.title ( varchar(30) ) , employees.reports_to ( integer ) , employees.birth_date ( timestamp ) , employees.hire_date ( timestamp ) , employees.address ( varchar(70) ) , employees.city ( varchar(40) ) , employees.state ( varchar(40) ) , employees.country ( varchar(40) ) , employees.postal_code ( varchar(10) ) , employees.phone ( varchar(24) ) , employees.fax ( varchar(24) ) , employees.email ( varchar(60) ) ]\ntable customers , columns = [ customers.id ( integer | primary key ) , customers.first_name ( varchar(40) ) , customers.last_name ( varchar(20) ) , customers.company ( varchar(80) ) , customers.address ( varchar(70) ) , customers.city ( varchar(40) ) , customers.state ( varchar(40) ) , customers.country ( varchar(40) ) , customers.postal_code ( varchar(10) ) , customers.phone ( varchar(24) ) , customers.fax ( varchar(24) ) , customers.email ( varchar(60) ) , customers.support_rep_id ( integer ) ]\ntable genres , columns = [ genres.id ( integer | primary key ) , genres.name ( varchar(120) ) ]\ntable invoices , columns = [ invoices.id ( integer | primary key ) , invoices.customer_id ( integer ) , invoices.invoice_date ( timestamp ) , invoices.billing_address ( varchar(70) ) , invoices.billing_city ( varchar(40) ) , invoices.billing_state ( varchar(40) ) , invoices.billing_country ( varchar(40) ) , invoices.billing_postal_code ( varchar(10) ) , invoices.total ( numeric(10,2) ) ]\ntable media_types , columns = [ media_types.id ( integer | primary key ) , media_types.name ( varchar(120) ) ]\ntable tracks , columns = [ tracks.id ( integer | primary key ) , tracks.name ( varchar(200) ) , tracks.album_id ( integer ) , tracks.media_type_id ( integer ) , tracks.genre_id ( integer ) , tracks.composer ( varchar(220) ) , tracks.milliseconds ( integer ) , tracks.bytes ( integer ) , tracks.unit_price ( numeric(10,2) ) ]\ntable invoice_lines , columns = [ invoice_lines.id ( integer | primary key ) , invoice_lines.invoice_id ( integer ) , invoice_lines.track_id ( integer ) , invoice_lines.unit_price ( numeric(10,2) ) , invoice_lines.quantity ( integer ) ]\ntable playlists , columns = [ playlists.id ( integer | primary key ) , playlists.name ( varchar(120) ) ]\ntable playlist_tracks , columns = [ playlist_tracks.playlist_id ( integer | primary key ) , playlist_tracks.track_id ( integer | primary key ) ]\nforeign keys :\nalbums.artist_id = artists.id\nemployees.reports_to = employees.id\ncustomers.support_rep_id = employees.id\ninvoices.customer_id = customers.id\ntracks.media_type_id = media_types.id\ntracks.genre_id = genres.id\ntracks.album_id = albums.id\ninvoice_lines.track_id = tracks.id\ninvoice_lines.invoice_id = invoices.id\nplaylist_tracks.track_id = tracks.id\nplaylist_tracks.playlist_id = playlists.id\nmatched contents :\nartists.id ( 5 )\nalbums.id ( 5 )\nalbums.artist_id ( 5 )\nemployees.id ( 5 )\ncustomers.id ( 5 )\ncustomers.support_rep_id ( 5 )\ngenres.id ( 5 )\ntracks.name ( Numbers )\ninvoice_lines.id ( 5 )\ninvoice_lines.invoice_id ( 5 )\ninvoice_lines.track_id ( 5 )",
  "database schema :\ntable journal , columns = [ journal.journal_id ( int | primary key ) , journal.date ( text ) , journal.theme ( text ) , journal.sales ( int ) ]\ntable editor , columns = [ editor.editor_id ( int | primary key ) , editor.name ( text ) , editor.age ( real ) ]\ntable journal_committee , columns = [ journal_committee.editor_id ( int | primary key ) , journal_committee.journal_id ( int | primary key ) , journal_committee.work_type ( text ) ]\nforeign keys :\njournal_committee.journal_id = journal.journal_id\njournal_committee.editor_id = editor.editor_id\nmatched contents : None",
  "database schema :\ntable accounts , columns = [ accounts.account_id ( integer | primary key ) , accounts.customer_id ( integer ) , accounts.account_name ( varchar(50) ) , accounts.other_account_details ( varchar(255) ) ]\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.customer_first_name ( varchar(20) ) , customers.customer_last_name ( varchar(20) ) , customers.customer_address ( varchar(255) ) , customers.customer_phone ( varchar(255) ) , customers.customer_email ( varchar(255) ) , customers.other_customer_details ( varchar(255) ) ]\ntable customers_cards , columns = [ customers_cards.card_id ( integer | primary key ) , customers_cards.customer_id ( integer ) , customers_cards.card_type_code ( varchar(15) ) , customers_cards.card_number ( varchar(80) ) , customers_cards.date_valid_from ( datetime ) , customers_cards.date_valid_to ( datetime ) , customers_cards.other_card_details ( varchar(255) ) ]\ntable financial_transactions , columns = [ financial_transactions.transaction_id ( integer ) , financial_transactions.previous_transaction_id ( integer ) , financial_transactions.account_id ( integer ) , financial_transactions.card_id ( integer ) , financial_transactions.transaction_type ( varchar(15) ) , financial_transactions.transaction_date ( datetime ) , financial_transactions.transaction_amount ( double ) , financial_transactions.transaction_comment ( varchar(255) ) , financial_transactions.other_transaction_details ( varchar(255) ) ]\nforeign keys :\nfinancial_transactions.account_id = accounts.account_id\nfinancial_transactions.card_id = customers_cards.card_id\nmatched contents : None",
  "database schema :\ntable race , columns = [ race.race_id ( int | primary key ) , race.name ( text ) , race.class ( text ) , race.date ( text ) , race.track_id ( text ) ]\ntable track , columns = [ track.track_id ( int | primary key ) , track.name ( text ) , track.location ( text ) , track.seating ( real ) , track.year_opened ( real ) ]\nforeign keys :\nrace.track_id = track.track_id\nmatched contents : None",
  "database schema :\ntable shop , columns = [ shop.shop_id ( int | primary key ) , shop.address ( text ) , shop.num_of_staff ( text ) , shop.score ( real ) , shop.open_year ( text ) ]\ntable member , columns = [ member.member_id ( int | primary key ) , member.name ( text ) , member.membership_card ( text ) , member.age ( int ) , member.time_of_purchase ( int ) , member.level_of_membership ( int ) , member.address ( text ) ]\ntable happy_hour , columns = [ happy_hour.hh_id ( int | primary key ) , happy_hour.shop_id ( int | primary key ) , happy_hour.month ( text | primary key ) , happy_hour.num_of_shaff_in_charge ( int ) ]\ntable happy_hour_member , columns = [ happy_hour_member.hh_id ( int | primary key ) , happy_hour_member.member_id ( int | primary key ) , happy_hour_member.total_amount ( real ) ]\nforeign keys :\nhappy_hour.shop_id = shop.shop_id\nhappy_hour_member.member_id = member.member_id\nmatched contents :\nmember.membership_card ( Black )",
  "database schema :\ntable album , columns = [ album.albumid ( integer | primary key ) , album.title ( varchar(160) ) , album.artistid ( integer ) ]\ntable artist , columns = [ artist.artistid ( integer | primary key ) , artist.name ( varchar(120) ) ]\ntable customer , columns = [ customer.customerid ( integer | primary key ) , customer.firstname ( varchar(40) ) , customer.lastname ( varchar(20) ) , customer.company ( varchar(80) ) , customer.address ( varchar(70) ) , customer.city ( varchar(40) ) , customer.state ( varchar(40) ) , customer.country ( varchar(40) ) , customer.postalcode ( varchar(10) ) , customer.phone ( varchar(24) ) , customer.fax ( varchar(24) ) , customer.email ( varchar(60) ) , customer.supportrepid ( integer | comment : support representative id ) ]\ntable employee , columns = [ employee.employeeid ( integer | primary key ) , employee.lastname ( varchar(20) ) , employee.firstname ( varchar(20) ) , employee.title ( varchar(30) ) , employee.reportsto ( integer ) , employee.birthdate ( datetime ) , employee.hiredate ( datetime ) , employee.address ( varchar(70) ) , employee.city ( varchar(40) ) , employee.state ( varchar(40) ) , employee.country ( varchar(40) ) , employee.postalcode ( varchar(10) ) , employee.phone ( varchar(24) ) , employee.fax ( varchar(24) ) , employee.email ( varchar(60) ) ]\ntable genre , columns = [ genre.genreid ( integer | primary key ) , genre.name ( varchar(120) ) ]\ntable invoice , columns = [ invoice.invoiceid ( integer | primary key ) , invoice.customerid ( integer ) , invoice.invoicedate ( datetime ) , invoice.billingaddress ( varchar(70) ) , invoice.billingcity ( varchar(40) ) , invoice.billingstate ( varchar(40) ) , invoice.billingcountry ( varchar(40) ) , invoice.billingpostalcode ( varchar(10) ) , invoice.total ( decimal(10,2) ) ]\ntable invoiceline , columns = [ invoiceline.invoicelineid ( integer | primary key ) , invoiceline.invoiceid ( integer ) , invoiceline.trackid ( integer ) , invoiceline.unitprice ( decimal(10,2) ) , invoiceline.quantity ( integer ) ]\ntable mediatype , columns = [ mediatype.mediatypeid ( integer | primary key ) , mediatype.name ( varchar(120) ) ]\ntable playlist , columns = [ playlist.playlistid ( integer | primary key ) , playlist.name ( varchar(120) ) ]\ntable playlisttrack , columns = [ playlisttrack.playlistid ( integer | primary key ) , playlisttrack.trackid ( integer | primary key ) ]\ntable track , columns = [ track.trackid ( integer | primary key ) , track.name ( varchar(200) ) , track.albumid ( integer ) , track.mediatypeid ( integer ) , track.genreid ( integer ) , track.composer ( varchar(220) ) , track.milliseconds ( integer ) , track.bytes ( integer ) , track.unitprice ( decimal(10,2) ) ]\nforeign keys :\nalbum.artistid = artist.artistid\ncustomer.supportrepid = employee.employeeid\nemployee.reportsto = employee.employeeid\ninvoice.customerid = customer.customerid\ninvoiceline.trackid = track.trackid\ninvoiceline.invoiceid = invoice.invoiceid\nplaylisttrack.trackid = track.trackid\nplaylisttrack.playlistid = playlist.playlistid\ntrack.mediatypeid = mediatype.mediatypeid\ntrack.genreid = genre.genreid\ntrack.albumid = album.albumid\nmatched contents : None",
  "database schema :\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.customer_name ( varchar(40) ) ]\ntable services , columns = [ services.service_id ( integer | primary key ) , services.service_name ( varchar(40) ) ]\ntable available_policies , columns = [ available_policies.policy_id ( integer | primary key ) , available_policies.policy_type_code ( char(15) ) , available_policies.customer_phone ( varchar(255) ) ]\ntable customers_policies , columns = [ customers_policies.customer_id ( integer | primary key ) , customers_policies.policy_id ( integer | primary key ) , customers_policies.date_opened ( date ) , customers_policies.date_closed ( date ) ]\ntable first_notification_of_loss , columns = [ first_notification_of_loss.fnol_id ( integer | primary key ) , first_notification_of_loss.customer_id ( integer ) , first_notification_of_loss.policy_id ( integer ) , first_notification_of_loss.service_id ( integer ) ]\ntable claims , columns = [ claims.claim_id ( integer | primary key ) , claims.fnol_id ( integer ) , claims.effective_date ( date ) ]\ntable settlements , columns = [ settlements.settlement_id ( integer | primary key ) , settlements.claim_id ( integer ) , settlements.effective_date ( date ) , settlements.settlement_amount ( real ) ]\nforeign keys :\ncustomers_policies.policy_id = available_policies.policy_id\ncustomers_policies.customer_id = customers.customer_id\nfirst_notification_of_loss.customer_id = customers_policies.customer_id\nfirst_notification_of_loss.policy_id = customers_policies.policy_id\nfirst_notification_of_loss.service_id = services.service_id\nclaims.fnol_id = first_notification_of_loss.fnol_id\nsettlements.claim_id = claims.claim_id\nmatched contents : None",
  "database schema :\ntable medicine , columns = [ medicine.id ( int | primary key ) , medicine.name ( text ) , medicine.trade_name ( text ) , medicine.fda_approved ( text ) ]\ntable enzyme , columns = [ enzyme.id ( int | primary key ) , enzyme.name ( text ) , enzyme.location ( text ) , enzyme.product ( text ) , enzyme.chromosome ( text ) , enzyme.omim ( int ) , enzyme.porphyria ( text ) ]\ntable medicine_enzyme_interaction , columns = [ medicine_enzyme_interaction.enzyme_id ( int | primary key ) , medicine_enzyme_interaction.medicine_id ( int | primary key ) , medicine_enzyme_interaction.interaction_type ( text ) ]\nforeign keys :\nmedicine_enzyme_interaction.medicine_id = medicine.id\nmedicine_enzyme_interaction.enzyme_id = enzyme.id\nmatched contents : None",
  "database schema :\ntable basketball_match , columns = [ basketball_match.team_id ( int | primary key ) , basketball_match.school_id ( int ) , basketball_match.team_name ( text ) , basketball_match.acc_regular_season ( text ) , basketball_match.acc_percent ( text ) , basketball_match.acc_home ( text ) , basketball_match.acc_road ( text ) , basketball_match.all_games ( text ) , basketball_match.all_games_percent ( int ) , basketball_match.all_home ( text ) , basketball_match.all_road ( text ) , basketball_match.all_neutral ( text ) ]\ntable university , columns = [ university.school_id ( int | primary key ) , university.school ( text ) , university.location ( text ) , university.founded ( real ) , university.affiliation ( text ) , university.enrollment ( real ) , university.nickname ( text ) , university.primary_conference ( text ) ]\nforeign keys :\nbasketball_match.school_id = university.school_id\nmatched contents : None",
  "database schema :\ntable chip_model , columns = [ chip_model.model_name ( text | primary key ) , chip_model.launch_year ( real ) , chip_model.ram_mib ( real ) , chip_model.rom_mib ( real ) , chip_model.slots ( text ) , chip_model.wifi ( text ) , chip_model.bluetooth ( text ) ]\ntable screen_mode , columns = [ screen_mode.graphics_mode ( real | primary key ) , screen_mode.char_cells ( text ) , screen_mode.pixels ( text ) , screen_mode.hardware_colours ( real ) , screen_mode.used_kb ( real ) , screen_mode.map ( text ) , screen_mode.type ( text ) ]\ntable phone , columns = [ phone.company_name ( text ) , phone.hardware_model_name ( text | primary key ) , phone.accreditation_type ( text ) , phone.accreditation_level ( text ) , phone.date ( text ) , phone.chip_model ( text ) , phone.screen_mode ( text ) ]\nforeign keys :\nphone.chip_model = chip_model.model_name\nphone.screen_mode = screen_mode.graphics_mode\nmatched contents : None",
  "database schema :\ntable country , columns = [ country.country_id ( int | primary key ) , country.country_name ( text ) , country.capital ( text ) , country.official_native_language ( text ) ]\ntable team , columns = [ team.team_id ( int | primary key ) , team.name ( text ) ]\ntable match_season , columns = [ match_season.season ( real | primary key ) , match_season.player ( text ) , match_season.position ( text ) , match_season.country ( int ) , match_season.team ( int ) , match_season.draft_pick_number ( int ) , match_season.draft_class ( text ) , match_season.college ( text ) ]\ntable player , columns = [ player.player_id ( int | primary key ) , player.player ( text ) , player.years_played ( text ) , player.total_wl ( text ) , player.singles_wl ( text ) , player.doubles_wl ( text ) , player.team ( int ) ]\nforeign keys :\nmatch_season.team = team.team_id\nmatch_season.country = country.country_id\nplayer.team = team.team_id\nmatched contents : None",
  "database schema :\ntable mountain , columns = [ mountain.mountain_id ( int | primary key ) , mountain.name ( text ) , mountain.height ( real ) , mountain.prominence ( real ) , mountain.range ( text ) , mountain.country ( text ) ]\ntable climber , columns = [ climber.climber_id ( int | primary key ) , climber.name ( text ) , climber.country ( text ) , climber.time ( text ) , climber.points ( real ) , climber.mountain_id ( int ) ]\nforeign keys :\nclimber.mountain_id = mountain.mountain_id\nmatched contents : None",
  "database schema :\ntable body_builder , columns = [ body_builder.body_builder_id ( int | primary key ) , body_builder.people_id ( int ) , body_builder.snatch ( real ) , body_builder.clean_jerk ( real ) , body_builder.total ( real ) ]\ntable people , columns = [ people.people_id ( int | primary key ) , people.name ( text ) , people.height ( real ) , people.weight ( real ) , people.birth_date ( text ) , people.birth_place ( text ) ]\nforeign keys :\nbody_builder.people_id = people.people_id\nmatched contents : None",
  "database schema :\ntable election , columns = [ election.election_id ( int | primary key ) , election.representative_id ( int ) , election.date ( text ) , election.votes ( real ) , election.vote_percent ( real ) , election.seats ( real ) , election.place ( real ) ]\ntable representative , columns = [ representative.representative_id ( int | primary key ) , representative.name ( text ) , representative.state ( text ) , representative.party ( text ) , representative.lifespan ( text ) ]\nforeign keys :\nelection.representative_id = representative.representative_id\nmatched contents : None",
  "database schema :\ntable apartment_buildings , columns = [ apartment_buildings.building_id ( integer | primary key ) , apartment_buildings.building_short_name ( char(15) ) , apartment_buildings.building_full_name ( varchar(80) ) , apartment_buildings.building_description ( varchar(255) ) , apartment_buildings.building_address ( varchar(255) ) , apartment_buildings.building_manager ( varchar(50) ) , apartment_buildings.building_phone ( varchar(80) ) ]\ntable apartments , columns = [ apartments.apt_id ( integer | primary key | comment : apartment id ) , apartments.building_id ( integer ) , apartments.apt_type_code ( char(15) | comment : apartment type code ) , apartments.apt_number ( char(10) | comment : apartment number ) , apartments.bathroom_count ( integer ) , apartments.bedroom_count ( integer ) , apartments.room_count ( char(5) ) ]\ntable apartment_facilities , columns = [ apartment_facilities.apt_id ( integer | primary key | comment : apartment id ) , apartment_facilities.facility_code ( char(15) | primary key ) ]\ntable guests , columns = [ guests.guest_id ( integer | primary key ) , guests.gender_code ( char(1) ) , guests.guest_first_name ( varchar(80) ) , guests.guest_last_name ( varchar(80) ) , guests.date_of_birth ( datetime ) ]\ntable apartment_bookings , columns = [ apartment_bookings.apt_booking_id ( integer | primary key | comment : apartment booking id ) , apartment_bookings.apt_id ( integer | comment : apartment id ) , apartment_bookings.guest_id ( integer ) , apartment_bookings.booking_status_code ( char(15) ) , apartment_bookings.booking_start_date ( datetime ) , apartment_bookings.booking_end_date ( datetime ) ]\ntable view_unit_status , columns = [ view_unit_status.apt_id ( integer | comment : apartment id ) , view_unit_status.apt_booking_id ( integer | comment : apartment booking id ) , view_unit_status.status_date ( datetime | primary key ) , view_unit_status.available_yn ( bit | comment : available yes or no ) ]\nforeign keys :\napartments.building_id = apartment_buildings.building_id\napartment_facilities.apt_id = apartments.apt_id\napartment_bookings.guest_id = guests.guest_id\napartment_bookings.apt_id = apartments.apt_id\nview_unit_status.apt_booking_id = apartment_bookings.apt_booking_id\nview_unit_status.apt_id = apartments.apt_id\nmatched contents : None",
  "database schema :\ntable stadium , columns = [ stadium.id ( int | primary key ) , stadium.name ( text ) , stadium.home_games ( int ) , stadium.average_attendance ( real ) , stadium.total_attendance ( real ) , stadium.capacity_percentage ( real ) ]\ntable game , columns = [ game.stadium_id ( int ) , game.id ( int | primary key ) , game.season ( int ) , game.date ( text ) , game.home_team ( text ) , game.away_team ( text ) , game.score ( text ) , game.competition ( text ) ]\ntable injury_accident , columns = [ injury_accident.game_id ( int ) , injury_accident.id ( int | primary key ) , injury_accident.player ( text ) , injury_accident.injury ( text ) , injury_accident.number_of_matches ( text ) , injury_accident.source ( text ) ]\nforeign keys :\ngame.stadium_id = stadium.id\ninjury_accident.game_id = game.id\nmatched contents :\ngame.season ( 2007 )",
  "database schema :\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key ) , player_attributes.player_fifa_api_id ( integer ) , player_attributes.player_api_id ( integer ) , player_attributes.date ( text ) , player_attributes.overall_rating ( integer ) , player_attributes.potential ( integer ) , player_attributes.preferred_foot ( text ) , player_attributes.attacking_work_rate ( text ) , player_attributes.defensive_work_rate ( text ) , player_attributes.crossing ( integer ) , player_attributes.finishing ( integer ) , player_attributes.heading_accuracy ( integer ) , player_attributes.short_passing ( integer ) , player_attributes.volleys ( integer ) , player_attributes.dribbling ( integer ) , player_attributes.curve ( integer ) , player_attributes.free_kick_accuracy ( integer ) , player_attributes.long_passing ( integer ) , player_attributes.ball_control ( integer ) , player_attributes.acceleration ( integer ) , player_attributes.sprint_speed ( integer ) , player_attributes.agility ( integer ) , player_attributes.reactions ( integer ) , player_attributes.balance ( integer ) , player_attributes.shot_power ( integer ) , player_attributes.jumping ( integer ) , player_attributes.stamina ( integer ) , player_attributes.strength ( integer ) , player_attributes.long_shots ( integer ) , player_attributes.aggression ( integer ) , player_attributes.interceptions ( integer ) , player_attributes.positioning ( integer ) , player_attributes.vision ( integer ) , player_attributes.penalties ( integer ) , player_attributes.marking ( integer ) , player_attributes.standing_tackle ( integer ) , player_attributes.sliding_tackle ( integer ) , player_attributes.gk_diving ( integer ) , player_attributes.gk_handling ( integer ) , player_attributes.gk_kicking ( integer ) , player_attributes.gk_positioning ( integer ) , player_attributes.gk_reflexes ( integer ) ]\ntable player , columns = [ player.id ( integer | primary key ) , player.player_api_id ( integer ) , player.player_name ( text ) , player.player_fifa_api_id ( integer ) , player.birthday ( text ) , player.height ( integer ) , player.weight ( integer ) ]\ntable league , columns = [ league.id ( integer | primary key ) , league.country_id ( integer ) , league.name ( text ) ]\ntable country , columns = [ country.id ( integer | primary key ) , country.name ( text ) ]\ntable team , columns = [ team.id ( integer | primary key ) , team.team_api_id ( integer ) , team.team_fifa_api_id ( integer ) , team.team_long_name ( text ) , team.team_short_name ( text ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key ) , team_attributes.team_fifa_api_id ( integer ) , team_attributes.team_api_id ( integer ) , team_attributes.date ( text ) , team_attributes.buildupplayspeed ( integer ) , team_attributes.buildupplayspeedclass ( text ) , team_attributes.buildupplaydribbling ( integer ) , team_attributes.buildupplaydribblingclass ( text ) , team_attributes.buildupplaypassing ( integer ) , team_attributes.buildupplaypassingclass ( text ) , team_attributes.buildupplaypositioningclass ( text ) , team_attributes.chancecreationpassing ( integer ) , team_attributes.chancecreationpassingclass ( text ) , team_attributes.chancecreationcrossing ( integer ) , team_attributes.chancecreationcrossingclass ( text ) , team_attributes.chancecreationshooting ( integer ) , team_attributes.chancecreationshootingclass ( text ) , team_attributes.chancecreationpositioningclass ( text ) , team_attributes.defencepressure ( integer ) , team_attributes.defencepressureclass ( text ) , team_attributes.defenceaggression ( integer ) , team_attributes.defenceaggressionclass ( text ) , team_attributes.defenceteamwidth ( integer ) , team_attributes.defenceteamwidthclass ( text ) , team_attributes.defencedefenderlineclass ( text ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatched contents : None",
  "database schema :\ntable member , columns = [ member.member_id ( text | primary key ) , member.name ( text ) , member.nationality ( text ) , member.role ( text ) ]\ntable performance , columns = [ performance.performance_id ( real | primary key ) , performance.date ( text ) , performance.host ( text ) , performance.location ( text ) , performance.attendance ( int ) ]\ntable member_attendance , columns = [ member_attendance.member_id ( int | primary key ) , member_attendance.performance_id ( int | primary key ) , member_attendance.num_of_pieces ( int ) ]\nforeign keys :\nmember_attendance.performance_id = performance.performance_id\nmember_attendance.member_id = member.member_id\nmatched contents : None",
  "database schema :\ntable classroom , columns = [ classroom.building ( varchar(15) | primary key ) , classroom.room_number ( varchar(7) | primary key ) , classroom.capacity ( numeric(4,0) ) ]\ntable department , columns = [ department.dept_name ( varchar(20) | primary key | comment : department name ) , department.building ( varchar(15) ) , department.budget ( numeric(12,2) ) ]\ntable course , columns = [ course.course_id ( varchar(8) | primary key ) , course.title ( varchar(50) ) , course.dept_name ( varchar(20) | comment : department name ) , course.credits ( numeric(2,0) ) ]\ntable instructor , columns = [ instructor.id ( varchar(5) | primary key ) , instructor.name ( varchar(20) ) , instructor.dept_name ( varchar(20) | comment : department name ) , instructor.salary ( numeric(8,2) ) ]\ntable section , columns = [ section.course_id ( varchar(8) | primary key ) , section.sec_id ( varchar(8) | primary key | comment : section id ) , section.semester ( varchar(6) | primary key ) , section.year ( numeric(4,0) | primary key ) , section.building ( varchar(15) ) , section.room_number ( varchar(7) ) , section.time_slot_id ( varchar(4) ) ]\ntable teaches , columns = [ teaches.id ( varchar(5) | primary key ) , teaches.course_id ( varchar(8) | primary key ) , teaches.sec_id ( varchar(8) | primary key | comment : section id ) , teaches.semester ( varchar(6) | primary key ) , teaches.year ( numeric(4,0) | primary key ) ]\ntable student , columns = [ student.id ( varchar(5) | primary key ) , student.name ( varchar(20) ) , student.dept_name ( varchar(20) | comment : department name ) , student.tot_cred ( numeric(3,0) | comment : total credits ) ]\ntable takes , columns = [ takes.id ( varchar(5) | primary key ) , takes.course_id ( varchar(8) | primary key ) , takes.sec_id ( varchar(8) | primary key | comment : section id ) , takes.semester ( varchar(6) | primary key ) , takes.year ( numeric(4,0) | primary key ) , takes.grade ( varchar(2) ) ]\ntable advisor , columns = [ advisor.s_id ( varchar(5) | primary key | comment : student id ) , advisor.i_id ( varchar(5) | comment : instructor id ) ]\ntable time_slot , columns = [ time_slot.time_slot_id ( varchar(4) | primary key ) , time_slot.day ( varchar(1) | primary key ) , time_slot.start_hr ( numeric(2) | primary key | comment : start hour ) , time_slot.start_min ( numeric(2) | primary key | comment : start minute ) , time_slot.end_hr ( numeric(2) | comment : end hour ) , time_slot.end_min ( numeric(2) | comment : end minute ) ]\ntable prereq , columns = [ prereq.course_id ( varchar(8) | primary key ) , prereq.prereq_id ( varchar(8) | primary key | comment : prerequisite id ) ]\nforeign keys :\ncourse.dept_name = department.dept_name\ninstructor.dept_name = department.dept_name\nsection.building = classroom.building\nsection.room_number = classroom.room_number\nsection.course_id = course.course_id\nteaches.id = instructor.id\nteaches.course_id = section.course_id\nteaches.sec_id = section.sec_id\nteaches.semester = section.semester\nteaches.year = section.year\nstudent.dept_name = department.dept_name\ntakes.id = student.id\ntakes.course_id = section.course_id\ntakes.sec_id = section.sec_id\ntakes.semester = section.semester\ntakes.year = section.year\nadvisor.s_id = student.id\nadvisor.i_id = instructor.id\nprereq.prereq_id = course.course_id\nprereq.course_id = course.course_id\nmatched contents :\nstudent.tot_cred ( 50 )\ntime_slot.end_min ( 50 )",
  "database schema :\ntable people , columns = [ people.people_id ( int | primary key ) , people.district ( text ) , people.name ( text ) , people.party ( text ) , people.age ( int ) ]\ntable debate , columns = [ debate.debate_id ( int | primary key ) , debate.date ( text ) , debate.venue ( text ) , debate.num_of_audience ( int ) ]\ntable debate_people , columns = [ debate_people.debate_id ( int | primary key ) , debate_people.affirmative ( int | primary key ) , debate_people.negative ( int | primary key ) , debate_people.if_affirmative_win ( bool ) ]\nforeign keys :\ndebate_people.negative = people.people_id\ndebate_people.affirmative = people.people_id\ndebate_people.debate_id = debate.debate_id\nmatched contents : None",
  "database schema :\ntable item , columns = [ item.i_id ( integer | primary key | comment : item id ) , item.title ( varchar(20) ) ]\ntable review , columns = [ review.a_id ( integer | primary key ) , review.u_id ( integer | comment : user id ) , review.i_id ( integer | comment : item id ) , review.rating ( integer ) , review.rank ( integer ) ]\ntable useracct , columns = [ useracct.u_id ( integer | primary key | comment : user id ) , useracct.name ( varchar(128) ) ]\ntable trust , columns = [ trust.source_u_id ( integer | comment : source user id ) , trust.target_u_id ( integer | comment : target user id ) , trust.trust ( integer ) ]\nforeign keys :\nreview.i_id = item.i_id\nreview.u_id = useracct.u_id\ntrust.target_u_id = useracct.u_id\ntrust.source_u_id = useracct.u_id\nmatched contents :\nitem.title ( orange )",
  "database schema :\ntable gymnast , columns = [ gymnast.gymnast_id ( int | primary key ) , gymnast.floor_exercise_points ( real ) , gymnast.pommel_horse_points ( real ) , gymnast.rings_points ( real ) , gymnast.vault_points ( real ) , gymnast.parallel_bars_points ( real ) , gymnast.horizontal_bar_points ( real ) , gymnast.total_points ( real ) ]\ntable people , columns = [ people.people_id ( int | primary key ) , people.name ( text ) , people.age ( real ) , people.height ( real ) , people.hometown ( text ) ]\nforeign keys :\ngymnast.gymnast_id = people.people_id\nmatched contents : None",
  "database schema :\ntable web_client_accelerator , columns = [ web_client_accelerator.id ( int | primary key ) , web_client_accelerator.name ( text ) , web_client_accelerator.operating_system ( text ) , web_client_accelerator.client ( text ) , web_client_accelerator.connection ( text ) ]\ntable browser , columns = [ browser.id ( int | primary key ) , browser.name ( text ) , browser.market_share ( real ) ]\ntable accelerator_compatible_browser , columns = [ accelerator_compatible_browser.accelerator_id ( int | primary key ) , accelerator_compatible_browser.browser_id ( int | primary key ) , accelerator_compatible_browser.compatible_since_year ( int ) ]\nforeign keys :\naccelerator_compatible_browser.browser_id = browser.id\naccelerator_compatible_browser.accelerator_id = web_client_accelerator.id\nmatched contents :\nweb_client_accelerator.id ( 5 )",
  "database schema :\ntable wrestler , columns = [ wrestler.wrestler_id ( int | primary key ) , wrestler.name ( text ) , wrestler.reign ( text ) , wrestler.days_held ( text ) , wrestler.location ( text ) , wrestler.event ( text ) ]\ntable elimination , columns = [ elimination.elimination_id ( text | primary key ) , elimination.wrestler_id ( text ) , elimination.team ( text ) , elimination.eliminated_by ( text ) , elimination.elimination_move ( text ) , elimination.time ( text ) ]\nforeign keys :\nelimination.wrestler_id = wrestler.wrestler_id\nmatched contents : None",
  "database schema :\ntable school , columns = [ school.school_id ( text | primary key ) , school.school_name ( text ) , school.location ( text ) , school.mascot ( text ) , school.enrollment ( int ) , school.ihsaa_class ( text ) , school.ihsaa_football_class ( text ) , school.county ( text ) ]\ntable budget , columns = [ budget.school_id ( int | primary key ) , budget.year ( int | primary key ) , budget.budgeted ( int ) , budget.total_budget_percent_budgeted ( real ) , budget.invested ( int ) , budget.total_budget_percent_invested ( real ) , budget.budget_invested_percent ( text ) ]\ntable endowment , columns = [ endowment.endowment_id ( int | primary key ) , endowment.school_id ( int ) , endowment.donator_name ( text ) , endowment.amount ( real ) ]\nforeign keys :\nbudget.school_id = school.school_id\nendowment.school_id = school.school_id\nmatched contents : None",
  "database schema :\ntable building , columns = [ building.building_id ( text | primary key ) , building.name ( text ) , building.street_address ( text ) , building.years_as_tallest ( text ) , building.height_feet ( int ) , building.floors ( int ) ]\ntable institution , columns = [ institution.institution_id ( text | primary key ) , institution.institution ( text ) , institution.location ( text ) , institution.founded ( real ) , institution.type ( text ) , institution.enrollment ( int ) , institution.team ( text ) , institution.primary_conference ( text ) , institution.building_id ( text ) ]\ntable protein , columns = [ protein.common_name ( text | primary key ) , protein.protein_name ( text ) , protein.divergence_from_human_lineage ( real ) , protein.accession_number ( text ) , protein.sequence_length ( real ) , protein.sequence_identity_to_human_protein ( text ) , protein.institution_id ( text ) ]\nforeign keys :\ninstitution.building_id = building.building_id\nprotein.institution_id = institution.institution_id\nmatched contents : None",
  "database schema :\ntable film , columns = [ film.film_id ( int | primary key ) , film.rank_in_series ( int ) , film.number_in_season ( int ) , film.title ( text ) , film.directed_by ( text ) , film.original_air_date ( text ) , film.production_code ( text ) ]\ntable cinema , columns = [ cinema.cinema_id ( int | primary key ) , cinema.name ( text ) , cinema.openning_year ( int ) , cinema.capacity ( int ) , cinema.location ( text ) ]\ntable schedule , columns = [ schedule.cinema_id ( int | primary key ) , schedule.film_id ( int | primary key ) , schedule.date ( text ) , schedule.show_times_per_day ( int ) , schedule.price ( float ) ]\nforeign keys :\nschedule.cinema_id = cinema.cinema_id\nschedule.film_id = film.film_id\nmatched contents : None",
  "database schema :\ntable discount_coupons , columns = [ discount_coupons.coupon_id ( integer | primary key ) , discount_coupons.date_issued ( datetime ) , discount_coupons.coupon_amount ( decimal(19,4) ) ]\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.coupon_id ( integer ) , customers.good_or_bad_customer ( varchar(4) ) , customers.first_name ( varchar(80) ) , customers.last_name ( varchar(80) ) , customers.gender_mf ( varchar(1) | comment : gender ) , customers.date_became_customer ( datetime ) , customers.date_last_hire ( datetime ) ]\ntable bookings , columns = [ bookings.booking_id ( integer | primary key ) , bookings.customer_id ( integer ) , bookings.booking_status_code ( varchar(10) ) , bookings.returned_damaged_yn ( varchar(40) | comment : returned damaged yes or no ) , bookings.booking_start_date ( datetime ) , bookings.booking_end_date ( datetime ) , bookings.count_hired ( varchar(40) ) , bookings.amount_payable ( decimal(19,4) ) , bookings.amount_of_discount ( decimal(19,4) ) , bookings.amount_outstanding ( decimal(19,4) ) , bookings.amount_of_refund ( decimal(19,4) ) ]\ntable products_for_hire , columns = [ products_for_hire.product_id ( integer | primary key ) , products_for_hire.product_type_code ( varchar(15) ) , products_for_hire.daily_hire_cost ( decimal(19,4) ) , products_for_hire.product_name ( varchar(80) ) , products_for_hire.product_description ( varchar(255) ) ]\ntable payments , columns = [ payments.payment_id ( integer | primary key ) , payments.booking_id ( integer ) , payments.customer_id ( integer ) , payments.payment_type_code ( varchar(15) ) , payments.amount_paid_in_full_yn ( varchar(1) ) , payments.payment_date ( datetime ) , payments.amount_due ( decimal(19,4) ) , payments.amount_paid ( decimal(19,4) ) ]\ntable products_booked , columns = [ products_booked.booking_id ( integer | primary key ) , products_booked.product_id ( integer | primary key ) , products_booked.returned_yn ( varchar(1) | comment : returned yes or no ) , products_booked.returned_late_yn ( varchar(1) | comment : returned late yes or no ) , products_booked.booked_count ( integer ) , products_booked.booked_amount ( float ) ]\ntable view_product_availability , columns = [ view_product_availability.product_id ( integer ) , view_product_availability.booking_id ( integer ) , view_product_availability.status_date ( datetime | primary key ) , view_product_availability.available_yn ( varchar(1) | comment : available yes or no ) ]\nforeign keys :\ncustomers.coupon_id = discount_coupons.coupon_id\nbookings.customer_id = customers.customer_id\npayments.customer_id = customers.customer_id\npayments.booking_id = bookings.booking_id\nproducts_booked.product_id = products_for_hire.product_id\nproducts_booked.booking_id = bookings.booking_id\nview_product_availability.product_id = products_for_hire.product_id\nview_product_availability.booking_id = bookings.booking_id\nmatched contents :\ndiscount_coupons.coupon_amount ( 500 )\ncustomers.good_or_bad_customer ( bad , good )",
  "database schema :\ntable phone , columns = [ phone.name ( text ) , phone.phone_id ( int | primary key ) , phone.memory_in_g ( int ) , phone.carrier ( text ) , phone.price ( real ) ]\ntable market , columns = [ market.market_id ( int | primary key ) , market.district ( text ) , market.num_of_employees ( int ) , market.num_of_shops ( real ) , market.ranking ( int ) ]\ntable phone_market , columns = [ phone_market.market_id ( int | primary key ) , phone_market.phone_id ( text | primary key ) , phone_market.num_of_stock ( int ) ]\nforeign keys :\nphone_market.phone_id = phone.phone_id\nphone_market.market_id = market.market_id\nmatched contents : None",
  "database schema :\ntable company , columns = [ company.company_id ( int | primary key ) , company.rank ( int ) , company.company ( text ) , company.headquarters ( text ) , company.main_industry ( text ) , company.sales_billion ( real ) , company.profits_billion ( real ) , company.assets_billion ( real ) , company.market_value ( real ) ]\ntable gas_station , columns = [ gas_station.station_id ( int | primary key ) , gas_station.open_year ( int ) , gas_station.location ( text ) , gas_station.manager_name ( text ) , gas_station.vice_manager_name ( text ) , gas_station.representative_name ( text ) ]\ntable station_company , columns = [ station_company.station_id ( int | primary key ) , station_company.company_id ( int | primary key ) , station_company.rank_of_the_year ( int ) ]\nforeign keys :\nstation_company.company_id = company.company_id\nstation_company.station_id = gas_station.station_id\nmatched contents : None",
  "database schema :\ntable region , columns = [ region.region_id ( int | primary key ) , region.region_name ( text ) , region.date ( text ) , region.label ( text ) , region.format ( text ) , region.catalogue ( text ) ]\ntable party , columns = [ party.party_id ( int | primary key ) , party.minister ( text ) , party.took_office ( text ) , party.left_office ( text ) , party.region_id ( int ) , party.party_name ( text ) ]\ntable member , columns = [ member.member_id ( int | primary key ) , member.member_name ( text ) , member.party_id ( text ) , member.in_office ( text ) ]\ntable party_events , columns = [ party_events.event_id ( int | primary key ) , party_events.event_name ( text ) , party_events.party_id ( int ) , party_events.member_in_charge_id ( int ) ]\nforeign keys :\nparty.region_id = region.region_id\nmember.party_id = party.party_id\nparty_events.member_in_charge_id = member.member_id\nparty_events.party_id = party.party_id\nmatched contents : None",
  "database schema :\ntable aircraft , columns = [ aircraft.aircraft_id ( int | primary key ) , aircraft.order_year ( int ) , aircraft.manufacturer ( text ) , aircraft.model ( text ) , aircraft.fleet_series ( text ) , aircraft.powertrain ( text ) , aircraft.fuel_propulsion ( text ) ]\ntable pilot , columns = [ pilot.pilot_id ( int | primary key ) , pilot.pilot_name ( text ) , pilot.rank ( int ) , pilot.age ( int ) , pilot.nationality ( text ) , pilot.position ( text ) , pilot.join_year ( int ) , pilot.team ( text ) ]\ntable pilot_record , columns = [ pilot_record.record_id ( int ) , pilot_record.pilot_id ( int | primary key ) , pilot_record.aircraft_id ( int | primary key ) , pilot_record.date ( text | primary key ) ]\nforeign keys :\npilot_record.aircraft_id = aircraft.aircraft_id\npilot_record.pilot_id = pilot.pilot_id\nmatched contents : None",
  "database schema :\ntable ref_document_types , columns = [ ref_document_types.document_type_code ( char(15) | primary key ) , ref_document_types.document_type_description ( varchar(255) ) ]\ntable roles , columns = [ roles.role_code ( char(15) | primary key ) , roles.role_description ( varchar(255) ) ]\ntable addresses , columns = [ addresses.address_id ( integer | primary key ) , addresses.address_details ( varchar(255) ) ]\ntable ref_document_status , columns = [ ref_document_status.document_status_code ( char(15) | primary key ) , ref_document_status.document_status_description ( varchar(255) ) ]\ntable ref_shipping_agents , columns = [ ref_shipping_agents.shipping_agent_code ( char(15) | primary key ) , ref_shipping_agents.shipping_agent_name ( varchar(255) ) , ref_shipping_agents.shipping_agent_description ( varchar(255) ) ]\ntable documents , columns = [ documents.document_id ( integer | primary key ) , documents.document_status_code ( char(15) ) , documents.document_type_code ( char(15) ) , documents.shipping_agent_code ( char(15) ) , documents.receipt_date ( datetime ) , documents.receipt_number ( varchar(255) ) , documents.other_details ( varchar(255) ) ]\ntable employees , columns = [ employees.employee_id ( integer | primary key ) , employees.role_code ( char(15) ) , employees.employee_name ( varchar(255) ) , employees.other_details ( varchar(255) ) ]\ntable document_drafts , columns = [ document_drafts.document_id ( integer | primary key ) , document_drafts.draft_number ( integer | primary key ) , document_drafts.draft_details ( varchar(255) ) ]\ntable draft_copies , columns = [ draft_copies.document_id ( integer | primary key ) , draft_copies.draft_number ( integer | primary key ) , draft_copies.copy_number ( integer | primary key ) ]\ntable circulation_history , columns = [ circulation_history.document_id ( integer | primary key ) , circulation_history.draft_number ( integer | primary key ) , circulation_history.copy_number ( integer | primary key ) , circulation_history.employee_id ( integer | primary key ) ]\ntable documents_mailed , columns = [ documents_mailed.document_id ( integer | primary key ) , documents_mailed.mailed_to_address_id ( integer | primary key ) , documents_mailed.mailing_date ( datetime ) ]\nforeign keys :\ndocuments.shipping_agent_code = ref_shipping_agents.shipping_agent_code\ndocuments.document_status_code = ref_document_status.document_status_code\ndocuments.document_type_code = ref_document_types.document_type_code\nemployees.role_code = roles.role_code\ndocument_drafts.document_id = documents.document_id\ndraft_copies.document_id = document_drafts.document_id\ndraft_copies.draft_number = document_drafts.draft_number\ncirculation_history.employee_id = employees.employee_id\ncirculation_history.document_id = draft_copies.document_id\ncirculation_history.draft_number = draft_copies.draft_number\ncirculation_history.copy_number = draft_copies.copy_number\ndocuments_mailed.mailed_to_address_id = addresses.address_id\ndocuments_mailed.document_id = documents.document_id\nmatched contents : None",
  "database schema :\ntable works_on , columns = [ works_on.essn ( integer | primary key | comment : employee ssn ) , works_on.pno ( integer | primary key | comment : project number ) , works_on.hours ( real ) ]\ntable employee , columns = [ employee.fname ( text | comment : first name ) , employee.minit ( text ) , employee.lname ( text | comment : last name ) , employee.ssn ( integer | primary key ) , employee.bdate ( text | comment : birth date ) , employee.address ( text ) , employee.sex ( text ) , employee.salary ( integer ) , employee.super_ssn ( integer ) , employee.dno ( integer | comment : department no ) ]\ntable department , columns = [ department.dname ( text | comment : department name ) , department.dnumber ( integer | primary key | comment : department number ) , department.mgr_ssn ( integer | comment : manager ssn ) , department.mgr_start_date ( text | comment : manager start date ) ]\ntable project , columns = [ project.pname ( text | comment : dependent name ) , project.pnumber ( integer | primary key | comment : dependent number ) , project.plocation ( text | comment : dependent location ) , project.dnum ( integer | comment : department number ) ]\ntable dependent , columns = [ dependent.essn ( integer | primary key | comment : employee ssn ) , dependent.dependent_name ( text | primary key ) , dependent.sex ( text ) , dependent.bdate ( text | comment : birth date ) , dependent.relationship ( text ) ]\ntable dept_locations , columns = [ dept_locations.dnumber ( integer | primary key | comment : department number ) , dept_locations.dlocation ( text | primary key | comment : department location ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable services , columns = [ services.service_id ( integer | primary key ) , services.service_type_code ( char(15) ) ]\ntable participants , columns = [ participants.participant_id ( integer | primary key ) , participants.participant_type_code ( char(15) ) , participants.participant_details ( varchar(255) ) ]\ntable events , columns = [ events.event_id ( integer | primary key ) , events.service_id ( integer ) , events.event_details ( varchar(255) ) ]\ntable participants_in_events , columns = [ participants_in_events.event_id ( integer | primary key ) , participants_in_events.participant_id ( integer | primary key ) ]\nforeign keys :\nevents.service_id = services.service_id\nparticipants_in_events.event_id = events.event_id\nparticipants_in_events.participant_id = participants.participant_id\nmatched contents :\nservices.service_type_code ( Marriage )",
  "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key ) , circuits.circuitref ( text | comment : circuit reference ) , circuits.name ( text ) , circuits.location ( text ) , circuits.country ( text ) , circuits.lat ( real | comment : latitude ) , circuits.lng ( real | comment : longitude ) , circuits.alt ( text | comment : altitude ) , circuits.url ( text ) ]\ntable races , columns = [ races.raceid ( integer | primary key ) , races.year ( integer ) , races.round ( integer ) , races.circuitid ( integer ) , races.name ( text ) , races.date ( text ) , races.time ( text ) , races.url ( text ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key ) , drivers.driverref ( text | comment : driver reference ) , drivers.number ( text ) , drivers.code ( text ) , drivers.forename ( text ) , drivers.surname ( text ) , drivers.dob ( text ) , drivers.nationality ( text ) , drivers.url ( text ) ]\ntable status , columns = [ status.statusid ( integer | primary key ) , status.status ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key ) , seasons.url ( text ) ]\ntable constructors , columns = [ constructors.constructorid ( integer | primary key ) , constructors.constructorref ( text | comment : constructor reference ) , constructors.name ( text ) , constructors.nationality ( text ) , constructors.url ( text ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorstandingsid ( integer | primary key ) , constructorstandings.raceid ( integer ) , constructorstandings.constructorid ( integer ) , constructorstandings.points ( real ) , constructorstandings.position ( integer ) , constructorstandings.positiontext ( text ) , constructorstandings.wins ( integer ) ]\ntable results , columns = [ results.resultid ( integer | primary key ) , results.raceid ( integer ) , results.driverid ( integer ) , results.constructorid ( integer ) , results.number ( integer ) , results.grid ( integer ) , results.position ( text ) , results.positiontext ( text ) , results.positionorder ( integer ) , results.points ( real ) , results.laps ( text ) , results.time ( text ) , results.milliseconds ( text ) , results.fastestlap ( text ) , results.rank ( text ) , results.fastestlaptime ( text ) , results.fastestlapspeed ( text ) , results.statusid ( integer ) ]\ntable driverstandings , columns = [ driverstandings.driverstandingsid ( integer | primary key ) , driverstandings.raceid ( integer ) , driverstandings.driverid ( integer ) , driverstandings.points ( real ) , driverstandings.position ( integer ) , driverstandings.positiontext ( text ) , driverstandings.wins ( integer ) ]\ntable constructorresults , columns = [ constructorresults.constructorresultsid ( integer | primary key ) , constructorresults.raceid ( integer ) , constructorresults.constructorid ( integer ) , constructorresults.points ( real ) , constructorresults.status ( text ) ]\ntable qualifying , columns = [ qualifying.qualifyid ( integer | primary key ) , qualifying.raceid ( integer ) , qualifying.driverid ( integer ) , qualifying.constructorid ( integer ) , qualifying.number ( integer ) , qualifying.position ( integer ) , qualifying.q1 ( text ) , qualifying.q2 ( text ) , qualifying.q3 ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key ) , pitstops.driverid ( integer | primary key ) , pitstops.stop ( integer | primary key ) , pitstops.lap ( integer ) , pitstops.time ( text ) , pitstops.duration ( text ) , pitstops.milliseconds ( integer ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key ) , laptimes.driverid ( integer | primary key ) , laptimes.lap ( integer | primary key ) , laptimes.position ( integer ) , laptimes.time ( text ) , laptimes.milliseconds ( integer ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorstandings.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nresults.constructorid = constructors.constructorid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nconstructorresults.raceid = races.raceid\nconstructorresults.constructorid = constructors.constructorid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nqualifying.constructorid = constructors.constructorid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nmatched contents : None",
  "database schema :\ntable repair , columns = [ repair.repair_id ( int | primary key ) , repair.name ( text ) , repair.launch_date ( text ) , repair.notes ( text ) ]\ntable machine , columns = [ machine.machine_id ( int | primary key ) , machine.making_year ( int ) , machine.class ( text ) , machine.team ( text ) , machine.machine_series ( text ) , machine.value_points ( real ) , machine.quality_rank ( int ) ]\ntable technician , columns = [ technician.technician_id ( real | primary key ) , technician.name ( text ) , technician.team ( text ) , technician.starting_year ( real ) , technician.age ( int ) ]\ntable repair_assignment , columns = [ repair_assignment.technician_id ( int | primary key ) , repair_assignment.repair_id ( int | primary key ) , repair_assignment.machine_id ( int | primary key ) ]\nforeign keys :\nrepair_assignment.machine_id = machine.machine_id\nrepair_assignment.repair_id = repair.repair_id\nrepair_assignment.technician_id = technician.technician_id\nmatched contents : None",
  "database schema :\ntable entrepreneur , columns = [ entrepreneur.entrepreneur_id ( int | primary key ) , entrepreneur.people_id ( int ) , entrepreneur.company ( text ) , entrepreneur.money_requested ( real ) , entrepreneur.investor ( text ) ]\ntable people , columns = [ people.people_id ( int | primary key ) , people.name ( text ) , people.height ( real ) , people.weight ( real ) , people.date_of_birth ( text ) ]\nforeign keys :\nentrepreneur.people_id = people.people_id\nmatched contents : None",
  "database schema :\ntable perpetrator , columns = [ perpetrator.perpetrator_id ( int | primary key ) , perpetrator.people_id ( int ) , perpetrator.date ( text ) , perpetrator.year ( real ) , perpetrator.location ( text ) , perpetrator.country ( text ) , perpetrator.killed ( int ) , perpetrator.injured ( int ) ]\ntable people , columns = [ people.people_id ( int | primary key ) , people.name ( text ) , people.height ( real ) , people.weight ( real ) , people.`home town` ( text ) ]\nforeign keys :\nperpetrator.people_id = people.people_id\nmatched contents : None",
  "database schema :\ntable campuses , columns = [ campuses.id ( integer | primary key ) , campuses.campus ( text ) , campuses.location ( text ) , campuses.county ( text ) , campuses.year ( integer ) ]\ntable csu_fees , columns = [ csu_fees.campus ( integer | primary key ) , csu_fees.year ( integer ) , csu_fees.campusfee ( integer ) ]\ntable degrees , columns = [ degrees.year ( integer | primary key ) , degrees.campus ( integer | primary key ) , degrees.degrees ( integer ) ]\ntable discipline_enrollments , columns = [ discipline_enrollments.campus ( integer | primary key ) , discipline_enrollments.discipline ( integer | primary key ) , discipline_enrollments.year ( integer ) , discipline_enrollments.undergraduate ( integer ) , discipline_enrollments.graduate ( integer ) ]\ntable enrollments , columns = [ enrollments.campus ( integer | primary key ) , enrollments.year ( integer | primary key ) , enrollments.totalenrollment_ay ( integer ) , enrollments.fte_ay ( integer ) ]\ntable faculty , columns = [ faculty.campus ( integer ) , faculty.year ( integer ) , faculty.faculty ( real ) ]\nforeign keys :\ncsu_fees.campus = campuses.id\ndegrees.campus = campuses.id\ndiscipline_enrollments.campus = campuses.id\nenrollments.campus = campuses.id\nfaculty.campus = campuses.id\nmatched contents :\ncampuses.location ( Los Angeles )\ncampuses.county ( Los Angeles )",
  "database schema :\ntable candidate , columns = [ candidate.candidate_id ( int | primary key ) , candidate.people_id ( int ) , candidate.poll_source ( text ) , candidate.date ( text ) , candidate.support_rate ( real ) , candidate.consider_rate ( real ) , candidate.oppose_rate ( real ) , candidate.unsure_rate ( real ) ]\ntable people , columns = [ people.people_id ( int | primary key ) , people.sex ( text ) , people.name ( text ) , people.date_of_birth ( text ) , people.height ( real ) , people.weight ( real ) ]\nforeign keys :\ncandidate.people_id = people.people_id\nmatched contents : None",
  "database schema :\ntable movie , columns = [ movie.mid ( int | primary key | comment : movie id ) , movie.title ( text ) , movie.year ( int ) , movie.director ( text ) ]\ntable reviewer , columns = [ reviewer.rid ( int | primary key | comment : reviewer id ) , reviewer.name ( text ) ]\ntable rating , columns = [ rating.rid ( int | comment : reviewer id ) , rating.mid ( int | comment : movie id ) , rating.stars ( int | comment : rating stars ) , rating.ratingdate ( date ) ]\nforeign keys :\nrating.rid = reviewer.rid\nrating.mid = movie.mid\nmatched contents :\nmovie.director ( Steven Spielberg )",
  "database schema :\ntable county_public_safety , columns = [ county_public_safety.county_id ( int | primary key ) , county_public_safety.name ( text ) , county_public_safety.population ( int ) , county_public_safety.police_officers ( int ) , county_public_safety.residents_per_officer ( int ) , county_public_safety.case_burden ( int ) , county_public_safety.crime_rate ( real ) , county_public_safety.police_force ( text ) , county_public_safety.location ( text ) ]\ntable city , columns = [ city.city_id ( int | primary key ) , city.county_id ( int ) , city.name ( text ) , city.white ( real ) , city.black ( real ) , city.amerindian ( real ) , city.asian ( real ) , city.multiracial ( real ) , city.hispanic ( real ) ]\nforeign keys :\ncity.county_id = county_public_safety.county_id\nmatched contents : None",
  "database schema :\ntable rooms , columns = [ rooms.roomid ( text | primary key ) , rooms.roomname ( text ) , rooms.beds ( integer ) , rooms.bedtype ( text ) , rooms.maxoccupancy ( integer ) , rooms.baseprice ( integer ) , rooms.decor ( text ) ]\ntable reservations , columns = [ reservations.code ( integer | primary key ) , reservations.room ( text ) , reservations.checkin ( text ) , reservations.checkout ( text ) , reservations.rate ( real ) , reservations.lastname ( text ) , reservations.firstname ( text ) , reservations.adults ( integer ) , reservations.kids ( integer ) ]\nforeign keys :\nreservations.room = rooms.roomid\nmatched contents :\nrooms.decor ( modern )",
  "database schema :\ntable party , columns = [ party.party_id ( int | primary key ) , party.party_theme ( text ) , party.location ( text ) , party.first_year ( text ) , party.last_year ( text ) , party.number_of_hosts ( int ) ]\ntable host , columns = [ host.host_id ( int | primary key ) , host.name ( text ) , host.nationality ( text ) , host.age ( text ) ]\ntable party_host , columns = [ party_host.party_id ( int | primary key ) , party_host.host_id ( int | primary key ) , party_host.is_main_in_charge ( bool ) ]\nforeign keys :\nparty_host.party_id = party.party_id\nparty_host.host_id = host.host_id\nmatched contents : None",
  "database schema :\ntable storm , columns = [ storm.storm_id ( int | primary key ) , storm.name ( text ) , storm.dates_active ( text ) , storm.max_speed ( int ) , storm.damage_millions_usd ( real ) , storm.number_deaths ( int ) ]\ntable region , columns = [ region.region_id ( int | primary key ) , region.region_code ( text ) , region.region_name ( text ) ]\ntable affected_region , columns = [ affected_region.region_id ( int | primary key ) , affected_region.storm_id ( int | primary key ) , affected_region.number_city_affected ( real ) ]\nforeign keys :\naffected_region.storm_id = storm.storm_id\naffected_region.region_id = region.region_id\nmatched contents : None",
  "database schema :\ntable event , columns = [ event.event_id ( int | primary key ) , event.date ( text ) , event.venue ( text ) , event.name ( text ) , event.event_attendance ( int ) ]\ntable journalist , columns = [ journalist.journalist_id ( int | primary key ) , journalist.name ( text ) , journalist.nationality ( text ) , journalist.age ( text ) , journalist.years_working ( int ) ]\ntable news_report , columns = [ news_report.journalist_id ( int | primary key ) , news_report.event_id ( int | primary key ) , news_report.work_type ( text ) ]\nforeign keys :\nnews_report.event_id = event.event_id\nnews_report.journalist_id = journalist.journalist_id\nmatched contents : None",
  "database schema :\ntable student , columns = [ student.stuid ( integer | primary key | comment : student id ) , student.lname ( varchar(12) | comment : last name ) , student.fname ( varchar(12) | comment : first name ) , student.age ( integer ) , student.sex ( varchar(1) ) , student.major ( integer ) , student.advisor ( integer ) , student.city_code ( varchar(3) ) ]\ntable restaurant , columns = [ restaurant.resid ( integer | primary key | comment : restaurant id ) , restaurant.resname ( varchar(100) | comment : restaurant name ) , restaurant.address ( varchar(100) ) , restaurant.rating ( integer ) ]\ntable type_of_restaurant , columns = [ type_of_restaurant.resid ( integer | comment : restaurant id ) , type_of_restaurant.restypeid ( integer | comment : restaurant type id ) ]\ntable restaurant_type , columns = [ restaurant_type.restypeid ( integer | primary key | comment : restaurant type id ) , restaurant_type.restypename ( varchar(40) | comment : restaurant type name ) , restaurant_type.restypedescription ( varchar(100) | comment : restaurant type description ) ]\ntable visits_restaurant , columns = [ visits_restaurant.stuid ( integer | comment : student id ) , visits_restaurant.resid ( integer | comment : restaurant id ) , visits_restaurant.time ( timestamp ) , visits_restaurant.spent ( float ) ]\nforeign keys :\ntype_of_restaurant.restypeid = restaurant_type.restypeid\ntype_of_restaurant.resid = restaurant.resid\nvisits_restaurant.resid = restaurant.resid\nvisits_restaurant.stuid = student.stuid\nmatched contents : None",
  "database schema :\ntable products , columns = [ products.product_id ( integer | primary key ) , products.product_name ( varchar(20) ) , products.product_price ( decimal(19,4) ) , products.product_description ( varchar(255) ) ]\ntable addresses , columns = [ addresses.address_id ( integer | primary key ) , addresses.address_details ( varchar(80) ) , addresses.city ( varchar(50) ) , addresses.zip_postcode ( varchar(20) ) , addresses.state_province_county ( varchar(50) ) , addresses.country ( varchar(50) ) ]\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.payment_method ( varchar(10) ) , customers.customer_name ( varchar(80) ) , customers.customer_phone ( varchar(80) ) , customers.customer_email ( varchar(80) ) , customers.date_became_customer ( datetime ) ]\ntable regular_orders , columns = [ regular_orders.regular_order_id ( integer | primary key ) , regular_orders.distributer_id ( integer ) ]\ntable regular_order_products , columns = [ regular_order_products.regular_order_id ( integer ) , regular_order_products.product_id ( integer ) ]\ntable actual_orders , columns = [ actual_orders.actual_order_id ( integer | primary key ) , actual_orders.order_status_code ( varchar(10) ) , actual_orders.regular_order_id ( integer ) , actual_orders.actual_order_date ( datetime ) ]\ntable actual_order_products , columns = [ actual_order_products.actual_order_id ( integer ) , actual_order_products.product_id ( integer ) ]\ntable customer_addresses , columns = [ customer_addresses.customer_id ( integer ) , customer_addresses.address_id ( integer ) , customer_addresses.date_from ( datetime ) , customer_addresses.address_type ( varchar(10) ) , customer_addresses.date_to ( datetime ) ]\ntable delivery_routes , columns = [ delivery_routes.route_id ( integer | primary key ) , delivery_routes.route_name ( varchar(50) ) , delivery_routes.other_route_details ( varchar(255) ) ]\ntable delivery_route_locations , columns = [ delivery_route_locations.location_code ( varchar(10) | primary key ) , delivery_route_locations.route_id ( integer ) , delivery_route_locations.location_address_id ( integer ) , delivery_route_locations.location_name ( varchar(50) ) ]\ntable trucks , columns = [ trucks.truck_id ( integer | primary key ) , trucks.truck_licence_number ( varchar(20) ) , trucks.truck_details ( varchar(255) ) ]\ntable employees , columns = [ employees.employee_id ( integer | primary key ) , employees.employee_address_id ( integer ) , employees.employee_name ( varchar(80) ) , employees.employee_phone ( varchar(80) ) ]\ntable order_deliveries , columns = [ order_deliveries.location_code ( varchar(10) ) , order_deliveries.actual_order_id ( integer ) , order_deliveries.delivery_status_code ( varchar(10) ) , order_deliveries.driver_employee_id ( integer ) , order_deliveries.truck_id ( integer ) , order_deliveries.delivery_date ( datetime ) ]\nforeign keys :\nregular_orders.distributer_id = customers.customer_id\nregular_order_products.regular_order_id = regular_orders.regular_order_id\nregular_order_products.product_id = products.product_id\nactual_orders.regular_order_id = regular_orders.regular_order_id\nactual_order_products.actual_order_id = actual_orders.actual_order_id\nactual_order_products.product_id = products.product_id\ncustomer_addresses.address_id = addresses.address_id\ncustomer_addresses.customer_id = customers.customer_id\ndelivery_route_locations.route_id = delivery_routes.route_id\ndelivery_route_locations.location_address_id = addresses.address_id\nemployees.employee_address_id = addresses.address_id\norder_deliveries.driver_employee_id = employees.employee_id\norder_deliveries.location_code = delivery_route_locations.location_code\norder_deliveries.actual_order_id = actual_orders.actual_order_id\norder_deliveries.truck_id = trucks.truck_id\nmatched contents :\nactual_orders.order_status_code ( Success )",
  "database schema :\ntable inst , columns = [ inst.instid ( integer | primary key | comment : institution id ) , inst.name ( text ) , inst.country ( text ) ]\ntable authors , columns = [ authors.authid ( integer | primary key | comment : author id ) , authors.lname ( text | comment : last name ) , authors.fname ( text | comment : first name ) ]\ntable papers , columns = [ papers.paperid ( integer | primary key ) , papers.title ( text ) ]\ntable authorship , columns = [ authorship.authid ( integer | primary key | comment : author id ) , authorship.instid ( integer | primary key | comment : institution id ) , authorship.paperid ( integer | primary key ) , authorship.authorder ( integer | comment : author count ) ]\nforeign keys :\nauthorship.paperid = papers.paperid\nauthorship.instid = inst.instid\nauthorship.authid = authors.authid\nmatched contents : None",
  "database schema :\ntable actor , columns = [ actor.actor_id ( smallint unsigned | primary key ) , actor.first_name ( varchar(45) ) , actor.last_name ( varchar(45) ) , actor.last_update ( timestamp ) ]\ntable address , columns = [ address.address_id ( smallint unsigned | primary key ) , address.address ( varchar(50) ) , address.address2 ( varchar(50) ) , address.district ( varchar(20) ) , address.city_id ( smallint unsigned ) , address.postal_code ( varchar(10) ) , address.phone ( varchar(20) ) , address.last_update ( timestamp ) ]\ntable category , columns = [ category.category_id ( tinyint unsigned | primary key ) , category.name ( varchar(25) ) , category.last_update ( timestamp ) ]\ntable city , columns = [ city.city_id ( smallint unsigned | primary key ) , city.city ( varchar(50) ) , city.country_id ( smallint unsigned ) , city.last_update ( timestamp ) ]\ntable country , columns = [ country.country_id ( smallint unsigned | primary key ) , country.country ( varchar(50) ) , country.last_update ( timestamp ) ]\ntable customer , columns = [ customer.customer_id ( smallint unsigned | primary key ) , customer.store_id ( tinyint unsigned ) , customer.first_name ( varchar(45) ) , customer.last_name ( varchar(45) ) , customer.email ( varchar(50) ) , customer.address_id ( smallint unsigned ) , customer.active ( boolean ) , customer.create_date ( datetime ) , customer.last_update ( timestamp ) ]\ntable film , columns = [ film.film_id ( smallint unsigned | primary key ) , film.title ( varchar(255) ) , film.description ( text ) , film.release_year ( year ) , film.language_id ( tinyint unsigned ) , film.original_language_id ( tinyint unsigned ) , film.rental_duration ( tinyint unsigned ) , film.rental_rate ( decimal(4,2) ) , film.length ( smallint unsigned ) , film.replacement_cost ( decimal(5,2) ) , film.rating (  ) , film.special_features (  ) , film.last_update ( timestamp ) ]\ntable film_actor , columns = [ film_actor.actor_id ( smallint unsigned | primary key ) , film_actor.film_id ( smallint unsigned | primary key ) , film_actor.last_update ( timestamp ) ]\ntable film_category , columns = [ film_category.film_id ( smallint unsigned | primary key ) , film_category.category_id ( tinyint unsigned | primary key ) , film_category.last_update ( timestamp ) ]\ntable film_text , columns = [ film_text.film_id ( smallint | primary key ) , film_text.title ( varchar(255) ) , film_text.description ( text ) ]\ntable inventory , columns = [ inventory.inventory_id ( mediumint unsigned | primary key ) , inventory.film_id ( smallint unsigned ) , inventory.store_id ( tinyint unsigned ) , inventory.last_update ( timestamp ) ]\ntable language , columns = [ language.language_id ( tinyint unsigned | primary key ) , language.name ( char(20) ) , language.last_update ( timestamp ) ]\ntable payment , columns = [ payment.payment_id ( smallint unsigned | primary key ) , payment.customer_id ( smallint unsigned ) , payment.staff_id ( tinyint unsigned ) , payment.rental_id ( int ) , payment.amount ( decimal(5,2) ) , payment.payment_date ( datetime ) , payment.last_update ( timestamp ) ]\ntable rental , columns = [ rental.rental_id ( int | primary key ) , rental.rental_date ( datetime ) , rental.inventory_id ( mediumint unsigned ) , rental.customer_id ( smallint unsigned ) , rental.return_date ( datetime ) , rental.staff_id ( tinyint unsigned ) , rental.last_update ( timestamp ) ]\ntable staff , columns = [ staff.staff_id ( tinyint unsigned | primary key ) , staff.first_name ( varchar(45) ) , staff.last_name ( varchar(45) ) , staff.address_id ( smallint unsigned ) , staff.picture ( blob ) , staff.email ( varchar(50) ) , staff.store_id ( tinyint unsigned ) , staff.active ( boolean ) , staff.username ( varchar(16) ) , staff.password ( varchar(40) ) , staff.last_update ( timestamp ) ]\ntable store , columns = [ store.store_id ( tinyint unsigned | primary key ) , store.manager_staff_id ( tinyint unsigned ) , store.address_id ( smallint unsigned ) , store.last_update ( timestamp ) ]\nforeign keys :\naddress.city_id = city.city_id\ncity.country_id = country.country_id\ncustomer.store_id = store.store_id\ncustomer.address_id = address.address_id\nfilm.original_language_id = language.language_id\nfilm.language_id = language.language_id\nfilm_actor.film_id = film.film_id\nfilm_actor.actor_id = actor.actor_id\nfilm_category.category_id = category.category_id\nfilm_category.film_id = film.film_id\ninventory.film_id = film.film_id\ninventory.store_id = store.store_id\npayment.staff_id = staff.staff_id\npayment.customer_id = customer.customer_id\npayment.rental_id = rental.rental_id\nrental.customer_id = customer.customer_id\nrental.inventory_id = inventory.inventory_id\nrental.staff_id = staff.staff_id\nstaff.address_id = address.address_id\nstore.address_id = address.address_id\nstore.manager_staff_id = staff.staff_id\nmatched contents : None",
  "database schema :\ntable bank , columns = [ bank.branch_id ( int | primary key ) , bank.bname ( varchar(20) ) , bank.no_of_customers ( int ) , bank.city ( varchar(10) ) , bank.state ( varchar(20) ) ]\ntable customer , columns = [ customer.cust_id ( varchar(3) | primary key | comment : customer id ) , customer.cust_name ( varchar(20) | comment : customer name ) , customer.acc_type ( char(1) | comment : account type ) , customer.acc_bal ( int | comment : account balance ) , customer.no_of_loans ( int | comment : number of loans ) , customer.credit_score ( int ) , customer.branch_id ( int ) , customer.state ( varchar(20) ) ]\ntable loan , columns = [ loan.loan_id ( varchar(3) | primary key ) , loan.loan_type ( varchar(15) ) , loan.cust_id ( varchar(3) | comment : customer id ) , loan.branch_id ( varchar(3) ) , loan.amount ( int ) ]\nforeign keys :\ncustomer.branch_id = bank.branch_id\nloan.cust_id = customer.cust_id\nloan.branch_id = bank.branch_id\nmatched contents : None",
  "database schema :\ntable ref_address_types , columns = [ ref_address_types.address_type_code ( varchar(15) | primary key ) , ref_address_types.address_type_description ( varchar(80) ) ]\ntable ref_detention_type , columns = [ ref_detention_type.detention_type_code ( varchar(10) | primary key ) , ref_detention_type.detention_type_description ( varchar(80) ) ]\ntable ref_incident_type , columns = [ ref_incident_type.incident_type_code ( varchar(10) | primary key ) , ref_incident_type.incident_type_description ( varchar(80) ) ]\ntable addresses , columns = [ addresses.address_id ( integer | primary key ) , addresses.line_1 ( varchar(120) ) , addresses.line_2 ( varchar(120) ) , addresses.line_3 ( varchar(120) ) , addresses.city ( varchar(80) ) , addresses.zip_postcode ( varchar(20) ) , addresses.state_province_county ( varchar(50) ) , addresses.country ( varchar(50) ) , addresses.other_address_details ( varchar(255) ) ]\ntable students , columns = [ students.student_id ( integer | primary key ) , students.address_id ( integer ) , students.first_name ( varchar(80) ) , students.middle_name ( varchar(40) ) , students.last_name ( varchar(40) ) , students.cell_mobile_number ( varchar(40) ) , students.email_address ( varchar(40) ) , students.date_first_rental ( datetime ) , students.date_left_university ( datetime ) , students.other_student_details ( varchar(255) ) ]\ntable teachers , columns = [ teachers.teacher_id ( integer | primary key ) , teachers.address_id ( integer ) , teachers.first_name ( varchar(80) ) , teachers.middle_name ( varchar(80) ) , teachers.last_name ( varchar(80) ) , teachers.gender ( varchar(1) ) , teachers.cell_mobile_number ( varchar(40) ) , teachers.email_address ( varchar(40) ) , teachers.other_details ( varchar(255) ) ]\ntable assessment_notes , columns = [ assessment_notes.notes_id ( integer ) , assessment_notes.student_id ( integer ) , assessment_notes.teacher_id ( integer ) , assessment_notes.date_of_notes ( datetime ) , assessment_notes.text_of_notes ( varchar(255) ) , assessment_notes.other_details ( varchar(255) ) ]\ntable behavior_incident , columns = [ behavior_incident.incident_id ( integer | primary key ) , behavior_incident.incident_type_code ( varchar(10) ) , behavior_incident.student_id ( integer ) , behavior_incident.date_incident_start ( datetime ) , behavior_incident.date_incident_end ( datetime ) , behavior_incident.incident_summary ( varchar(255) ) , behavior_incident.recommendations ( varchar(255) ) , behavior_incident.other_details ( varchar(255) ) ]\ntable detention , columns = [ detention.detention_id ( integer | primary key ) , detention.detention_type_code ( varchar(10) ) , detention.teacher_id ( integer ) , detention.datetime_detention_start ( datetime ) , detention.datetime_detention_end ( datetime ) , detention.detention_summary ( varchar(255) ) , detention.other_details ( varchar(255) ) ]\ntable student_addresses , columns = [ student_addresses.student_id ( integer ) , student_addresses.address_id ( integer ) , student_addresses.date_address_from ( datetime ) , student_addresses.date_address_to ( datetime ) , student_addresses.monthly_rental ( decimal(19,4) ) , student_addresses.other_details ( varchar(255) ) ]\ntable students_in_detention , columns = [ students_in_detention.student_id ( integer ) , students_in_detention.detention_id ( integer ) , students_in_detention.incident_id ( integer ) ]\nforeign keys :\nstudents.address_id = addresses.address_id\nteachers.address_id = addresses.address_id\nassessment_notes.teacher_id = teachers.teacher_id\nassessment_notes.student_id = students.student_id\nbehavior_incident.student_id = students.student_id\nbehavior_incident.incident_type_code = ref_incident_type.incident_type_code\ndetention.teacher_id = teachers.teacher_id\ndetention.detention_type_code = ref_detention_type.detention_type_code\nstudent_addresses.student_id = students.student_id\nstudent_addresses.address_id = addresses.address_id\nstudents_in_detention.student_id = students.student_id\nstudents_in_detention.detention_id = detention.detention_id\nstudents_in_detention.incident_id = behavior_incident.incident_id\nmatched contents : None",
  "database schema :\ntable third_party_companies , columns = [ third_party_companies.company_id ( integer | primary key ) , third_party_companies.company_type ( varchar(5) ) , third_party_companies.company_name ( varchar(255) ) , third_party_companies.company_address ( varchar(255) ) , third_party_companies.other_company_details ( varchar(255) ) ]\ntable maintenance_contracts , columns = [ maintenance_contracts.maintenance_contract_id ( integer | primary key ) , maintenance_contracts.maintenance_contract_company_id ( integer ) , maintenance_contracts.contract_start_date ( datetime ) , maintenance_contracts.contract_end_date ( datetime ) , maintenance_contracts.other_contract_details ( varchar(255) ) ]\ntable parts , columns = [ parts.part_id ( integer | primary key ) , parts.part_name ( varchar(255) ) , parts.chargeable_yn ( varchar(1) ) , parts.chargeable_amount ( varchar(20) ) , parts.other_part_details ( varchar(255) ) ]\ntable skills , columns = [ skills.skill_id ( integer | primary key ) , skills.skill_code ( varchar(20) ) , skills.skill_description ( varchar(255) ) ]\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.staff_name ( varchar(255) ) , staff.gender ( varchar(1) ) , staff.other_staff_details ( varchar(255) ) ]\ntable assets , columns = [ assets.asset_id ( integer | primary key ) , assets.maintenance_contract_id ( integer ) , assets.supplier_company_id ( integer ) , assets.asset_details ( varchar(255) ) , assets.asset_make ( varchar(20) ) , assets.asset_model ( varchar(20) ) , assets.asset_acquired_date ( datetime ) , assets.asset_disposed_date ( datetime ) , assets.other_asset_details ( varchar(255) ) ]\ntable asset_parts , columns = [ asset_parts.asset_id ( integer ) , asset_parts.part_id ( integer ) ]\ntable maintenance_engineers , columns = [ maintenance_engineers.engineer_id ( integer | primary key ) , maintenance_engineers.company_id ( integer ) , maintenance_engineers.first_name ( varchar(50) ) , maintenance_engineers.last_name ( varchar(50) ) , maintenance_engineers.other_details ( varchar(255) ) ]\ntable engineer_skills , columns = [ engineer_skills.engineer_id ( integer ) , engineer_skills.skill_id ( integer ) ]\ntable fault_log , columns = [ fault_log.fault_log_entry_id ( integer | primary key ) , fault_log.asset_id ( integer ) , fault_log.recorded_by_staff_id ( integer ) , fault_log.fault_log_entry_datetime ( datetime ) , fault_log.fault_description ( varchar(255) ) , fault_log.other_fault_details ( varchar(255) ) ]\ntable engineer_visits , columns = [ engineer_visits.engineer_visit_id ( integer | primary key ) , engineer_visits.contact_staff_id ( integer ) , engineer_visits.engineer_id ( integer ) , engineer_visits.fault_log_entry_id ( integer ) , engineer_visits.fault_status ( varchar(10) ) , engineer_visits.visit_start_datetime ( datetime ) , engineer_visits.visit_end_datetime ( datetime ) , engineer_visits.other_visit_details ( varchar(255) ) ]\ntable part_faults , columns = [ part_faults.part_fault_id ( integer | primary key ) , part_faults.part_id ( integer ) , part_faults.fault_short_name ( varchar(20) ) , part_faults.fault_description ( varchar(255) ) , part_faults.other_fault_details ( varchar(255) ) ]\ntable fault_log_parts , columns = [ fault_log_parts.fault_log_entry_id ( integer ) , fault_log_parts.part_fault_id ( integer ) , fault_log_parts.fault_status ( varchar(10) ) ]\ntable skills_required_to_fix , columns = [ skills_required_to_fix.part_fault_id ( integer ) , skills_required_to_fix.skill_id ( integer ) ]\nforeign keys :\nmaintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id\nassets.supplier_company_id = third_party_companies.company_id\nassets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id\nasset_parts.asset_id = assets.asset_id\nasset_parts.part_id = parts.part_id\nmaintenance_engineers.company_id = third_party_companies.company_id\nengineer_skills.skill_id = skills.skill_id\nengineer_skills.engineer_id = maintenance_engineers.engineer_id\nfault_log.recorded_by_staff_id = staff.staff_id\nfault_log.asset_id = assets.asset_id\nengineer_visits.contact_staff_id = staff.staff_id\nengineer_visits.engineer_id = maintenance_engineers.engineer_id\nengineer_visits.fault_log_entry_id = fault_log.fault_log_entry_id\npart_faults.part_id = parts.part_id\nfault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id\nfault_log_parts.part_fault_id = part_faults.part_fault_id\nskills_required_to_fix.skill_id = skills.skill_id\nskills_required_to_fix.part_fault_id = part_faults.part_fault_id\nmatched contents :\nassets.asset_id ( 2 )\nassets.maintenance_contract_id ( 2 )\nassets.supplier_company_id ( 2 )\nasset_parts.asset_id ( 2 )\nasset_parts.part_id ( 2 )\nengineer_skills.engineer_id ( 2 )\nengineer_skills.skill_id ( 2 )\nengineer_visits.engineer_visit_id ( 2 )\nengineer_visits.contact_staff_id ( 2 )\nengineer_visits.fault_log_entry_id ( 2 )",
  "database schema :\ntable train , columns = [ train.id ( int | primary key ) , train.train_number ( int ) , train.name ( text ) , train.origin ( text ) , train.destination ( text ) , train.time ( text ) , train.interval ( text ) ]\ntable station , columns = [ station.id ( int | primary key ) , station.network_name ( text ) , station.services ( text ) , station.local_authority ( text ) ]\ntable route , columns = [ route.train_id ( int | primary key ) , route.station_id ( int | primary key ) ]\ntable weekly_weather , columns = [ weekly_weather.station_id ( int | primary key ) , weekly_weather.day_of_week ( text | primary key ) , weekly_weather.high_temperature ( int ) , weekly_weather.low_temperature ( int ) , weekly_weather.precipitation ( real ) , weekly_weather.wind_speed_mph ( int ) ]\nforeign keys :\nroute.station_id = station.id\nroute.train_id = train.id\nweekly_weather.station_id = station.id\nmatched contents : None",
  "database schema :\ntable class , columns = [ class.class_code ( varchar(5) | primary key ) , class.crs_code ( varchar(10) | comment : course code ) , class.class_section ( varchar(2) ) , class.class_time ( varchar(20) ) , class.class_room ( varchar(8) ) , class.prof_num ( int | comment : professor employee number ) ]\ntable course , columns = [ course.crs_code ( varchar(10) | primary key | comment : course code ) , course.dept_code ( varchar(10) | comment : department code ) , course.crs_description ( varchar(35) | comment : course description ) , course.crs_credit ( float(8) | comment : course credit ) ]\ntable department , columns = [ department.dept_code ( varchar(10) | primary key | comment : department code ) , department.dept_name ( varchar(30) | comment : department name ) , department.school_code ( varchar(8) ) , department.emp_num ( int | comment : employee number ) , department.dept_address ( varchar(20) | comment : department address ) , department.dept_extension ( varchar(4) | comment : department extension ) ]\ntable employee , columns = [ employee.emp_num ( int | primary key | comment : employee number ) , employee.emp_lname ( varchar(15) | comment : employee last name ) , employee.emp_fname ( varchar(12) | comment : employee first name ) , employee.emp_initial ( varchar(1) | comment : employee initial ) , employee.emp_jobcode ( varchar(5) | comment : employee job code ) , employee.emp_hiredate ( datetime | comment : employee hire date ) , employee.emp_dob ( datetime | comment : employee date of birth ) ]\ntable enroll , columns = [ enroll.class_code ( varchar(5) ) , enroll.stu_num ( int | comment : student number ) , enroll.enroll_grade ( varchar(50) ) ]\ntable professor , columns = [ professor.emp_num ( int | comment : employee number ) , professor.dept_code ( varchar(10) | comment : department code ) , professor.prof_office ( varchar(50) | comment : professor office ) , professor.prof_extension ( varchar(4) | comment : professor extension ) , professor.prof_high_degree ( varchar(5) | comment : professor high degree ) ]\ntable student , columns = [ student.stu_num ( int | primary key | comment : student num ) , student.stu_lname ( varchar(15) | comment : student last name ) , student.stu_fname ( varchar(15) | comment : student first name ) , student.stu_init ( varchar(1) | comment : student init ) , student.stu_dob ( datetime | comment : student date of birth ) , student.stu_hrs ( int | comment : student class hours took ) , student.stu_class ( varchar(2) | comment : student class ) , student.stu_gpa ( float(8) | comment : student gpa ) , student.stu_transfer ( numeric | comment : student transfer ) , student.dept_code ( varchar(18) | comment : department code ) , student.stu_phone ( varchar(4) | comment : student phone ) , student.prof_num ( int | comment : professor number ) ]\nforeign keys :\nclass.prof_num = employee.emp_num\nclass.crs_code = course.crs_code\ncourse.dept_code = department.dept_code\ndepartment.emp_num = employee.emp_num\nenroll.stu_num = student.stu_num\nenroll.class_code = class.class_code\nprofessor.dept_code = department.dept_code\nprofessor.emp_num = employee.emp_num\nstudent.dept_code = department.dept_code\nmatched contents :\ndepartment.dept_name ( Accounting )",
  "database schema :\ntable club , columns = [ club.club_id ( int | primary key ) , club.name ( text ) , club.region ( text ) , club.start_year ( text ) ]\ntable club_rank , columns = [ club_rank.rank ( real | primary key ) , club_rank.club_id ( int | primary key ) , club_rank.gold ( real ) , club_rank.silver ( real ) , club_rank.bronze ( real ) , club_rank.total ( real ) ]\ntable player , columns = [ player.player_id ( int | primary key ) , player.name ( text ) , player.position ( text ) , player.club_id ( int ) , player.apps ( real ) , player.tries ( real ) , player.goals ( text ) , player.points ( real ) ]\ntable competition , columns = [ competition.competition_id ( int | primary key ) , competition.year ( real ) , competition.competition_type ( text ) , competition.country ( text ) ]\ntable competition_result , columns = [ competition_result.competition_id ( int | primary key ) , competition_result.club_id_1 ( int | primary key ) , competition_result.club_id_2 ( int | primary key ) , competition_result.score ( text ) ]\nforeign keys :\nclub_rank.club_id = club.club_id\nplayer.club_id = club.club_id\ncompetition_result.competition_id = competition.competition_id\ncompetition_result.club_id_2 = club.club_id\ncompetition_result.club_id_1 = club.club_id\nmatched contents : None",
  "database schema :\ntable manufacturer , columns = [ manufacturer.manufacturer_id ( int | primary key ) , manufacturer.open_year ( real ) , manufacturer.name ( text ) , manufacturer.num_of_factories ( int ) , manufacturer.num_of_shops ( int ) ]\ntable furniture , columns = [ furniture.furniture_id ( int | primary key ) , furniture.name ( text ) , furniture.num_of_component ( int ) , furniture.market_rate ( real ) ]\ntable furniture_manufacte , columns = [ furniture_manufacte.manufacturer_id ( int | primary key ) , furniture_manufacte.furniture_id ( int | primary key ) , furniture_manufacte.price_in_dollar ( real ) ]\nforeign keys :\nfurniture_manufacte.furniture_id = furniture.furniture_id\nfurniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\nmatched contents : None",
  "database schema :\ntable genre , columns = [ genre.g_name ( varchar2(20) | primary key | comment : genre name ) , genre.rating ( varchar2(10) ) , genre.most_popular_in ( varchar2(50) ) ]\ntable artist , columns = [ artist.artist_name ( varchar2(50) | primary key ) , artist.country ( varchar2(20) ) , artist.gender ( varchar2(20) ) , artist.preferred_genre ( varchar2(50) ) ]\ntable files , columns = [ files.f_id ( number(10) | primary key | comment : song id ) , files.artist_name ( varchar2(50) ) , files.file_size ( varchar2(20) ) , files.duration ( varchar2(20) ) , files.formats ( varchar2(20) ) ]\ntable song , columns = [ song.song_name ( varchar2(50) | primary key ) , song.artist_name ( varchar2(50) ) , song.country ( varchar2(20) ) , song.f_id ( number(10) | comment : song id ) , song.genre_is ( varchar2(20) ) , song.rating ( number(10) ) , song.languages ( varchar2(20) ) , song.releasedate ( date ) , song.resolution ( number(10) ) ]\nforeign keys :\nartist.preferred_genre = genre.g_name\nfiles.artist_name = artist.artist_name\nsong.genre_is = genre.g_name\nsong.f_id = files.f_id\nsong.artist_name = artist.artist_name\nmatched contents : None",
  "database schema :\ntable all_star , columns = [ all_star.player_id ( text ) , all_star.year ( integer ) , all_star.game_num ( integer ) , all_star.game_id ( text ) , all_star.team_id ( text ) , all_star.league_id ( text ) , all_star.gp ( numeric ) , all_star.starting_pos ( numeric ) ]\ntable appearances , columns = [ appearances.year ( integer ) , appearances.team_id ( text ) , appearances.league_id ( text ) , appearances.player_id ( text ) , appearances.g_all ( numeric ) , appearances.gs ( numeric ) , appearances.g_batting ( integer ) , appearances.g_defense ( numeric ) , appearances.g_p ( integer ) , appearances.g_c ( integer ) , appearances.g_1b ( integer ) , appearances.g_2b ( integer ) , appearances.g_3b ( integer ) , appearances.g_ss ( integer ) , appearances.g_lf ( integer ) , appearances.g_cf ( integer ) , appearances.g_rf ( integer ) , appearances.g_of ( integer ) , appearances.g_dh ( numeric ) , appearances.g_ph ( numeric ) , appearances.g_pr ( numeric ) ]\ntable manager_award , columns = [ manager_award.player_id ( text ) , manager_award.award_id ( text ) , manager_award.year ( integer ) , manager_award.league_id ( text ) , manager_award.tie ( text ) , manager_award.notes ( numeric ) ]\ntable player_award , columns = [ player_award.player_id ( text ) , player_award.award_id ( text ) , player_award.year ( integer ) , player_award.league_id ( text ) , player_award.tie ( text ) , player_award.notes ( text ) ]\ntable manager_award_vote , columns = [ manager_award_vote.award_id ( text ) , manager_award_vote.year ( integer ) , manager_award_vote.league_id ( text ) , manager_award_vote.player_id ( text ) , manager_award_vote.points_won ( integer ) , manager_award_vote.points_max ( integer ) , manager_award_vote.votes_first ( integer ) ]\ntable player_award_vote , columns = [ player_award_vote.award_id ( text ) , player_award_vote.year ( integer ) , player_award_vote.league_id ( text ) , player_award_vote.player_id ( text ) , player_award_vote.points_won ( numeric ) , player_award_vote.points_max ( integer ) , player_award_vote.votes_first ( numeric ) ]\ntable batting , columns = [ batting.player_id ( text ) , batting.year ( integer ) , batting.stint ( integer ) , batting.team_id ( text ) , batting.league_id ( text ) , batting.g ( integer ) , batting.ab ( numeric ) , batting.r ( numeric ) , batting.h ( numeric ) , batting.double ( numeric ) , batting.triple ( numeric ) , batting.hr ( numeric ) , batting.rbi ( numeric ) , batting.sb ( numeric ) , batting.cs ( numeric ) , batting.bb ( numeric ) , batting.so ( numeric ) , batting.ibb ( numeric ) , batting.hbp ( numeric ) , batting.sh ( numeric ) , batting.sf ( numeric ) , batting.g_idp ( numeric ) ]\ntable batting_postseason , columns = [ batting_postseason.year ( integer ) , batting_postseason.round ( text ) , batting_postseason.player_id ( text ) , batting_postseason.team_id ( text ) , batting_postseason.league_id ( text ) , batting_postseason.g ( integer ) , batting_postseason.ab ( integer ) , batting_postseason.r ( integer ) , batting_postseason.h ( integer ) , batting_postseason.double ( integer ) , batting_postseason.triple ( integer ) , batting_postseason.hr ( integer ) , batting_postseason.rbi ( integer ) , batting_postseason.sb ( integer ) , batting_postseason.cs ( numeric ) , batting_postseason.bb ( integer ) , batting_postseason.so ( integer ) , batting_postseason.ibb ( numeric ) , batting_postseason.hbp ( numeric ) , batting_postseason.sh ( numeric ) , batting_postseason.sf ( numeric ) , batting_postseason.g_idp ( numeric ) ]\ntable player_college , columns = [ player_college.player_id ( text ) , player_college.college_id ( text ) , player_college.year ( integer ) ]\ntable fielding , columns = [ fielding.player_id ( text ) , fielding.year ( integer ) , fielding.stint ( integer ) , fielding.team_id ( text ) , fielding.league_id ( text ) , fielding.pos ( text ) , fielding.g ( integer ) , fielding.gs ( numeric ) , fielding.inn_outs ( numeric ) , fielding.po ( numeric ) , fielding.a ( numeric ) , fielding.e ( numeric ) , fielding.dp ( numeric ) , fielding.pb ( numeric ) , fielding.wp ( numeric ) , fielding.sb ( numeric ) , fielding.cs ( numeric ) , fielding.zr ( numeric ) ]\ntable fielding_outfield , columns = [ fielding_outfield.player_id ( text ) , fielding_outfield.year ( integer ) , fielding_outfield.stint ( integer ) , fielding_outfield.glf ( numeric ) , fielding_outfield.gcf ( numeric ) , fielding_outfield.grf ( numeric ) ]\ntable fielding_postseason , columns = [ fielding_postseason.player_id ( text ) , fielding_postseason.year ( integer ) , fielding_postseason.team_id ( text ) , fielding_postseason.league_id ( text ) , fielding_postseason.round ( text ) , fielding_postseason.pos ( text ) , fielding_postseason.g ( integer ) , fielding_postseason.gs ( numeric ) , fielding_postseason.inn_outs ( numeric ) , fielding_postseason.po ( integer ) , fielding_postseason.a ( integer ) , fielding_postseason.e ( integer ) , fielding_postseason.dp ( integer ) , fielding_postseason.tp ( integer ) , fielding_postseason.pb ( numeric ) , fielding_postseason.sb ( numeric ) , fielding_postseason.cs ( numeric ) ]\ntable hall_of_fame , columns = [ hall_of_fame.player_id ( text ) , hall_of_fame.yearid ( integer ) , hall_of_fame.votedby ( text ) , hall_of_fame.ballots ( numeric ) , hall_of_fame.needed ( numeric ) , hall_of_fame.votes ( numeric ) , hall_of_fame.inducted ( text ) , hall_of_fame.category ( text ) , hall_of_fame.needed_note ( text ) ]\ntable home_game , columns = [ home_game.year ( integer ) , home_game.league_id ( text ) , home_game.team_id ( text ) , home_game.park_id ( text ) , home_game.span_first ( text ) , home_game.span_last ( text ) , home_game.games ( integer ) , home_game.openings ( integer ) , home_game.attendance ( integer ) ]\ntable manager , columns = [ manager.player_id ( text ) , manager.year ( integer ) , manager.team_id ( text ) , manager.league_id ( text ) , manager.inseason ( integer ) , manager.g ( integer ) , manager.w ( integer ) , manager.l ( integer ) , manager.rank ( numeric ) , manager.plyr_mgr ( text ) ]\ntable manager_half , columns = [ manager_half.player_id ( text ) , manager_half.year ( integer ) , manager_half.team_id ( text ) , manager_half.league_id ( text ) , manager_half.inseason ( integer ) , manager_half.half ( integer ) , manager_half.g ( integer ) , manager_half.w ( integer ) , manager_half.l ( integer ) , manager_half.rank ( integer ) ]\ntable player , columns = [ player.player_id ( text ) , player.birth_year ( numeric ) , player.birth_month ( numeric ) , player.birth_day ( numeric ) , player.birth_country ( text ) , player.birth_state ( text ) , player.birth_city ( text ) , player.death_year ( numeric ) , player.death_month ( numeric ) , player.death_day ( numeric ) , player.death_country ( text ) , player.death_state ( text ) , player.death_city ( text ) , player.name_first ( text ) , player.name_last ( text ) , player.name_given ( text ) , player.weight ( numeric ) , player.height ( numeric ) , player.bats ( text ) , player.throws ( text ) , player.debut ( text ) , player.final_game ( text ) , player.retro_id ( text ) , player.bbref_id ( text ) ]\ntable park , columns = [ park.park_id ( text ) , park.park_name ( text ) , park.park_alias ( text ) , park.city ( text ) , park.state ( text ) , park.country ( text ) ]\ntable pitching , columns = [ pitching.player_id ( text ) , pitching.year ( integer ) , pitching.stint ( integer ) , pitching.team_id ( text ) , pitching.league_id ( text ) , pitching.w ( integer ) , pitching.l ( integer ) , pitching.g ( integer ) , pitching.gs ( integer ) , pitching.cg ( integer ) , pitching.sho ( integer ) , pitching.sv ( integer ) , pitching.ipouts ( numeric ) , pitching.h ( integer ) , pitching.er ( integer ) , pitching.hr ( integer ) , pitching.bb ( integer ) , pitching.so ( integer ) , pitching.baopp ( numeric ) , pitching.era ( numeric ) , pitching.ibb ( numeric ) , pitching.wp ( numeric ) , pitching.hbp ( numeric ) , pitching.bk ( integer ) , pitching.bfp ( numeric ) , pitching.gf ( numeric ) , pitching.r ( integer ) , pitching.sh ( numeric ) , pitching.sf ( numeric ) , pitching.g_idp ( numeric ) ]\ntable pitching_postseason , columns = [ pitching_postseason.player_id ( text ) , pitching_postseason.year ( integer ) , pitching_postseason.round ( text ) , pitching_postseason.team_id ( text ) , pitching_postseason.league_id ( text ) , pitching_postseason.w ( integer ) , pitching_postseason.l ( integer ) , pitching_postseason.g ( integer ) , pitching_postseason.gs ( integer ) , pitching_postseason.cg ( integer ) , pitching_postseason.sho ( integer ) , pitching_postseason.sv ( integer ) , pitching_postseason.ipouts ( integer ) , pitching_postseason.h ( integer ) , pitching_postseason.er ( integer ) , pitching_postseason.hr ( integer ) , pitching_postseason.bb ( integer ) , pitching_postseason.so ( integer ) , pitching_postseason.baopp ( text ) , pitching_postseason.era ( numeric ) , pitching_postseason.ibb ( numeric ) , pitching_postseason.wp ( numeric ) , pitching_postseason.hbp ( numeric ) , pitching_postseason.bk ( numeric ) , pitching_postseason.bfp ( numeric ) , pitching_postseason.gf ( integer ) , pitching_postseason.r ( integer ) , pitching_postseason.sh ( numeric ) , pitching_postseason.sf ( numeric ) , pitching_postseason.g_idp ( numeric ) ]\ntable salary , columns = [ salary.year ( integer ) , salary.team_id ( text ) , salary.league_id ( text ) , salary.player_id ( text ) , salary.salary ( integer ) ]\ntable college , columns = [ college.college_id ( text ) , college.name_full ( text ) , college.city ( text ) , college.state ( text ) , college.country ( text ) ]\ntable postseason , columns = [ postseason.year ( integer ) , postseason.round ( text ) , postseason.team_id_winner ( text ) , postseason.league_id_winner ( text ) , postseason.team_id_loser ( text ) , postseason.league_id_loser ( text ) , postseason.wins ( integer ) , postseason.losses ( integer ) , postseason.ties ( integer ) ]\ntable team , columns = [ team.year ( integer ) , team.league_id ( text ) , team.team_id ( text ) , team.franchise_id ( text ) , team.div_id ( text ) , team.rank ( integer ) , team.g ( integer ) , team.ghome ( numeric ) , team.w ( integer ) , team.l ( integer ) , team.div_win ( text ) , team.wc_win ( text ) , team.lg_win ( text ) , team.ws_win ( text ) , team.r ( integer ) , team.ab ( integer ) , team.h ( integer ) , team.double ( integer ) , team.triple ( integer ) , team.hr ( integer ) , team.bb ( integer ) , team.so ( numeric ) , team.sb ( numeric ) , team.cs ( numeric ) , team.hbp ( numeric ) , team.sf ( numeric ) , team.ra ( integer ) , team.er ( integer ) , team.era ( numeric ) , team.cg ( integer ) , team.sho ( integer ) , team.sv ( integer ) , team.ipouts ( integer ) , team.ha ( integer ) , team.hra ( integer ) , team.bba ( integer ) , team.soa ( integer ) , team.e ( integer ) , team.dp ( numeric ) , team.fp ( numeric ) , team.name ( text ) , team.park ( text ) , team.attendance ( numeric ) , team.bpf ( integer ) , team.ppf ( integer ) , team.team_id_br ( text ) , team.team_id_lahman45 ( text ) , team.team_id_retro ( text ) ]\ntable team_franchise , columns = [ team_franchise.franchise_id ( text ) , team_franchise.franchise_name ( text ) , team_franchise.active ( text ) , team_franchise.na_assoc ( text ) ]\ntable team_half , columns = [ team_half.year ( integer ) , team_half.league_id ( text ) , team_half.team_id ( text ) , team_half.half ( integer ) , team_half.div_id ( text ) , team_half.div_win ( text ) , team_half.rank ( integer ) , team_half.g ( integer ) , team_half.w ( integer ) , team_half.l ( integer ) ]\nforeign keys :\nall_star.player_id = player.player_id\nappearances.player_id = player.player_id\nappearances.team_id = team.team_id\nmanager_award.player_id = player.player_id\nplayer_award.player_id = player.player_id\nplayer_award_vote.player_id = player.player_id\nbatting.player_id = player.player_id\nbatting_postseason.team_id = team.team_id\nbatting_postseason.player_id = player.player_id\nplayer_college.college_id = college.college_id\nplayer_college.player_id = player.player_id\nfielding.player_id = player.player_id\nfielding_outfield.player_id = player.player_id\nfielding_postseason.team_id = player.team_id\nfielding_postseason.player_id = player.player_id\nhall_of_fame.player_id = player.player_id\nhome_game.park_id = park.park_id\nhome_game.team_id = team.team_id\nmanager.team_id = team.team_id\nmanager_half.team_id = team.team_id\nmatched contents :\nhall_of_fame.category ( Player )",
  "database schema :\ntable program , columns = [ program.program_id ( int | primary key ) , program.name ( text ) , program.origin ( text ) , program.launch ( real ) , program.owner ( text ) ]\ntable channel , columns = [ channel.channel_id ( int | primary key ) , channel.name ( text ) , channel.owner ( text ) , channel.share_in_percent ( real ) , channel.rating_in_percent ( real ) ]\ntable broadcast , columns = [ broadcast.channel_id ( int | primary key ) , broadcast.program_id ( int | primary key ) , broadcast.time_of_day ( text ) ]\ntable broadcast_share , columns = [ broadcast_share.channel_id ( int | primary key ) , broadcast_share.program_id ( int | primary key ) , broadcast_share.date ( text ) , broadcast_share.share_in_percent ( real ) ]\nforeign keys :\nbroadcast.program_id = program.program_id\nbroadcast.channel_id = channel.channel_id\nbroadcast_share.program_id = program.program_id\nbroadcast_share.channel_id = channel.channel_id\nmatched contents :\nchannel.owner ( CCTV )",
  "database schema :\ntable course_authors_and_tutors , columns = [ course_authors_and_tutors.author_id ( integer | primary key ) , course_authors_and_tutors.author_tutor_atb ( varchar(3) ) , course_authors_and_tutors.login_name ( varchar(40) ) , course_authors_and_tutors.password ( varchar(40) ) , course_authors_and_tutors.personal_name ( varchar(80) ) , course_authors_and_tutors.middle_name ( varchar(80) ) , course_authors_and_tutors.family_name ( varchar(80) ) , course_authors_and_tutors.gender_mf ( varchar(1) ) , course_authors_and_tutors.address_line_1 ( varchar(80) ) ]\ntable students , columns = [ students.student_id ( integer | primary key ) , students.date_of_registration ( datetime ) , students.date_of_latest_logon ( datetime ) , students.login_name ( varchar(40) ) , students.password ( varchar(10) ) , students.personal_name ( varchar(40) ) , students.middle_name ( varchar(40) ) , students.family_name ( varchar(40) ) ]\ntable subjects , columns = [ subjects.subject_id ( integer | primary key ) , subjects.subject_name ( varchar(120) ) ]\ntable courses , columns = [ courses.course_id ( integer | primary key ) , courses.author_id ( integer ) , courses.subject_id ( integer ) , courses.course_name ( varchar(120) ) , courses.course_description ( varchar(255) ) ]\ntable student_course_enrolment , columns = [ student_course_enrolment.registration_id ( integer | primary key ) , student_course_enrolment.student_id ( integer ) , student_course_enrolment.course_id ( integer ) , student_course_enrolment.date_of_enrolment ( datetime ) , student_course_enrolment.date_of_completion ( datetime ) ]\ntable student_tests_taken , columns = [ student_tests_taken.registration_id ( integer ) , student_tests_taken.date_test_taken ( datetime ) , student_tests_taken.test_result ( varchar(255) ) ]\nforeign keys :\ncourses.subject_id = subjects.subject_id\ncourses.author_id = course_authors_and_tutors.author_id\nstudent_course_enrolment.student_id = students.student_id\nstudent_course_enrolment.course_id = courses.course_id\nstudent_tests_taken.registration_id = student_course_enrolment.registration_id\nmatched contents : None",
  "database schema :\ntable physician , columns = [ physician.employeeid ( integer | primary key ) , physician.name ( varchar(30) ) , physician.position ( varchar(30) ) , physician.ssn ( integer ) ]\ntable department , columns = [ department.departmentid ( integer | primary key ) , department.name ( varchar(30) ) , department.head ( integer ) ]\ntable affiliated_with , columns = [ affiliated_with.physician ( integer | primary key ) , affiliated_with.department ( integer | primary key ) , affiliated_with.primaryaffiliation ( boolean ) ]\ntable procedures , columns = [ procedures.code ( integer | primary key ) , procedures.name ( varchar(30) ) , procedures.cost ( real ) ]\ntable trained_in , columns = [ trained_in.physician ( integer | primary key ) , trained_in.treatment ( integer | primary key ) , trained_in.certificationdate ( datetime ) , trained_in.certificationexpires ( datetime ) ]\ntable patient , columns = [ patient.ssn ( integer | primary key ) , patient.name ( varchar(30) ) , patient.address ( varchar(30) ) , patient.phone ( varchar(30) ) , patient.insuranceid ( integer ) , patient.pcp ( integer ) ]\ntable nurse , columns = [ nurse.employeeid ( integer | primary key ) , nurse.name ( varchar(30) ) , nurse.position ( varchar(30) ) , nurse.registered ( boolean ) , nurse.ssn ( integer ) ]\ntable appointment , columns = [ appointment.appointmentid ( integer | primary key ) , appointment.patient ( integer ) , appointment.prepnurse ( integer ) , appointment.physician ( integer ) , appointment.start ( datetime ) , appointment.end ( datetime ) , appointment.examinationroom ( text ) ]\ntable medication , columns = [ medication.code ( integer | primary key ) , medication.name ( varchar(30) ) , medication.brand ( varchar(30) ) , medication.description ( varchar(30) ) ]\ntable prescribes , columns = [ prescribes.physician ( integer | primary key ) , prescribes.patient ( integer | primary key ) , prescribes.medication ( integer | primary key ) , prescribes.date ( datetime | primary key ) , prescribes.appointment ( integer ) , prescribes.dose ( varchar(30) ) ]\ntable block , columns = [ block.blockfloor ( integer | primary key ) , block.blockcode ( integer | primary key ) ]\ntable room , columns = [ room.roomnumber ( integer | primary key ) , room.roomtype ( varchar(30) ) , room.blockfloor ( integer ) , room.blockcode ( integer ) , room.unavailable ( boolean ) ]\ntable on_call , columns = [ on_call.nurse ( integer | primary key ) , on_call.blockfloor ( integer | primary key ) , on_call.blockcode ( integer | primary key ) , on_call.oncallstart ( datetime | primary key ) , on_call.oncallend ( datetime | primary key ) ]\ntable stay , columns = [ stay.stayid ( integer | primary key ) , stay.patient ( integer ) , stay.room ( integer ) , stay.staystart ( datetime ) , stay.stayend ( datetime ) ]\ntable undergoes , columns = [ undergoes.patient ( integer | primary key ) , undergoes.procedures ( integer | primary key ) , undergoes.stay ( integer | primary key ) , undergoes.dateundergoes ( datetime | primary key ) , undergoes.physician ( integer ) , undergoes.assistingnurse ( integer ) ]\nforeign keys :\ndepartment.head = physician.employeeid\naffiliated_with.department = department.departmentid\naffiliated_with.physician = physician.employeeid\ntrained_in.treatment = procedures.code\ntrained_in.physician = physician.employeeid\npatient.pcp = physician.employeeid\nappointment.physician = physician.employeeid\nappointment.prepnurse = nurse.employeeid\nappointment.patient = patient.ssn\nprescribes.appointment = appointment.appointmentid\nprescribes.medication = medication.code\nprescribes.patient = patient.ssn\nprescribes.physician = physician.employeeid\nroom.blockfloor = block.blockfloor\nroom.blockcode = block.blockcode\non_call.blockfloor = block.blockfloor\non_call.blockcode = block.blockcode\non_call.nurse = nurse.employeeid\nstay.room = room.roomnumber\nstay.patient = patient.ssn\nundergoes.assistingnurse = nurse.employeeid\nundergoes.physician = physician.employeeid\nundergoes.stay = stay.stayid\nundergoes.procedures = procedures.code\nundergoes.patient = patient.ssn\nmatched contents : None",
  "database schema :\ntable mission , columns = [ mission.mission_id ( int | primary key ) , mission.ship_id ( int ) , mission.code ( text ) , mission.launched_year ( int ) , mission.location ( text ) , mission.speed_knots ( int ) , mission.fate ( text ) ]\ntable ship , columns = [ ship.ship_id ( int | primary key ) , ship.name ( text ) , ship.type ( text ) , ship.nationality ( text ) , ship.tonnage ( int ) ]\nforeign keys :\nmission.ship_id = ship.ship_id\nmatched contents : None",
  "database schema :\ntable list , columns = [ list.lastname ( text | primary key ) , list.firstname ( text | primary key ) , list.grade ( integer ) , list.classroom ( integer ) ]\ntable teachers , columns = [ teachers.lastname ( text | primary key ) , teachers.firstname ( text | primary key ) , teachers.classroom ( integer ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable document_types , columns = [ document_types.document_type_code ( varchar(10) | primary key ) , document_types.document_description ( varchar(255) ) ]\ntable documents , columns = [ documents.document_id ( integer | primary key ) , documents.document_type_code ( varchar(10) ) , documents.grant_id ( integer ) , documents.sent_date ( datetime ) , documents.response_received_date ( datetime ) , documents.other_details ( varchar(255) ) ]\ntable grants , columns = [ grants.grant_id ( integer | primary key ) , grants.organisation_id ( integer ) , grants.grant_amount ( decimal(19,4) ) , grants.grant_start_date ( datetime ) , grants.grant_end_date ( datetime ) , grants.other_details ( varchar(255) ) ]\ntable organisation_types , columns = [ organisation_types.organisation_type ( varchar(10) | primary key ) , organisation_types.organisation_type_description ( varchar(255) ) ]\ntable organisations , columns = [ organisations.organisation_id ( integer | primary key ) , organisations.organisation_type ( varchar(10) ) , organisations.organisation_details ( varchar(255) ) ]\ntable project_outcomes , columns = [ project_outcomes.project_id ( integer ) , project_outcomes.outcome_code ( varchar(10) ) , project_outcomes.outcome_details ( varchar(255) ) ]\ntable project_staff , columns = [ project_staff.staff_id ( double | primary key ) , project_staff.project_id ( integer ) , project_staff.role_code ( varchar(10) ) , project_staff.date_from ( datetime ) , project_staff.date_to ( datetime ) , project_staff.other_details ( varchar(255) ) ]\ntable projects , columns = [ projects.project_id ( integer | primary key ) , projects.organisation_id ( integer ) , projects.project_details ( varchar(255) ) ]\ntable research_outcomes , columns = [ research_outcomes.outcome_code ( varchar(10) | primary key ) , research_outcomes.outcome_description ( varchar(255) ) ]\ntable research_staff , columns = [ research_staff.staff_id ( integer | primary key ) , research_staff.employer_organisation_id ( integer ) , research_staff.staff_details ( varchar(255) ) ]\ntable staff_roles , columns = [ staff_roles.role_code ( varchar(10) | primary key ) , staff_roles.role_description ( varchar(255) ) ]\ntable tasks , columns = [ tasks.task_id ( integer | primary key ) , tasks.project_id ( integer ) , tasks.task_details ( varchar(255) ) , tasks.`eg agree objectives` ( varchar(1) ) ]\nforeign keys :\ndocuments.grant_id = grants.grant_id\ndocuments.document_type_code = document_types.document_type_code\ngrants.organisation_id = organisations.organisation_id\norganisations.organisation_type = organisation_types.organisation_type\nproject_outcomes.outcome_code = research_outcomes.outcome_code\nproject_outcomes.project_id = projects.project_id\nproject_staff.role_code = staff_roles.role_code\nproject_staff.project_id = projects.project_id\nprojects.organisation_id = organisations.organisation_id\nresearch_staff.employer_organisation_id = organisations.organisation_id\ntasks.project_id = projects.project_id\nmatched contents :\ngrants.grant_start_date ( 1986-08-26 20:49:27 )\ngrants.grant_end_date ( 1989-03-16 18:27:16 )",
  "database schema :\ntable person , columns = [ person.name ( varchar(20) | primary key ) , person.age ( integer ) , person.city ( text ) , person.gender ( text ) , person.job ( text ) ]\ntable personfriend , columns = [ personfriend.name ( varchar(20) ) , personfriend.friend ( varchar(20) ) , personfriend.year ( integer ) ]\nforeign keys :\npersonfriend.friend = person.name\npersonfriend.name = person.name\nmatched contents :\nperson.name ( Dan )\npersonfriend.friend ( Dan )",
  "database schema :\ntable college , columns = [ college.college_id ( int | primary key ) , college.name ( text ) , college.leader_name ( text ) , college.college_location ( text ) ]\ntable member , columns = [ member.member_id ( int | primary key ) , member.name ( text ) , member.country ( text ) , member.college_id ( int ) ]\ntable round , columns = [ round.round_id ( int | primary key ) , round.member_id ( int | primary key ) , round.decoration_theme ( text ) , round.rank_in_round ( int ) ]\nforeign keys :\nmember.college_id = college.college_id\nround.member_id = member.member_id\nmatched contents : None",
  "database schema :\ntable roles , columns = [ roles.role_code ( varchar(15) | primary key ) , roles.role_description ( varchar(80) ) ]\ntable users , columns = [ users.user_id ( integer | primary key ) , users.role_code ( varchar(15) ) , users.user_name ( varchar(40) ) , users.user_login ( varchar(40) ) , users.password ( varchar(40) ) ]\ntable document_structures , columns = [ document_structures.document_structure_code ( varchar(15) | primary key ) , document_structures.parent_document_structure_code ( varchar(15) ) , document_structures.document_structure_description ( varchar(80) ) ]\ntable functional_areas , columns = [ functional_areas.functional_area_code ( varchar(15) | primary key ) , functional_areas.parent_functional_area_code ( varchar(15) ) , functional_areas.functional_area_description ( varchar(80) ) ]\ntable images , columns = [ images.image_id ( integer | primary key ) , images.image_alt_text ( varchar(80) ) , images.image_name ( varchar(40) ) , images.image_url ( varchar(255) ) ]\ntable documents , columns = [ documents.document_code ( varchar(15) | primary key ) , documents.document_structure_code ( varchar(15) ) , documents.document_type_code ( varchar(15) ) , documents.access_count ( integer ) , documents.document_name ( varchar(80) ) ]\ntable document_functional_areas , columns = [ document_functional_areas.document_code ( varchar(15) ) , document_functional_areas.functional_area_code ( varchar(15) ) ]\ntable document_sections , columns = [ document_sections.section_id ( integer | primary key ) , document_sections.document_code ( varchar(15) ) , document_sections.section_sequence ( integer ) , document_sections.section_code ( varchar(20) ) , document_sections.section_title ( varchar(80) ) ]\ntable document_sections_images , columns = [ document_sections_images.section_id ( integer | primary key ) , document_sections_images.image_id ( integer | primary key ) ]\nforeign keys :\nusers.role_code = roles.role_code\ndocuments.document_structure_code = document_structures.document_structure_code\ndocument_functional_areas.functional_area_code = functional_areas.functional_area_code\ndocument_functional_areas.document_code = documents.document_code\ndocument_sections.document_code = documents.document_code\ndocument_sections_images.image_id = images.image_id\ndocument_sections_images.section_id = document_sections.section_id\nmatched contents :\nimages.image_alt_text ( Name )",
  "database schema :\ntable festival_detail , columns = [ festival_detail.festival_id ( int | primary key ) , festival_detail.festival_name ( text ) , festival_detail.chair_name ( text ) , festival_detail.location ( text ) , festival_detail.year ( int ) , festival_detail.num_of_audience ( int ) ]\ntable artwork , columns = [ artwork.artwork_id ( int | primary key ) , artwork.type ( text ) , artwork.name ( text ) ]\ntable nomination , columns = [ nomination.artwork_id ( int | primary key ) , nomination.festival_id ( int | primary key ) , nomination.result ( text ) ]\nforeign keys :\nnomination.festival_id = festival_detail.festival_id\nnomination.artwork_id = artwork.artwork_id\nmatched contents : None",
  "database schema :\ntable premises , columns = [ premises.premise_id ( integer | primary key ) , premises.premises_type ( varchar(15) ) , premises.premise_details ( varchar(255) ) ]\ntable products , columns = [ products.product_id ( integer | primary key ) , products.product_category ( varchar(15) ) , products.product_name ( varchar(80) ) ]\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.payment_method ( varchar(15) ) , customers.customer_name ( varchar(80) ) , customers.customer_phone ( varchar(80) ) , customers.customer_email ( varchar(80) ) , customers.customer_address ( varchar(255) ) , customers.customer_login ( varchar(80) ) , customers.customer_password ( varchar(10) ) ]\ntable mailshot_campaigns , columns = [ mailshot_campaigns.mailshot_id ( integer | primary key ) , mailshot_campaigns.product_category ( varchar(15) ) , mailshot_campaigns.mailshot_name ( varchar(80) ) , mailshot_campaigns.mailshot_start_date ( datetime ) , mailshot_campaigns.mailshot_end_date ( datetime ) ]\ntable customer_addresses , columns = [ customer_addresses.customer_id ( integer ) , customer_addresses.premise_id ( integer ) , customer_addresses.date_address_from ( datetime ) , customer_addresses.address_type_code ( varchar(15) ) , customer_addresses.date_address_to ( datetime ) ]\ntable customer_orders , columns = [ customer_orders.order_id ( integer | primary key ) , customer_orders.customer_id ( integer ) , customer_orders.order_status_code ( varchar(15) ) , customer_orders.shipping_method_code ( varchar(15) ) , customer_orders.order_placed_datetime ( datetime ) , customer_orders.order_delivered_datetime ( datetime ) , customer_orders.order_shipping_charges ( varchar(255) ) ]\ntable mailshot_customers , columns = [ mailshot_customers.mailshot_id ( integer ) , mailshot_customers.customer_id ( integer ) , mailshot_customers.outcome_code ( varchar(15) ) , mailshot_customers.mailshot_customer_date ( datetime ) ]\ntable order_items , columns = [ order_items.item_id ( integer ) , order_items.order_item_status_code ( varchar(15) ) , order_items.order_id ( integer ) , order_items.product_id ( integer ) , order_items.item_status_code ( varchar(15) ) , order_items.item_delivered_datetime ( datetime ) , order_items.item_order_quantity ( varchar(80) ) ]\nforeign keys :\ncustomer_addresses.customer_id = customers.customer_id\ncustomer_addresses.premise_id = premises.premise_id\ncustomer_orders.customer_id = customers.customer_id\nmailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\nmailshot_customers.customer_id = customers.customer_id\norder_items.order_id = customer_orders.order_id\norder_items.product_id = products.product_id\nmatched contents : None",
  "database schema :\ntable pilot , columns = [ pilot.pilot_id ( int(11) | primary key ) , pilot.name ( varchar(50) ) , pilot.age ( int(11) ) ]\ntable aircraft , columns = [ aircraft.aircraft_id ( int(11) | primary key ) , aircraft.aircraft ( varchar(50) ) , aircraft.description ( varchar(50) ) , aircraft.max_gross_weight ( varchar(50) ) , aircraft.total_disk_area ( varchar(50) ) , aircraft.max_disk_loading ( varchar(50) ) ]\ntable match , columns = [ match.round ( real | primary key ) , match.location ( text ) , match.country ( text ) , match.date ( text ) , match.fastest_qualifying ( text ) , match.winning_pilot ( text ) , match.winning_aircraft ( text ) ]\ntable airport , columns = [ airport.airport_id ( int | primary key ) , airport.airport_name ( text ) , airport.total_passengers ( real ) , airport.%_change_2007 ( text ) , airport.international_passengers ( real ) , airport.domestic_passengers ( real ) , airport.transit_passengers ( real ) , airport.aircraft_movements ( real ) , airport.freight_metric_tonnes ( real ) ]\ntable airport_aircraft , columns = [ airport_aircraft.id ( int ) , airport_aircraft.airport_id ( int | primary key ) , airport_aircraft.aircraft_id ( int | primary key ) ]\nforeign keys :\nmatch.winning_pilot = pilot.pilot_id\nmatch.winning_aircraft = aircraft.aircraft_id\nairport_aircraft.aircraft_id = aircraft.aircraft_id\nairport_aircraft.airport_id = airport.airport_id\nmatched contents : None",
  "database schema :\ntable device , columns = [ device.device_id ( int | primary key ) , device.device ( text ) , device.carrier ( text ) , device.package_version ( text ) , device.applications ( text ) , device.software_platform ( text ) ]\ntable shop , columns = [ shop.shop_id ( int | primary key ) , shop.shop_name ( text ) , shop.location ( text ) , shop.open_date ( text ) , shop.open_year ( int ) ]\ntable stock , columns = [ stock.shop_id ( int | primary key ) , stock.device_id ( int | primary key ) , stock.quantity ( int ) ]\nforeign keys :\nstock.device_id = device.device_id\nstock.shop_id = shop.shop_id\nmatched contents : None",
  "database schema :\ntable ref_payment_methods , columns = [ ref_payment_methods.payment_method_code ( char(10) | primary key ) , ref_payment_methods.payment_method_description ( varchar(80) ) ]\ntable ref_service_types , columns = [ ref_service_types.service_type_code ( char(15) | primary key ) , ref_service_types.parent_service_type_code ( char(15) ) , ref_service_types.service_type_description ( varchar(255) ) ]\ntable addresses , columns = [ addresses.address_id ( varchar(100) | primary key ) , addresses.line_1 ( varchar(255) ) , addresses.line_2 ( varchar(255) ) , addresses.city_town ( varchar(255) ) , addresses.state_county ( varchar(255) ) , addresses.other_details ( varchar(255) ) ]\ntable products , columns = [ products.product_id ( varchar(100) | primary key ) , products.product_name ( varchar(255) ) , products.product_price ( decimal(20,4) ) , products.product_description ( varchar(255) ) , products.other_product_service_details ( varchar(255) ) ]\ntable marketing_regions , columns = [ marketing_regions.marketing_region_code ( char(15) | primary key ) , marketing_regions.marketing_region_name ( varchar(255) ) , marketing_regions.marketing_region_descriptrion ( varchar(255) ) , marketing_regions.other_details ( varchar(255) ) ]\ntable clients , columns = [ clients.client_id ( integer | primary key ) , clients.address_id ( integer ) , clients.customer_email_address ( varchar(255) ) , clients.customer_name ( varchar(255) ) , clients.customer_phone ( varchar(255) ) , clients.other_details ( varchar(255) ) ]\ntable drama_workshop_groups , columns = [ drama_workshop_groups.workshop_group_id ( integer | primary key ) , drama_workshop_groups.address_id ( integer ) , drama_workshop_groups.currency_code ( char(15) ) , drama_workshop_groups.marketing_region_code ( char(15) ) , drama_workshop_groups.store_name ( varchar(255) ) , drama_workshop_groups.store_phone ( varchar(255) ) , drama_workshop_groups.store_email_address ( varchar(255) ) , drama_workshop_groups.other_details ( varchar(255) ) ]\ntable performers , columns = [ performers.performer_id ( integer | primary key ) , performers.address_id ( integer ) , performers.customer_name ( varchar(255) ) , performers.customer_phone ( varchar(255) ) , performers.customer_email_address ( varchar(255) ) , performers.other_details ( varchar(255) ) ]\ntable customers , columns = [ customers.customer_id ( varchar(100) | primary key ) , customers.address_id ( integer ) , customers.customer_name ( varchar(255) ) , customers.customer_phone ( varchar(255) ) , customers.customer_email_address ( varchar(255) ) , customers.other_details ( varchar(255) ) ]\ntable stores , columns = [ stores.store_id ( varchar(100) | primary key ) , stores.address_id ( integer ) , stores.marketing_region_code ( char(15) ) , stores.store_name ( varchar(255) ) , stores.store_phone ( varchar(255) ) , stores.store_email_address ( varchar(255) ) , stores.other_details ( varchar(255) ) ]\ntable bookings , columns = [ bookings.booking_id ( integer | primary key ) , bookings.customer_id ( integer ) , bookings.workshop_group_id ( varchar(100) ) , bookings.status_code ( char(15) ) , bookings.store_id ( integer ) , bookings.order_date ( datetime ) , bookings.planned_delivery_date ( datetime ) , bookings.actual_delivery_date ( datetime ) , bookings.other_order_details ( varchar(255) ) ]\ntable performers_in_bookings , columns = [ performers_in_bookings.order_id ( integer | primary key ) , performers_in_bookings.performer_id ( integer | primary key ) ]\ntable customer_orders , columns = [ customer_orders.order_id ( integer | primary key ) , customer_orders.customer_id ( integer ) , customer_orders.store_id ( integer ) , customer_orders.order_date ( datetime ) , customer_orders.planned_delivery_date ( datetime ) , customer_orders.actual_delivery_date ( datetime ) , customer_orders.other_order_details ( varchar(255) ) ]\ntable order_items , columns = [ order_items.order_item_id ( integer | primary key ) , order_items.order_id ( integer ) , order_items.product_id ( integer ) , order_items.order_quantity ( varchar(288) ) , order_items.other_item_details ( varchar(255) ) ]\ntable invoices , columns = [ invoices.invoice_id ( integer | primary key ) , invoices.order_id ( integer ) , invoices.payment_method_code ( char(15) ) , invoices.product_id ( integer ) , invoices.order_quantity ( varchar(288) ) , invoices.other_item_details ( varchar(255) ) , invoices.order_item_id ( integer ) ]\ntable services , columns = [ services.service_id ( integer | primary key ) , services.service_type_code ( char(15) ) , services.workshop_group_id ( integer ) , services.product_description ( varchar(255) ) , services.product_name ( varchar(255) ) , services.product_price ( decimal(20,4) ) , services.other_product_service_details ( varchar(255) ) ]\ntable bookings_services , columns = [ bookings_services.order_id ( integer | primary key ) , bookings_services.product_id ( integer | primary key ) ]\ntable invoice_items , columns = [ invoice_items.invoice_item_id ( integer | primary key ) , invoice_items.invoice_id ( integer ) , invoice_items.order_id ( integer ) , invoice_items.order_item_id ( integer ) , invoice_items.product_id ( integer ) , invoice_items.order_quantity ( integer ) , invoice_items.other_item_details ( varchar(255) ) ]\nforeign keys :\nclients.address_id = addresses.address_id\ndrama_workshop_groups.address_id = addresses.address_id\nperformers.address_id = addresses.address_id\ncustomers.address_id = addresses.address_id\nstores.marketing_region_code = marketing_regions.marketing_region_code\nstores.address_id = addresses.address_id\nbookings.workshop_group_id = drama_workshop_groups.workshop_group_id\nbookings.customer_id = clients.client_id\nperformers_in_bookings.order_id = bookings.booking_id\nperformers_in_bookings.performer_id = performers.performer_id\ncustomer_orders.store_id = stores.store_id\ncustomer_orders.customer_id = customers.customer_id\norder_items.product_id = products.product_id\norder_items.order_id = customer_orders.order_id\ninvoices.payment_method_code = ref_payment_methods.payment_method_code\ninvoices.order_id = bookings.booking_id\ninvoices.order_id = customer_orders.order_id\nservices.service_type_code = ref_service_types.service_type_code\nservices.workshop_group_id = drama_workshop_groups.workshop_group_id\nbookings_services.product_id = services.service_id\nbookings_services.order_id = bookings.booking_id\ninvoice_items.order_id = bookings_services.order_id\ninvoice_items.product_id = bookings_services.product_id\ninvoice_items.invoice_id = invoices.invoice_id\ninvoice_items.order_item_id = order_items.order_item_id\nmatched contents : None",
  "database schema :\ntable songs , columns = [ songs.songid ( integer | primary key ) , songs.title ( text ) ]\ntable albums , columns = [ albums.aid ( integer | primary key ) , albums.title ( text ) , albums.year ( integer ) , albums.label ( text ) , albums.type ( text ) ]\ntable band , columns = [ band.id ( integer | primary key ) , band.firstname ( text ) , band.lastname ( text ) ]\ntable instruments , columns = [ instruments.songid ( integer | primary key ) , instruments.bandmateid ( integer | primary key ) , instruments.instrument ( text | primary key ) ]\ntable performance , columns = [ performance.songid ( integer | primary key ) , performance.bandmate ( integer | primary key ) , performance.stageposition ( text ) ]\ntable tracklists , columns = [ tracklists.albumid ( integer | primary key ) , tracklists.position ( integer | primary key ) , tracklists.songid ( integer ) ]\ntable vocals , columns = [ vocals.songid ( integer | primary key ) , vocals.bandmate ( integer | primary key ) , vocals.type ( text ) ]\nforeign keys :\ninstruments.bandmateid = band.id\ninstruments.songid = songs.songid\nperformance.bandmate = band.id\nperformance.songid = songs.songid\ntracklists.albumid = albums.aid\ntracklists.songid = songs.songid\nvocals.bandmate = band.id\nvocals.songid = songs.songid\nmatched contents : None",
  "database schema :\ntable problem_category_codes , columns = [ problem_category_codes.problem_category_code ( varchar(20) | primary key ) , problem_category_codes.problem_category_description ( varchar(80) ) ]\ntable problem_log , columns = [ problem_log.problem_log_id ( integer | primary key ) , problem_log.assigned_to_staff_id ( integer ) , problem_log.problem_id ( integer ) , problem_log.problem_category_code ( varchar(20) ) , problem_log.problem_status_code ( varchar(20) ) , problem_log.log_entry_date ( datetime ) , problem_log.log_entry_description ( varchar(255) ) , problem_log.log_entry_fix ( varchar(255) ) , problem_log.other_log_details ( varchar(255) ) ]\ntable problem_status_codes , columns = [ problem_status_codes.problem_status_code ( varchar(20) | primary key ) , problem_status_codes.problem_status_description ( varchar(80) ) ]\ntable product , columns = [ product.product_id ( integer | primary key ) , product.product_name ( varchar(80) ) , product.product_details ( varchar(255) ) ]\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.staff_first_name ( varchar(80) ) , staff.staff_last_name ( varchar(80) ) , staff.other_staff_details ( varchar(255) ) ]\ntable problems , columns = [ problems.problem_id ( integer | primary key ) , problems.product_id ( integer ) , problems.closure_authorised_by_staff_id ( integer ) , problems.reported_by_staff_id ( integer ) , problems.date_problem_reported ( datetime ) , problems.date_problem_closed ( datetime ) , problems.problem_description ( varchar(255) ) , problems.other_problem_details ( varchar(255) ) ]\nforeign keys :\nproblem_log.problem_status_code = problem_status_codes.problem_status_code\nproblem_log.problem_id = problems.problem_id\nproblem_log.assigned_to_staff_id = staff.staff_id\nproblem_log.problem_category_code = problem_category_codes.problem_category_code\nproblems.reported_by_staff_id = staff.staff_id\nproblems.product_id = product.product_id\nproblems.closure_authorised_by_staff_id = staff.staff_id\nmatched contents : None",
  "database schema :\ntable ref_characteristic_types , columns = [ ref_characteristic_types.characteristic_type_code ( varchar(15) | primary key ) , ref_characteristic_types.characteristic_type_description ( varchar(80) ) ]\ntable ref_colors , columns = [ ref_colors.color_code ( varchar(15) | primary key ) , ref_colors.color_description ( varchar(80) ) ]\ntable ref_product_categories , columns = [ ref_product_categories.product_category_code ( varchar(15) | primary key ) , ref_product_categories.product_category_description ( varchar(80) ) , ref_product_categories.unit_of_measure ( varchar(20) ) ]\ntable characteristics , columns = [ characteristics.characteristic_id ( integer | primary key ) , characteristics.characteristic_type_code ( varchar(15) ) , characteristics.characteristic_data_type ( varchar(10) ) , characteristics.characteristic_name ( varchar(80) ) , characteristics.other_characteristic_details ( varchar(255) ) ]\ntable products , columns = [ products.product_id ( integer | primary key ) , products.color_code ( varchar(15) ) , products.product_category_code ( varchar(15) ) , products.product_name ( varchar(80) ) , products.typical_buying_price ( varchar(20) ) , products.typical_selling_price ( varchar(20) ) , products.product_description ( varchar(255) ) , products.other_product_details ( varchar(255) ) ]\ntable product_characteristics , columns = [ product_characteristics.product_id ( integer ) , product_characteristics.characteristic_id ( integer ) , product_characteristics.product_characteristic_value ( varchar(50) ) ]\nforeign keys :\ncharacteristics.characteristic_type_code = ref_characteristic_types.characteristic_type_code\nproducts.color_code = ref_colors.color_code\nproducts.product_category_code = ref_product_categories.product_category_code\nproduct_characteristics.product_id = products.product_id\nproduct_characteristics.characteristic_id = characteristics.characteristic_id\nmatched contents : None",
  "database schema :\ntable swimmer , columns = [ swimmer.id ( int | primary key ) , swimmer.name ( text ) , swimmer.nationality ( text ) , swimmer.meter_100 ( real ) , swimmer.meter_200 ( text ) , swimmer.meter_300 ( text ) , swimmer.meter_400 ( text ) , swimmer.meter_500 ( text ) , swimmer.meter_600 ( text ) , swimmer.meter_700 ( text ) , swimmer.time ( text ) ]\ntable stadium , columns = [ stadium.id ( int | primary key ) , stadium.name ( text ) , stadium.capacity ( int ) , stadium.city ( text ) , stadium.country ( text ) , stadium.opening_year ( int ) ]\ntable event , columns = [ event.id ( int | primary key ) , event.name ( text ) , event.stadium_id ( int ) , event.year ( text ) ]\ntable record , columns = [ record.id ( int ) , record.result ( text ) , record.swimmer_id ( int | primary key ) , record.event_id ( int | primary key ) ]\nforeign keys :\nevent.stadium_id = stadium.id\nrecord.swimmer_id = swimmer.id\nrecord.event_id = event.id\nmatched contents : None",
  "database schema :\ntable railway , columns = [ railway.railway_id ( int | primary key ) , railway.railway ( text ) , railway.builder ( text ) , railway.built ( text ) , railway.wheels ( text ) , railway.location ( text ) , railway.objectnumber ( text ) ]\ntable train , columns = [ train.train_id ( int | primary key ) , train.train_num ( text ) , train.name ( text ) , train.from ( text ) , train.arrival ( text ) , train.railway_id ( int ) ]\ntable manager , columns = [ manager.manager_id ( int | primary key ) , manager.name ( text ) , manager.country ( text ) , manager.working_year_starts ( text ) , manager.age ( int ) , manager.level ( int ) ]\ntable railway_manage , columns = [ railway_manage.railway_id ( int | primary key ) , railway_manage.manager_id ( int | primary key ) , railway_manage.from_year ( text ) ]\nforeign keys :\ntrain.railway_id = railway.railway_id\nrailway_manage.railway_id = railway.railway_id\nrailway_manage.manager_id = manager.manager_id\nmatched contents : None",
  "database schema :\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.gender ( varchar(1) ) , staff.first_name ( varchar(80) ) , staff.last_name ( varchar(80) ) , staff.email_address ( varchar(255) ) , staff.phone_number ( varchar(80) ) ]\ntable customers , columns = [ customers.customer_id ( integer | primary key ) , customers.customer_type_code ( varchar(20) ) , customers.address_line_1 ( varchar(80) ) , customers.address_line_2 ( varchar(80) ) , customers.town_city ( varchar(80) ) , customers.state ( varchar(80) ) , customers.email_address ( varchar(255) ) , customers.phone_number ( varchar(80) ) ]\ntable products , columns = [ products.product_id ( integer | primary key ) , products.parent_product_id ( integer ) , products.product_category_code ( varchar(20) ) , products.date_product_first_available ( datetime ) , products.date_product_discontinued ( datetime ) , products.product_name ( varchar(80) ) , products.product_description ( varchar(255) ) , products.product_price ( decimal(19,4) ) ]\ntable complaints , columns = [ complaints.complaint_id ( integer ) , complaints.product_id ( integer ) , complaints.customer_id ( integer ) , complaints.complaint_outcome_code ( varchar(20) ) , complaints.complaint_status_code ( varchar(20) ) , complaints.complaint_type_code ( varchar(20) ) , complaints.date_complaint_raised ( datetime ) , complaints.date_complaint_closed ( datetime ) , complaints.staff_id ( integer ) ]\nforeign keys :\ncomplaints.customer_id = customers.customer_id\ncomplaints.product_id = products.product_id\ncomplaints.staff_id = staff.staff_id\nmatched contents : None",
  "database schema :\ntable workshop , columns = [ workshop.workshop_id ( int | primary key ) , workshop.date ( text ) , workshop.venue ( text ) , workshop.name ( text ) ]\ntable submission , columns = [ submission.submission_id ( int | primary key ) , submission.scores ( real ) , submission.author ( text ) , submission.college ( text ) ]\ntable acceptance , columns = [ acceptance.submission_id ( int | primary key ) , acceptance.workshop_id ( int | primary key ) , acceptance.result ( text ) ]\nforeign keys :\nacceptance.workshop_id = workshop.workshop_id\nacceptance.submission_id = submission.submission_id\nmatched contents : None",
  "database schema :\ntable investors , columns = [ investors.investor_id ( integer | primary key ) , investors.investor_details ( varchar(255) ) ]\ntable lots , columns = [ lots.lot_id ( integer | primary key ) , lots.investor_id ( integer ) , lots.lot_details ( varchar(255) ) ]\ntable ref_transaction_types , columns = [ ref_transaction_types.transaction_type_code ( varchar(10) | primary key ) , ref_transaction_types.transaction_type_description ( varchar(80) ) ]\ntable transactions , columns = [ transactions.transaction_id ( integer | primary key ) , transactions.investor_id ( integer ) , transactions.transaction_type_code ( varchar(10) ) , transactions.date_of_transaction ( datetime ) , transactions.amount_of_transaction ( decimal(19,4) ) , transactions.share_count ( varchar(40) ) , transactions.other_details ( varchar(255) ) ]\ntable sales , columns = [ sales.sales_transaction_id ( integer | primary key ) , sales.sales_details ( varchar(255) ) ]\ntable purchases , columns = [ purchases.purchase_transaction_id ( integer ) , purchases.purchase_details ( varchar(255) ) ]\ntable transactions_lots , columns = [ transactions_lots.transaction_id ( integer ) , transactions_lots.lot_id ( integer ) ]\nforeign keys :\nlots.investor_id = investors.investor_id\ntransactions.transaction_type_code = ref_transaction_types.transaction_type_code\ntransactions.investor_id = investors.investor_id\nsales.sales_transaction_id = transactions.transaction_id\npurchases.purchase_transaction_id = transactions.transaction_id\ntransactions_lots.transaction_id = transactions.transaction_id\ntransactions_lots.lot_id = lots.lot_id\nmatched contents : None",
  "database schema :\ntable ref_hotel_star_ratings , columns = [ ref_hotel_star_ratings.star_rating_code ( char(15) | primary key ) , ref_hotel_star_ratings.star_rating_description ( varchar(80) ) ]\ntable locations , columns = [ locations.location_id ( integer | primary key ) , locations.location_name ( varchar(255) ) , locations.address ( varchar(255) ) , locations.other_details ( varchar(255) ) ]\ntable ref_attraction_types , columns = [ ref_attraction_types.attraction_type_code ( char(15) | primary key ) , ref_attraction_types.attraction_type_description ( varchar(255) ) ]\ntable visitors , columns = [ visitors.tourist_id ( integer | primary key ) , visitors.tourist_details ( varchar(255) ) ]\ntable features , columns = [ features.feature_id ( integer | primary key ) , features.feature_details ( varchar(255) ) ]\ntable hotels , columns = [ hotels.hotel_id ( integer | primary key ) , hotels.star_rating_code ( char(15) ) , hotels.pets_allowed_yn ( char(1) ) , hotels.price_range ( real ) , hotels.other_hotel_details ( varchar(255) ) ]\ntable tourist_attractions , columns = [ tourist_attractions.tourist_attraction_id ( integer | primary key ) , tourist_attractions.attraction_type_code ( char(15) ) , tourist_attractions.location_id ( integer ) , tourist_attractions.how_to_get_there ( varchar(255) ) , tourist_attractions.name ( varchar(255) ) , tourist_attractions.description ( varchar(255) ) , tourist_attractions.opening_hours ( varchar(255) ) , tourist_attractions.other_details ( varchar(255) ) ]\ntable street_markets , columns = [ street_markets.market_id ( integer | primary key ) , street_markets.market_details ( varchar(255) ) ]\ntable shops , columns = [ shops.shop_id ( integer | primary key ) , shops.shop_details ( varchar(255) ) ]\ntable museums , columns = [ museums.museum_id ( integer | primary key ) , museums.museum_details ( varchar(255) ) ]\ntable royal_family , columns = [ royal_family.royal_family_id ( integer | primary key ) , royal_family.royal_family_details ( varchar(255) ) ]\ntable theme_parks , columns = [ theme_parks.theme_park_id ( integer | primary key ) , theme_parks.theme_park_details ( varchar(255) ) ]\ntable visits , columns = [ visits.visit_id ( integer | primary key ) , visits.tourist_attraction_id ( integer ) , visits.tourist_id ( integer ) , visits.visit_date ( datetime ) , visits.visit_details ( varchar(40) ) ]\ntable photos , columns = [ photos.photo_id ( integer | primary key ) , photos.tourist_attraction_id ( integer ) , photos.name ( varchar(255) ) , photos.description ( varchar(255) ) , photos.filename ( varchar(255) ) , photos.other_details ( varchar(255) ) ]\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.tourist_attraction_id ( integer ) , staff.name ( varchar(40) ) , staff.other_details ( varchar(255) ) ]\ntable tourist_attraction_features , columns = [ tourist_attraction_features.tourist_attraction_id ( integer | primary key ) , tourist_attraction_features.feature_id ( integer | primary key ) ]\nforeign keys :\nhotels.star_rating_code = ref_hotel_star_ratings.star_rating_code\ntourist_attractions.attraction_type_code = ref_attraction_types.attraction_type_code\ntourist_attractions.location_id = locations.location_id\nstreet_markets.market_id = tourist_attractions.tourist_attraction_id\nshops.shop_id = tourist_attractions.tourist_attraction_id\nmuseums.museum_id = tourist_attractions.tourist_attraction_id\nroyal_family.royal_family_id = tourist_attractions.tourist_attraction_id\ntheme_parks.theme_park_id = tourist_attractions.tourist_attraction_id\nvisits.tourist_id = visitors.tourist_id\nvisits.tourist_attraction_id = tourist_attractions.tourist_attraction_id\nphotos.tourist_attraction_id = tourist_attractions.tourist_attraction_id\nstaff.tourist_attraction_id = tourist_attractions.tourist_attraction_id\ntourist_attraction_features.feature_id = features.feature_id\ntourist_attraction_features.tourist_attraction_id = tourist_attractions.tourist_attraction_id\nmatched contents : None",
  "database schema :\ntable roller_coaster , columns = [ roller_coaster.roller_coaster_id ( int | primary key ) , roller_coaster.name ( text ) , roller_coaster.park ( text ) , roller_coaster.country_id ( int ) , roller_coaster.length ( real ) , roller_coaster.height ( real ) , roller_coaster.speed ( text ) , roller_coaster.opened ( text ) , roller_coaster.status ( text ) ]\ntable country , columns = [ country.country_id ( int | primary key ) , country.name ( text ) , country.population ( int ) , country.area ( int ) , country.languages ( text ) ]\nforeign keys :\nroller_coaster.country_id = country.country_id\nmatched contents : None",
  "database schema :\ntable captain , columns = [ captain.captain_id ( int | primary key ) , captain.name ( text ) , captain.ship_id ( int ) , captain.age ( text ) , captain.class ( text ) , captain.rank ( text ) ]\ntable ship , columns = [ ship.ship_id ( int | primary key ) , ship.name ( text ) , ship.type ( text ) , ship.built_year ( real ) , ship.class ( text ) , ship.flag ( text ) ]\nforeign keys :\ncaptain.ship_id = ship.ship_id\nmatched contents : None",
  "database schema :\ntable driver , columns = [ driver.driver_id ( int | primary key ) , driver.name ( text ) , driver.party ( text ) , driver.home_city ( text ) , driver.age ( int ) ]\ntable school , columns = [ school.school_id ( int | primary key ) , school.grade ( text ) , school.school ( text ) , school.location ( text ) , school.type ( text ) ]\ntable school_bus , columns = [ school_bus.school_id ( int | primary key ) , school_bus.driver_id ( int | primary key ) , school_bus.years_working ( int ) , school_bus.if_full_time ( bool ) ]\nforeign keys :\nschool_bus.driver_id = driver.driver_id\nschool_bus.school_id = school.school_id\nmatched contents : None",
  "database schema :\ntable airport , columns = [ airport.id ( int | primary key ) , airport.city ( text ) , airport.country ( text ) , airport.iata ( text ) , airport.icao ( text ) , airport.name ( text ) ]\ntable operate_company , columns = [ operate_company.id ( int | primary key ) , operate_company.name ( text ) , operate_company.type ( text ) , operate_company.principal_activities ( text ) , operate_company.incorporated_in ( text ) , operate_company.group_equity_shareholding ( real ) ]\ntable flight , columns = [ flight.id ( int | primary key ) , flight.vehicle_flight_number ( text ) , flight.date ( text ) , flight.pilot ( text ) , flight.velocity ( real ) , flight.altitude ( real ) , flight.airport_id ( int ) , flight.company_id ( int ) ]\nforeign keys :\nflight.company_id = operate_company.id\nflight.airport_id = airport.id\nmatched contents : None",
  "database schema :\ntable scientists , columns = [ scientists.ssn ( int | primary key ) , scientists.name ( char(30) ) ]\ntable projects , columns = [ projects.code ( char(4) | primary key ) , projects.name ( char(50) ) , projects.hours ( int ) ]\ntable assignedto , columns = [ assignedto.scientist ( int | primary key ) , assignedto.project ( char(4) | primary key ) ]\nforeign keys :\nassignedto.project = projects.code\nassignedto.scientist = scientists.ssn\nmatched contents : None",
  "database schema :\ntable grapes , columns = [ grapes.id ( integer | primary key ) , grapes.grape ( text ) , grapes.color ( text ) ]\ntable appellations , columns = [ appellations.no ( integer | primary key ) , appellations.appelation ( text ) , appellations.county ( text ) , appellations.state ( text ) , appellations.area ( text ) , appellations.isava ( text ) ]\ntable wine , columns = [ wine.no ( integer ) , wine.grape ( text ) , wine.winery ( text ) , wine.appelation ( text ) , wine.state ( text ) , wine.name ( text ) , wine.year ( integer ) , wine.price ( integer ) , wine.score ( integer ) , wine.cases ( integer ) , wine.drink ( text ) ]\nforeign keys :\nwine.appelation = appellations.appelation\nwine.grape = grapes.grape\nmatched contents : None",
  "database schema :\ntable activity , columns = [ activity.actid ( integer | primary key | comment : activity id ) , activity.activity_name ( varchar(25) ) ]\ntable participates_in , columns = [ participates_in.stuid ( integer | comment : student id ) , participates_in.actid ( integer | comment : activity id ) ]\ntable faculty_participates_in , columns = [ faculty_participates_in.facid ( integer | comment : faculty id ) , faculty_participates_in.actid ( integer | comment : activity id ) ]\ntable student , columns = [ student.stuid ( integer | primary key | comment : student id ) , student.lname ( varchar(12) | comment : last name ) , student.fname ( varchar(12) | comment : first name ) , student.age ( integer ) , student.sex ( varchar(1) ) , student.major ( integer ) , student.advisor ( integer ) , student.city_code ( varchar(3) ) ]\ntable faculty , columns = [ faculty.facid ( integer | primary key | comment : faculty id ) , faculty.lname ( varchar(15) | comment : last name ) , faculty.fname ( varchar(15) | comment : first name ) , faculty.rank ( varchar(15) ) , faculty.sex ( varchar(1) ) , faculty.phone ( integer ) , faculty.room ( varchar(5) ) , faculty.building ( varchar(13) ) ]\nforeign keys :\nparticipates_in.actid = activity.actid\nparticipates_in.stuid = student.stuid\nfaculty_participates_in.actid = activity.actid\nfaculty_participates_in.facid = faculty.facid\nmatched contents : None",
  "database schema :\ntable routes , columns = [ routes.rid ( integer | primary key | comment : route id ) , routes.dst_apid ( integer | comment : destination airport id ) , routes.dst_ap ( varchar(4) | comment : destination airport ) , routes.src_apid ( bigint | comment : source airport id ) , routes.src_ap ( varchar(4) | comment : source airport ) , routes.alid ( bigint | comment : airline id ) , routes.airline ( varchar(4) ) , routes.codeshare ( text ) ]\ntable airports , columns = [ airports.apid ( integer | primary key | comment : airport id ) , airports.name ( text ) , airports.city ( text ) , airports.country ( text ) , airports.x ( real ) , airports.y ( real ) , airports.elevation ( bigint ) , airports.iata ( character varchar(3) ) , airports.icao ( character varchar(4) ) ]\ntable airlines , columns = [ airlines.alid ( integer | primary key | comment : airline id ) , airlines.name ( text ) , airlines.iata ( varchar(2) ) , airlines.icao ( varchar(3) ) , airlines.callsign ( text ) , airlines.country ( text ) , airlines.active ( varchar(2) ) ]\nforeign keys :\nroutes.alid = airlines.alid\nroutes.src_apid = airports.apid\nroutes.dst_apid = airports.apid\nmatched contents :\nairports.city ( Goroka )\nairlines.callsign ( CITY )",
  "database schema :\ntable architect , columns = [ architect.id ( text | primary key ) , architect.name ( text ) , architect.nationality ( text ) , architect.gender ( text ) ]\ntable bridge , columns = [ bridge.architect_id ( int ) , bridge.id ( int | primary key ) , bridge.name ( text ) , bridge.location ( text ) , bridge.length_meters ( real ) , bridge.length_feet ( real ) ]\ntable mill , columns = [ mill.architect_id ( int ) , mill.id ( int | primary key ) , mill.location ( text ) , mill.name ( text ) , mill.type ( text ) , mill.built_year ( int ) , mill.notes ( text ) ]\nforeign keys :\nbridge.architect_id = architect.id\nmill.architect_id = architect.id\nmatched contents :\narchitect.gender ( female )",
  "database schema :\ntable book_club , columns = [ book_club.book_club_id ( int | primary key ) , book_club.year ( int ) , book_club.author_or_editor ( text ) , book_club.book_title ( text ) , book_club.publisher ( text ) , book_club.category ( text ) , book_club.result ( text ) ]\ntable movie , columns = [ movie.movie_id ( int | primary key ) , movie.title ( text ) , movie.year ( int ) , movie.director ( text ) , movie.budget_million ( real ) , movie.gross_worldwide ( int ) ]\ntable culture_company , columns = [ culture_company.company_name ( text | primary key ) , culture_company.type ( text ) , culture_company.incorporated_in ( text ) , culture_company.group_equity_shareholding ( real ) , culture_company.book_club_id ( text ) , culture_company.movie_id ( text ) ]\nforeign keys :\nculture_company.movie_id = movie.movie_id\nculture_company.book_club_id = book_club.book_club_id\nmatched contents : None",
  "database schema :\ntable state , columns = [ state.state_name ( text | primary key ) , state.population ( integer ) , state.area ( double ) , state.country_name ( varchar(3) ) , state.capital ( text ) , state.density ( double ) ]\ntable city , columns = [ city.city_name ( text | primary key ) , city.population ( integer ) , city.country_name ( varchar(3) ) , city.state_name ( text | primary key ) ]\ntable border_info , columns = [ border_info.state_name ( text | primary key ) , border_info.border ( text | primary key ) ]\ntable highlow , columns = [ highlow.state_name ( text | primary key ) , highlow.highest_elevation ( text ) , highlow.lowest_point ( text ) , highlow.highest_point ( text ) , highlow.lowest_elevation ( text ) ]\ntable lake , columns = [ lake.lake_name ( text ) , lake.area ( double ) , lake.country_name ( varchar(3) ) , lake.state_name ( text ) ]\ntable mountain , columns = [ mountain.mountain_name ( text | primary key ) , mountain.mountain_altitude ( integer ) , mountain.country_name ( varchar(3) ) , mountain.state_name ( text | primary key ) ]\ntable river , columns = [ river.river_name ( text | primary key ) , river.length ( integer ) , river.country_name ( varchar(3) ) , river.traverse ( text ) ]\nforeign keys :\ncity.state_name = state.state_name\nborder_info.border = state.state_name\nborder_info.state_name = state.state_name\nhighlow.state_name = state.state_name\nmountain.state_name = state.state_name\nriver.traverse = state.state_name\nmatched contents : None",
  "database schema :\ntable venue , columns = [ venue.venueid ( integer | primary key ) , venue.venuename ( varchar(100) ) ]\ntable author , columns = [ author.authorid ( integer | primary key ) , author.authorname ( varchar(50) ) ]\ntable dataset , columns = [ dataset.datasetid ( integer | primary key ) , dataset.datasetname ( varchar(50) ) ]\ntable journal , columns = [ journal.journalid ( integer | primary key ) , journal.journalname ( varchar(100) ) ]\ntable keyphrase , columns = [ keyphrase.keyphraseid ( integer | primary key ) , keyphrase.keyphrasename ( varchar(50) ) ]\ntable paper , columns = [ paper.paperid ( integer | primary key ) , paper.title ( varchar(300) ) , paper.venueid ( integer ) , paper.year ( integer ) , paper.numciting ( integer | comment : number citing ) , paper.numcitedby ( integer | comment : number cited by ) , paper.journalid ( integer ) ]\ntable cite , columns = [ cite.citingpaperid ( integer | primary key ) , cite.citedpaperid ( integer | primary key ) ]\ntable paperdataset , columns = [ paperdataset.paperid ( integer | primary key ) , paperdataset.datasetid ( integer | primary key ) ]\ntable paperkeyphrase , columns = [ paperkeyphrase.paperid ( integer | primary key ) , paperkeyphrase.keyphraseid ( integer | primary key ) ]\ntable writes , columns = [ writes.paperid ( integer | primary key ) , writes.authorid ( integer | primary key ) ]\nforeign keys :\npaper.venueid = venue.venueid\npaper.journalid = journal.journalid\ncite.citingpaperid = paper.paperid\ncite.citedpaperid = paper.paperid\npaperkeyphrase.keyphraseid = keyphrase.keyphraseid\npaperkeyphrase.paperid = paper.paperid\nwrites.authorid = author.authorid\nwrites.paperid = paper.paperid\nmatched contents : None",
  "database schema :\ntable business , columns = [ business.bid ( int | primary key ) , business.business_id ( text ) , business.name ( text ) , business.full_address ( text ) , business.city ( text ) , business.latitude ( text ) , business.longitude ( text ) , business.review_count ( int ) , business.is_open ( int ) , business.rating ( real ) , business.state ( text ) ]\ntable category , columns = [ category.id ( int | primary key ) , category.business_id ( text ) , category.category_name ( text ) ]\ntable user , columns = [ user.uid ( int | primary key ) , user.user_id ( text ) , user.name ( text ) ]\ntable checkin , columns = [ checkin.cid ( int | primary key ) , checkin.business_id ( text ) , checkin.count ( int ) , checkin.day ( text ) ]\ntable neighbourhood , columns = [ neighbourhood.id ( int | primary key ) , neighbourhood.business_id ( text ) , neighbourhood.neighbourhood_name ( text ) ]\ntable review , columns = [ review.rid ( int | primary key ) , review.business_id ( text ) , review.user_id ( text ) , review.rating ( real ) , review.text ( text ) , review.year ( int ) , review.month ( text ) ]\ntable tip , columns = [ tip.tip_id ( int | primary key ) , tip.business_id ( text ) , tip.text ( text ) , tip.user_id ( text ) , tip.likes ( int ) , tip.year ( int ) , tip.month ( text ) ]\nforeign keys :\ncategory.business_id = business.business_id\ncheckin.business_id = business.business_id\nneighbourhood.business_id = business.business_id\nreview.user_id = user.user_id\nreview.business_id = business.business_id\ntip.user_id = user.user_id\ntip.business_id = business.business_id\nmatched contents : None",
  "database schema :\ntable author , columns = [ author.aid ( int | primary key ) , author.homepage ( text ) , author.name ( text ) , author.oid ( int ) ]\ntable conference , columns = [ conference.cid ( int | primary key ) , conference.homepage ( text ) , conference.name ( text ) ]\ntable domain , columns = [ domain.did ( int | primary key ) , domain.name ( text ) ]\ntable domain_author , columns = [ domain_author.aid ( int | primary key ) , domain_author.did ( int | primary key ) ]\ntable domain_conference , columns = [ domain_conference.cid ( int | primary key ) , domain_conference.did ( int | primary key ) ]\ntable journal , columns = [ journal.homepage ( text ) , journal.jid ( int | primary key ) , journal.name ( text ) ]\ntable domain_journal , columns = [ domain_journal.did ( int | primary key ) , domain_journal.jid ( int | primary key ) ]\ntable keyword , columns = [ keyword.keyword ( text ) , keyword.kid ( int | primary key ) ]\ntable domain_keyword , columns = [ domain_keyword.did ( int | primary key ) , domain_keyword.kid ( int | primary key ) ]\ntable publication , columns = [ publication.abstract ( text ) , publication.cid ( text ) , publication.citation_num ( int ) , publication.jid ( int ) , publication.pid ( int | primary key ) , publication.reference_num ( int ) , publication.title ( text ) , publication.year ( int ) ]\ntable domain_publication , columns = [ domain_publication.did ( int | primary key ) , domain_publication.pid ( int | primary key ) ]\ntable organization , columns = [ organization.continent ( text ) , organization.homepage ( text ) , organization.name ( text ) , organization.oid ( int | primary key ) ]\ntable publication_keyword , columns = [ publication_keyword.pid ( int | primary key ) , publication_keyword.kid ( int | primary key ) ]\ntable writes , columns = [ writes.aid ( int | primary key ) , writes.pid ( int | primary key ) ]\ntable cite , columns = [ cite.cited ( int ) , cite.citing ( int ) ]\nforeign keys :\ndomain_author.did = domain.did\ndomain_author.aid = author.aid\ndomain_conference.did = domain.did\ndomain_conference.cid = conference.cid\ndomain_journal.did = domain.did\ndomain_journal.jid = journal.jid\ndomain_keyword.did = domain.did\ndomain_keyword.kid = keyword.kid\npublication.cid = conference.cid\npublication.jid = journal.jid\ndomain_publication.did = domain.did\ndomain_publication.pid = publication.pid\npublication_keyword.kid = keyword.kid\npublication_keyword.pid = publication.pid\nwrites.aid = author.aid\nwrites.pid = publication.pid\ncite.citing = publication.pid\ncite.cited = publication.pid\nmatched contents : None",
  "database schema :\ntable geographic , columns = [ geographic.city_name ( text | primary key ) , geographic.county ( text ) , geographic.region ( text ) ]\ntable restaurant , columns = [ restaurant.id ( int | primary key ) , restaurant.name ( text ) , restaurant.food_type ( text ) , restaurant.city_name ( text ) , restaurant.rating ( real ) ]\ntable location , columns = [ location.restaurant_id ( int | primary key ) , location.house_number ( int ) , location.street_name ( text ) , location.city_name ( text ) ]\nforeign keys :\nrestaurant.city_name = geographic.city_name\nlocation.restaurant_id = restaurant.restaurant_id\nlocation.city_name = geographic.city_name\nmatched contents : None",
  "database schema :\ntable lists , columns = [ lists.user_id ( integer ) , lists.list_id ( integer | primary key ) , lists.list_title ( text ) , lists.list_movie_number ( integer ) , lists.list_update_timestamp_utc ( text ) , lists.list_creation_timestamp_utc ( text ) , lists.list_followers ( integer ) , lists.list_url ( text ) , lists.list_comments ( integer ) , lists.list_description ( text ) , lists.list_cover_image_url ( text ) , lists.list_first_image_url ( text ) , lists.list_second_image_url ( text ) , lists.list_third_image_url ( text ) ]\ntable movies , columns = [ movies.movie_id ( integer | primary key ) , movies.movie_title ( text ) , movies.movie_release_year ( integer ) , movies.movie_url ( text ) , movies.movie_title_language ( text ) , movies.movie_popularity ( integer ) , movies.movie_image_url ( text ) , movies.director_id ( text ) , movies.director_name ( text ) , movies.director_url ( text ) ]\ntable ratings_users , columns = [ ratings_users.user_id ( integer ) , ratings_users.rating_date_utc ( text ) , ratings_users.user_trialist ( integer ) , ratings_users.user_subscriber ( integer ) , ratings_users.user_avatar_image_url ( text ) , ratings_users.user_cover_image_url ( text ) , ratings_users.user_eligible_for_trial ( integer ) , ratings_users.user_has_payment_method ( integer ) ]\ntable lists_users , columns = [ lists_users.user_id ( integer | primary key ) , lists_users.list_id ( integer | primary key ) , lists_users.list_update_date_utc ( text ) , lists_users.list_creation_date_utc ( text ) , lists_users.user_trialist ( integer ) , lists_users.user_subscriber ( integer ) , lists_users.user_avatar_image_url ( text ) , lists_users.user_cover_image_url ( text ) , lists_users.user_eligible_for_trial ( text ) , lists_users.user_has_payment_method ( text ) ]\ntable ratings , columns = [ ratings.movie_id ( integer ) , ratings.rating_id ( integer ) , ratings.rating_url ( text ) , ratings.rating_score ( integer ) , ratings.rating_timestamp_utc ( text ) , ratings.critic ( text ) , ratings.critic_likes ( integer ) , ratings.critic_comments ( integer ) , ratings.user_id ( integer ) , ratings.user_trialist ( integer ) , ratings.user_subscriber ( integer ) , ratings.user_eligible_for_trial ( integer ) , ratings.user_has_payment_method ( integer ) ]\nforeign keys :\nlists.user_id = lists_users.user_id\nratings_users.user_id = lists_users.user_id\nlists_users.user_id = lists.user_id\nlists_users.list_id = lists.list_id\nratings.user_id = ratings_users.user_id\nratings.rating_id = ratings.rating_id\nratings.user_id = lists_users.user_id\nratings.movie_id = movies.movie_id\nmatched contents :\nlists.list_id ( 1945 )\nlists.list_title ( 1945 , Sort , Titles. , title , Title )\nmovies.movie_id ( 1945 )\nmovies.movie_title ( Year , 1945 , Order , The Years , Release )\nmovies.movie_release_year ( 1945 )\nlists_users.list_id ( 1945 )\nratings.movie_id ( 1945 )\nratings.rating_id ( 1945 )",
  "database schema :\ntable method , columns = [ method.id ( integer | primary key ) , method.name ( text ) , method.fullcomment ( text ) , method.summary ( text ) , method.apicalls ( text ) , method.commentisxml ( integer ) , method.sampledat ( integer ) , method.solutionid ( integer ) , method.lang ( text | comment : language ) , method.nametokenized ( text ) ]\ntable methodparameter , columns = [ methodparameter.id ( integer | primary key ) , methodparameter.methodid ( text ) , methodparameter.type ( text ) , methodparameter.name ( text ) ]\ntable repo , columns = [ repo.id ( integer | primary key ) , repo.url ( text ) , repo.stars ( integer ) , repo.forks ( integer ) , repo.watchers ( integer ) , repo.processedtime ( integer ) ]\ntable solution , columns = [ solution.id ( integer | primary key ) , solution.repoid ( integer | comment : repository id ) , solution.path ( text ) , solution.processedtime ( integer ) , solution.wascompiled ( integer ) ]\nforeign keys : None\nmatched contents :\nmethod.nametokenized ( language code )\nmethodparameter.name ( english , English , many , Referes )",
  "database schema :\ntable cars , columns = [ cars.id ( integer | primary key ) , cars.train_id ( integer ) , cars.position ( integer ) , cars.shape ( text ) , cars.len ( text | comment : length ) , cars.sides ( text ) , cars.roof ( text ) , cars.wheels ( integer ) , cars.load_shape ( text ) , cars.load_num ( integer | comment : load number ) ]\ntable trains , columns = [ trains.id ( integer | primary key ) , trains.direction ( text ) ]\nforeign keys :\ncars.train_id = trains.id\nmatched contents :\ntrains.direction ( east )",
  "database schema :\ntable location , columns = [ location.locationid ( integer | primary key ) , location.country ( text ) , location.state ( text ) , location.statecode ( text ) , location.city ( text ) ]\ntable user , columns = [ user.userid ( text | primary key ) , user.gender ( text ) ]\ntable twitter , columns = [ twitter.tweetid ( text | primary key ) , twitter.weekday ( text ) , twitter.hour ( integer ) , twitter.day ( integer ) , twitter.lang ( text | comment : language ) , twitter.isreshare ( text ) , twitter.reach ( integer ) , twitter.retweetcount ( integer ) , twitter.likes ( integer ) , twitter.klout ( integer ) , twitter.sentiment ( real ) , twitter.text ( text ) , twitter.locationid ( integer ) , twitter.userid ( text ) ]\nforeign keys :\ntwitter.userid = user.userid\ntwitter.locationid = location.locationid\nmatched contents : None",
  "database schema :\ntable app_all , columns = [ app_all.app_id ( integer | primary key ) ]\ntable app_events , columns = [ app_events.event_id ( integer | primary key ) , app_events.app_id ( integer | primary key ) , app_events.is_installed ( integer ) , app_events.is_active ( integer ) ]\ntable app_events_relevant , columns = [ app_events_relevant.event_id ( integer | primary key ) , app_events_relevant.app_id ( integer | primary key ) , app_events_relevant.is_installed ( integer ) , app_events_relevant.is_active ( integer ) ]\ntable app_labels , columns = [ app_labels.app_id ( integer ) , app_labels.label_id ( integer ) ]\ntable events , columns = [ events.event_id ( integer | primary key ) , events.device_id ( integer ) , events.timestamp ( datetime ) , events.longitude ( real ) , events.latitude ( real ) ]\ntable events_relevant , columns = [ events_relevant.event_id ( integer | primary key ) , events_relevant.device_id ( integer ) , events_relevant.timestamp ( datetime ) , events_relevant.longitude ( real ) , events_relevant.latitude ( real ) ]\ntable gender_age , columns = [ gender_age.device_id ( integer | primary key ) , gender_age.gender ( text ) , gender_age.age ( integer ) , gender_age.group ( text ) ]\ntable gender_age_test , columns = [ gender_age_test.device_id ( integer | primary key ) ]\ntable gender_age_train , columns = [ gender_age_train.device_id ( integer | primary key ) , gender_age_train.gender ( text ) , gender_age_train.age ( integer ) , gender_age_train.group ( text ) ]\ntable label_categories , columns = [ label_categories.label_id ( integer | primary key ) , label_categories.category ( text ) ]\ntable phone_brand_device_model2 , columns = [ phone_brand_device_model2.device_id ( integer | primary key ) , phone_brand_device_model2.phone_brand ( text | primary key ) , phone_brand_device_model2.device_model ( text | primary key ) ]\ntable sample_submission , columns = [ sample_submission.device_id ( integer | primary key ) , sample_submission.`f23-` ( real ) , sample_submission.`f24-26` ( real ) , sample_submission.`f27-28` ( real ) , sample_submission.`f29-32` ( real ) , sample_submission.`f33-42` ( real ) , sample_submission.f43+ ( real ) , sample_submission.`m22-` ( real ) , sample_submission.`m23-26` ( real ) , sample_submission.`m27-28` ( real ) , sample_submission.`m29-31` ( real ) , sample_submission.`m32-38` ( real ) , sample_submission.m39+ ( real ) ]\nforeign keys :\napp_events.event_id = events.event_id\napp_events_relevant.app_id = app_all.app_id\napp_events_relevant.event_id = events_relevant.event_id\napp_labels.app_id = app_all.app_id\napp_labels.label_id = label_categories.label_id\nevents_relevant.device_id = gender_age.device_id\ngender_age.device_id = phone_brand_device_model2.device_id\nmatched contents : None",
  "database schema :\ntable episode , columns = [ episode.episode_id ( text | primary key ) , episode.series ( text ) , episode.season ( integer ) , episode.episode ( integer ) , episode.number_in_series ( integer ) , episode.title ( text ) , episode.summary ( text ) , episode.air_date ( date ) , episode.episode_image ( text ) , episode.rating ( real ) , episode.votes ( integer ) ]\ntable keyword , columns = [ keyword.episode_id ( text | primary key ) , keyword.keyword ( text | primary key ) ]\ntable person , columns = [ person.person_id ( text | primary key ) , person.name ( text ) , person.birthdate ( date ) , person.birth_name ( text ) , person.birth_place ( text ) , person.birth_region ( text ) , person.birth_country ( text ) , person.height_meters ( real ) , person.nickname ( text ) ]\ntable award , columns = [ award.award_id ( integer | primary key ) , award.organization ( text ) , award.year ( integer ) , award.award_category ( text ) , award.award ( text ) , award.series ( text ) , award.episode_id ( text ) , award.person_id ( text ) , award.role ( text ) , award.result ( text ) ]\ntable credit , columns = [ credit.episode_id ( text | primary key ) , credit.person_id ( text | primary key ) , credit.category ( text ) , credit.role ( text ) , credit.credited ( text ) ]\ntable vote , columns = [ vote.episode_id ( text ) , vote.stars ( integer ) , vote.votes ( integer ) , vote.percent ( real ) ]\nforeign keys :\nkeyword.episode_id = episode.episode_id\naward.person_id = person.person_id\naward.episode_id = episode.episode_id\ncredit.person_id = person.person_id\ncredit.episode_id = episode.episode_id\nvote.episode_id = episode.episode_id\nmatched contents :\nepisode.episode ( 1 )\nepisode.title ( Refuge: Part 1 , Refuge: Part 2 )\nvote.stars ( 1 )\nvote.votes ( 1 )",
  "database schema :\ntable all_prevalences , columns = [ all_prevalences.item ( text | primary key ) , all_prevalences.`population type` ( text ) , all_prevalences.occurrences ( integer ) , all_prevalences.`population count` ( integer ) , all_prevalences.`prevalence rate` ( real ) , all_prevalences.`prevalence percentage` ( real ) ]\ntable patients , columns = [ patients.patient ( text | primary key ) , patients.birthdate ( date ) , patients.deathdate ( date ) , patients.ssn ( text | comment : social security number ) , patients.drivers ( text ) , patients.passport ( text ) , patients.prefix ( text ) , patients.first ( text ) , patients.last ( text ) , patients.suffix ( text ) , patients.maiden ( text ) , patients.marital ( text ) , patients.race ( text ) , patients.ethnicity ( text ) , patients.gender ( text ) , patients.birthplace ( text ) , patients.address ( text ) ]\ntable encounters , columns = [ encounters.id ( text | primary key ) , encounters.date ( date ) , encounters.patient ( text ) , encounters.code ( integer ) , encounters.description ( text ) , encounters.reasoncode ( integer ) , encounters.reasondescription ( text ) ]\ntable allergies , columns = [ allergies.start ( text ) , allergies.stop ( text ) , allergies.patient ( text | primary key ) , allergies.encounter ( text | primary key ) , allergies.code ( integer | primary key ) , allergies.description ( text ) ]\ntable careplans , columns = [ careplans.id ( text ) , careplans.start ( date ) , careplans.stop ( date ) , careplans.patient ( text ) , careplans.encounter ( text ) , careplans.code ( real ) , careplans.description ( text ) , careplans.reasoncode ( integer ) , careplans.reasondescription ( text ) ]\ntable conditions , columns = [ conditions.start ( date ) , conditions.stop ( date ) , conditions.patient ( text ) , conditions.encounter ( text ) , conditions.code ( integer ) , conditions.description ( text ) ]\ntable immunizations , columns = [ immunizations.date ( date | primary key ) , immunizations.patient ( text | primary key ) , immunizations.encounter ( text | primary key ) , immunizations.code ( integer | primary key ) , immunizations.description ( text ) ]\ntable medications , columns = [ medications.start ( date | primary key ) , medications.stop ( date ) , medications.patient ( text | primary key ) , medications.encounter ( text | primary key ) , medications.code ( integer | primary key ) , medications.description ( text ) , medications.reasoncode ( integer ) , medications.reasondescription ( text ) ]\ntable observations , columns = [ observations.date ( date ) , observations.patient ( text ) , observations.encounter ( text ) , observations.code ( text ) , observations.description ( text ) , observations.value ( real ) , observations.units ( text ) ]\ntable procedures , columns = [ procedures.date ( date ) , procedures.patient ( text ) , procedures.encounter ( text ) , procedures.code ( integer ) , procedures.description ( text ) , procedures.reasoncode ( integer ) , procedures.reasondescription ( text ) ]\ntable claims , columns = [ claims.id ( text | primary key ) , claims.patient ( text ) , claims.billableperiod ( date ) , claims.organization ( text ) , claims.encounter ( text ) , claims.diagnosis ( text ) , claims.total ( integer ) ]\nforeign keys :\nencounters.patient = patients.patient\nallergies.patient = patients.patient\nallergies.encounter = encounters.id\ncareplans.patient = patients.patient\ncareplans.encounter = encounters.id\nconditions.description = all_prevalences.item\nconditions.patient = patients.patient\nconditions.encounter = encounters.id\nimmunizations.patient = patients.patient\nimmunizations.encounter = encounters.id\nmedications.patient = patients.patient\nmedications.encounter = encounters.id\nobservations.patient = patients.patient\nobservations.encounter = encounters.id\nprocedures.patient = patients.patient\nprocedures.encounter = encounters.id\nmatched contents :\npatients.first ( Elly )\npatients.last ( Koss )\npatients.maiden ( Koss )\nencounters.date ( 2008-03-11 )\ncareplans.start ( 2008-03-11 )\nconditions.start ( 2008-03-11 )\nimmunizations.date ( 2008-03-11 )\nobservations.description ( Body Height )\nclaims.billableperiod ( 2008-03-11 )",
  "database schema :\ntable offices , columns = [ offices.officecode ( text | primary key ) , offices.city ( text ) , offices.phone ( text ) , offices.addressline1 ( text ) , offices.addressline2 ( text ) , offices.state ( text ) , offices.country ( text ) , offices.postalcode ( text ) , offices.territory ( text ) ]\ntable employees , columns = [ employees.employeenumber ( integer | primary key ) , employees.lastname ( text ) , employees.firstname ( text ) , employees.extension ( text ) , employees.email ( text ) , employees.officecode ( text ) , employees.reportsto ( integer ) , employees.jobtitle ( text ) ]\ntable customers , columns = [ customers.customernumber ( integer | primary key ) , customers.customername ( text ) , customers.contactlastname ( text ) , customers.contactfirstname ( text ) , customers.phone ( text ) , customers.addressline1 ( text ) , customers.addressline2 ( text ) , customers.city ( text ) , customers.state ( text ) , customers.postalcode ( text ) , customers.country ( text ) , customers.salesrepemployeenumber ( integer | comment : sales representative employee number ) , customers.creditlimit ( real ) ]\ntable orders , columns = [ orders.ordernumber ( integer | primary key ) , orders.orderdate ( date ) , orders.requireddate ( date ) , orders.shippeddate ( date ) , orders.status ( text ) , orders.comments ( text ) , orders.customernumber ( integer ) ]\ntable payments , columns = [ payments.customernumber ( integer | primary key ) , payments.checknumber ( text | primary key ) , payments.paymentdate ( date ) , payments.amount ( real ) ]\ntable productlines , columns = [ productlines.productline ( text | primary key ) , productlines.textdescription ( text ) , productlines.htmldescription ( text ) , productlines.image ( blob ) ]\ntable products , columns = [ products.productcode ( text | primary key ) , products.productname ( text ) , products.productline ( text ) , products.productscale ( text ) , products.productvendor ( text ) , products.productdescription ( text ) , products.quantityinstock ( integer ) , products.buyprice ( real ) , products.msrp ( real | comment : manufacturer suggested retail price ) ]\ntable orderdetails , columns = [ orderdetails.ordernumber ( integer | primary key ) , orderdetails.productcode ( text | primary key ) , orderdetails.quantityordered ( integer ) , orderdetails.priceeach ( real | comment : price for each ) , orderdetails.orderlinenumber ( integer ) ]\nforeign keys :\nemployees.reportsto = employees.employeenumber\nemployees.officecode = offices.officecode\ncustomers.salesrepemployeenumber = employees.employeenumber\norders.customernumber = customers.customernumber\npayments.customernumber = customers.customernumber\nproducts.productline = productlines.productline\nmatched contents : None",
  "database schema :\ntable batting_style , columns = [ batting_style.batting_id ( integer | primary key ) , batting_style.batting_hand ( text ) ]\ntable bowling_style , columns = [ bowling_style.bowling_id ( integer | primary key ) , bowling_style.bowling_skill ( text ) ]\ntable city , columns = [ city.city_id ( integer | primary key ) , city.city_name ( text ) , city.country_id ( integer ) ]\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country_name ( text ) ]\ntable extra_type , columns = [ extra_type.extra_id ( integer | primary key ) , extra_type.extra_name ( text ) ]\ntable extra_runs , columns = [ extra_runs.match_id ( integer | primary key ) , extra_runs.over_id ( integer | primary key ) , extra_runs.ball_id ( integer | primary key ) , extra_runs.extra_type_id ( integer ) , extra_runs.extra_runs ( integer ) , extra_runs.innings_no ( integer | primary key | comment : innings number ) ]\ntable out_type , columns = [ out_type.out_id ( integer | primary key ) , out_type.out_name ( text ) ]\ntable outcome , columns = [ outcome.outcome_id ( integer | primary key ) , outcome.outcome_type ( text ) ]\ntable player , columns = [ player.player_id ( integer | primary key ) , player.player_name ( text ) , player.dob ( date | comment : date of birth ) , player.batting_hand ( integer ) , player.bowling_skill ( integer ) , player.country_name ( integer ) ]\ntable rolee , columns = [ rolee.role_id ( integer | primary key ) , rolee.role_desc ( text | comment : role description ) ]\ntable season , columns = [ season.season_id ( integer | primary key ) , season.man_of_the_series ( integer ) , season.orange_cap ( integer ) , season.purple_cap ( integer ) , season.season_year ( integer ) ]\ntable team , columns = [ team.team_id ( integer | primary key ) , team.team_name ( text ) ]\ntable toss_decision , columns = [ toss_decision.toss_id ( integer | primary key ) , toss_decision.toss_name ( text ) ]\ntable umpire , columns = [ umpire.umpire_id ( integer | primary key ) , umpire.umpire_name ( text ) , umpire.umpire_country ( integer ) ]\ntable venue , columns = [ venue.venue_id ( integer | primary key ) , venue.venue_name ( text ) , venue.city_id ( integer ) ]\ntable win_by , columns = [ win_by.win_id ( integer | primary key | comment : winning id ) , win_by.win_type ( text | comment : winning type ) ]\ntable match , columns = [ match.match_id ( integer | primary key ) , match.team_1 ( integer ) , match.team_2 ( integer ) , match.match_date ( date ) , match.season_id ( integer ) , match.venue_id ( integer ) , match.toss_winner ( integer ) , match.toss_decide ( integer ) , match.win_type ( integer | comment : winning type ) , match.win_margin ( integer | comment : winning margin ) , match.outcome_type ( integer ) , match.match_winner ( integer ) , match.man_of_the_match ( integer ) ]\ntable ball_by_ball , columns = [ ball_by_ball.match_id ( integer | primary key ) , ball_by_ball.over_id ( integer | primary key ) , ball_by_ball.ball_id ( integer | primary key ) , ball_by_ball.innings_no ( integer | primary key | comment : innings number ) , ball_by_ball.team_batting ( integer ) , ball_by_ball.team_bowling ( integer ) , ball_by_ball.striker_batting_position ( integer ) , ball_by_ball.striker ( integer ) , ball_by_ball.non_striker ( integer ) , ball_by_ball.bowler ( integer ) ]\ntable batsman_scored , columns = [ batsman_scored.match_id ( integer | primary key ) , batsman_scored.over_id ( integer | primary key ) , batsman_scored.ball_id ( integer | primary key ) , batsman_scored.runs_scored ( integer ) , batsman_scored.innings_no ( integer | primary key | comment : innings number ) ]\ntable player_match , columns = [ player_match.match_id ( integer | primary key ) , player_match.player_id ( integer | primary key ) , player_match.role_id ( integer | primary key ) , player_match.team_id ( integer ) ]\ntable wicket_taken , columns = [ wicket_taken.match_id ( integer | primary key ) , wicket_taken.over_id ( integer | primary key ) , wicket_taken.ball_id ( integer | primary key ) , wicket_taken.player_out ( integer ) , wicket_taken.kind_out ( integer ) , wicket_taken.fielders ( integer ) , wicket_taken.innings_no ( integer | primary key | comment : innings number ) ]\nforeign keys :\ncountry.country_id = country.country_id\nextra_runs.extra_type_id = extra_type.extra_id\nplayer.country_name = country.country_id\nplayer.bowling_skill = bowling_style.bowling_id\nplayer.batting_hand = batting_style.batting_id\numpire.umpire_country = country.country_id\nvenue.city_id = city.city_id\nmatch.man_of_the_match = player.player_id\nmatch.match_winner = team.team_id\nmatch.outcome_type = out_type.out_id\nmatch.win_type = win_by.win_id\nmatch.toss_decide = toss_decision.toss_id\nmatch.toss_winner = team.team_id\nmatch.venue_id = venue.venue_id\nmatch.season_id = season.season_id\nmatch.team_2 = team.team_id\nmatch.team_1 = team.team_id\nball_by_ball.match_id = match.match_id\nbatsman_scored.match_id = match.match_id\nplayer_match.role_id = rolee.role_id\nplayer_match.team_id = team.team_id\nplayer_match.player_id = player.player_id\nplayer_match.match_id = match.match_id\nwicket_taken.fielders = player.player_id\nwicket_taken.kind_out = out_type.out_id\nwicket_taken.player_out = player.player_id\nwicket_taken.match_id = match.match_id\nmatched contents :\nrolee.role_desc ( Player )\nball_by_ball.over_id ( 4 )\nball_by_ball.ball_id ( 4 )\nball_by_ball.innings_no ( 4 )\nball_by_ball.team_batting ( 4 )\nball_by_ball.team_bowling ( 4 )\nball_by_ball.striker_batting_position ( 4 )\nball_by_ball.striker ( 4 )\nball_by_ball.non_striker ( 4 )\nball_by_ball.bowler ( 4 )\nbatsman_scored.ball_id ( 4 )",
  "database schema :\ntable torrents , columns = [ torrents.groupname ( text ) , torrents.totalsnatched ( integer ) , torrents.artist ( text ) , torrents.groupyear ( integer ) , torrents.releasetype ( text ) , torrents.groupid ( integer ) , torrents.id ( integer | primary key ) ]\ntable tags , columns = [ tags.index ( integer | primary key ) , tags.id ( integer ) , tags.tag ( text ) ]\nforeign keys : None\nmatched contents :\ntorrents.groupname ( the release , the single , released , release , artist , singles , titled )\ntorrents.totalsnatched ( 239 )\ntorrents.releasetype ( single )\ntorrents.id ( 239 )\ntags.index ( 239 )\ntags.id ( 239 )\ntags.tag ( single )",
  "database schema :\ntable users , columns = [ users.userid ( integer | primary key ) , users.age ( text ) , users.u_gender ( text | comment : user gender ) , users.occupation ( text ) ]\ntable directors , columns = [ directors.directorid ( integer | primary key ) , directors.d_quality ( integer | comment : director quality ) , directors.avg_revenue ( integer | comment : average revenue ) ]\ntable actors , columns = [ actors.actorid ( integer | primary key ) , actors.a_gender ( text | comment : actor gender ) , actors.a_quality ( integer | comment : actor quality ) ]\ntable movies , columns = [ movies.movieid ( integer | primary key ) , movies.year ( integer ) , movies.isenglish ( text ) , movies.country ( text ) , movies.runningtime ( integer ) ]\ntable movies2actors , columns = [ movies2actors.movieid ( integer | primary key ) , movies2actors.actorid ( integer | primary key ) , movies2actors.cast_num ( integer | comment : cast number ) ]\ntable movies2directors , columns = [ movies2directors.movieid ( integer | primary key ) , movies2directors.directorid ( integer | primary key ) , movies2directors.genre ( text ) ]\ntable u2base , columns = [ u2base.userid ( integer | primary key ) , u2base.movieid ( integer | primary key ) , u2base.rating ( text ) ]\nforeign keys : None\nmatched contents :\nusers.userid ( 4 )\nusers.occupation ( 4 )\ndirectors.d_quality ( 4 )\ndirectors.avg_revenue ( 4 )\nactors.actorid ( 4 )\nactors.a_quality ( 4 )\nmovies.year ( 4 )\nmovies2actors.actorid ( 4 )\nu2base.userid ( 4 )\nu2base.rating ( 4 )",
  "database schema :\ntable incidents , columns = [ incidents.case_number ( text | primary key ) , incidents.date ( date ) , incidents.location ( text ) , incidents.subject_statuses ( text ) , incidents.subject_weapon ( text ) , incidents.subjects ( text ) , incidents.subject_count ( integer ) , incidents.officers ( text ) ]\ntable officers , columns = [ officers.case_number ( text ) , officers.race ( text ) , officers.gender ( text ) , officers.last_name ( text ) , officers.first_name ( text ) , officers.full_name ( text ) ]\ntable subjects , columns = [ subjects.case_number ( text ) , subjects.race ( text ) , subjects.gender ( text ) , subjects.last_name ( text ) , subjects.first_name ( text ) , subjects.full_name ( text ) ]\nforeign keys :\nofficers.case_number = incidents.case_number\nsubjects.case_number = incidents.case_number\nmatched contents :\nofficers.last_name ( White )\nsubjects.last_name ( White )",
  "database schema :\ntable classification , columns = [ classification.geneid ( text | primary key ) , classification.localization ( text ) ]\ntable genes , columns = [ genes.geneid ( text ) , genes.essential ( text ) , genes.class ( text ) , genes.complex ( text ) , genes.phenotype ( text ) , genes.motif ( text ) , genes.chromosome ( integer ) , genes.function ( text ) , genes.localization ( text ) ]\ntable interactions , columns = [ interactions.geneid1 ( text | primary key ) , interactions.geneid2 ( text | primary key ) , interactions.type ( text ) , interactions.expression_corr ( real | comment : expression correlation score ) ]\nforeign keys :\ngenes.geneid = classification.geneid\ninteractions.geneid2 = classification.geneid\ninteractions.geneid1 = classification.geneid\nmatched contents :\nclassification.localization ( plasma membrane )\ngenes.localization ( plasma membrane )",
  "database schema :\ntable playstore , columns = [ playstore.app ( text ) , playstore.category ( text ) , playstore.rating ( real ) , playstore.reviews ( integer ) , playstore.size ( text ) , playstore.installs ( text ) , playstore.type ( text ) , playstore.price ( text ) , playstore.`content rating` ( text ) , playstore.genres ( text ) ]\ntable user_reviews , columns = [ user_reviews.app ( text ) , user_reviews.translated_review ( text ) , user_reviews.sentiment ( text ) , user_reviews.sentiment_polarity ( text ) , user_reviews.sentiment_subjectivity ( text ) ]\nforeign keys :\nuser_reviews.app = playstore.app\nmatched contents :\nplaystore.reviews ( 31 )\nuser_reviews.sentiment ( Positive )",
  "database schema :\ntable divisions , columns = [ divisions.division ( text | primary key ) , divisions.name ( text ) , divisions.country ( text ) ]\ntable matchs , columns = [ matchs.div ( text | comment : division ) , matchs.date ( date ) , matchs.hometeam ( text ) , matchs.awayteam ( text ) , matchs.fthg ( integer | comment : final-time home-team goals ) , matchs.ftag ( integer | comment : final-time away-team goals ) , matchs.ftr ( text | comment : final-time results ) , matchs.season ( integer ) ]\nforeign keys :\nmatchs.div = divisions.division\nmatched contents :\nmatchs.hometeam ( Ebbsfleet )\nmatchs.awayteam ( Ebbsfleet )\nmatchs.season ( 2008 )",
  "database schema :\ntable awards_players , columns = [ awards_players.playerid ( text | primary key ) , awards_players.award ( text | primary key ) , awards_players.year ( integer | primary key ) , awards_players.lgid ( text | comment : league id ) , awards_players.note ( text ) , awards_players.pos ( text | comment : position ) ]\ntable coaches , columns = [ coaches.coachid ( text | primary key ) , coaches.year ( integer | primary key ) , coaches.tmid ( text | primary key | comment : team id ) , coaches.lgid ( text | comment : league id ) , coaches.stint ( integer | primary key ) , coaches.won ( integer ) , coaches.lost ( integer ) , coaches.post_wins ( integer | comment : post season wins ) , coaches.post_losses ( integer | comment : post season losses ) ]\ntable draft , columns = [ draft.id ( integer | primary key ) , draft.draftyear ( integer ) , draft.draftround ( integer ) , draft.draftselection ( integer | comment : league id ) , draft.draftoverall ( integer | comment : draft overall rank ) , draft.tmid ( text | comment : team id ) , draft.firstname ( text ) , draft.lastname ( text ) , draft.suffixname ( text ) , draft.playerid ( text ) , draft.draftfrom ( text ) , draft.lgid ( text | comment : league id ) ]\ntable player_allstar , columns = [ player_allstar.playerid ( text | primary key ) , player_allstar.last_name ( text ) , player_allstar.first_name ( text ) , player_allstar.season_id ( integer | primary key ) , player_allstar.conference ( text ) , player_allstar.league_id ( text ) , player_allstar.games_played ( integer ) , player_allstar.minutes ( integer ) , player_allstar.points ( integer ) , player_allstar.o_rebounds ( integer | comment : offense rebounds ) , player_allstar.d_rebounds ( integer | comment : defense rebounds ) , player_allstar.rebounds ( integer ) , player_allstar.assists ( integer | comment : assistants ) , player_allstar.steals ( integer ) , player_allstar.blocks ( integer ) , player_allstar.turnovers ( integer ) , player_allstar.personal_fouls ( integer ) , player_allstar.fg_attempted ( integer | comment : field goal attempted ) , player_allstar.fg_made ( integer | comment : field goal made ) , player_allstar.ft_attempted ( integer | comment : free throw attempted ) , player_allstar.ft_made ( integer | comment : free throw made ) , player_allstar.three_attempted ( integer | comment : three point attempted ) , player_allstar.three_made ( integer | comment : three point made ) ]\ntable players , columns = [ players.playerid ( text | primary key ) , players.usefirst ( text | comment : use first name ) , players.firstname ( text ) , players.middlename ( text ) , players.lastname ( text ) , players.namegiven ( text ) , players.fullgivenname ( text ) , players.namesuffix ( text ) , players.namenick ( text | comment : nick name ) , players.pos ( text | comment : position ) , players.firstseason ( integer ) , players.lastseason ( integer ) , players.height ( real ) , players.weight ( integer ) , players.college ( text ) , players.collegeother ( text ) , players.birthdate ( date ) , players.birthcity ( text ) , players.birthstate ( text ) , players.birthcountry ( text ) , players.highschool ( text ) , players.hscity ( text | comment : high school city ) , players.hsstate ( text | comment : high school state ) , players.hscountry ( text | comment : high school country ) , players.deathdate ( date ) , players.race ( text ) ]\ntable teams , columns = [ teams.year ( integer | primary key ) , teams.lgid ( text | comment : league id ) , teams.tmid ( text | primary key | comment : team id ) , teams.franchid ( text ) , teams.confid ( text ) , teams.divid ( text | comment : division id ) , teams.rank ( integer ) , teams.confrank ( integer ) , teams.playoff ( text ) , teams.name ( text ) , teams.o_fgm ( integer | comment : offense field goal made ) , teams.o_ftm ( integer | comment : offense free throw made ) , teams.o_pts ( integer | comment : offense points ) , teams.d_pts ( integer | comment : defense points ) , teams.homewon ( integer | comment : home wins ) , teams.homelost ( integer | comment : home loses ) , teams.awaywon ( integer | comment : away wins ) , teams.awaylost ( integer | comment : away loses ) , teams.won ( integer ) , teams.lost ( integer ) , teams.games ( integer ) , teams.arena ( text ) ]\ntable awards_coaches , columns = [ awards_coaches.id ( integer | primary key ) , awards_coaches.year ( integer ) , awards_coaches.coachid ( text ) , awards_coaches.award ( text ) , awards_coaches.lgid ( text | comment : league id ) , awards_coaches.note ( text ) ]\ntable players_teams , columns = [ players_teams.id ( integer | primary key ) , players_teams.playerid ( text ) , players_teams.year ( integer ) , players_teams.stint ( integer ) , players_teams.tmid ( text | comment : team id ) , players_teams.lgid ( text ) , players_teams.gp ( integer | comment : game presentatons ) , players_teams.gs ( integer | comment : game starting ) , players_teams.minutes ( integer ) , players_teams.points ( integer ) , players_teams.orebounds ( integer | comment : offense rebounds ) , players_teams.drebounds ( integer | comment : defense rebounds ) , players_teams.rebounds ( integer ) , players_teams.assists ( integer | comment : assistants ) , players_teams.steals ( integer ) , players_teams.blocks ( integer ) , players_teams.turnovers ( integer ) , players_teams.pf ( integer | comment : personal fouls ) , players_teams.fgattempted ( integer | comment : field goal attempted ) , players_teams.fgmade ( integer | comment : field goal made ) , players_teams.ftattempted ( integer | comment : free throw attempted ) , players_teams.ftmade ( integer | comment : free throw made ) , players_teams.threeattempted ( integer | comment : three point attempted ) , players_teams.threemade ( integer | comment : three point made ) , players_teams.postgp ( integer | comment : post season game presentations ) , players_teams.postgs ( integer | comment : post season game starting ) , players_teams.postminutes ( integer | comment : post season minutes ) , players_teams.postpoints ( integer | comment : post season points ) , players_teams.postorebounds ( integer | comment : post season offense rebounds ) , players_teams.postdrebounds ( integer | comment : post season defense rebounds ) , players_teams.postrebounds ( integer | comment : post season defense rebounds ) , players_teams.postassists ( integer | comment : post season assistants ) , players_teams.poststeals ( integer | comment : post season steals ) , players_teams.postblocks ( integer | comment : post season blocks ) , players_teams.postturnovers ( integer | comment : post season turnovers ) , players_teams.postpf ( integer | comment : post season personal fouls ) , players_teams.postfgattempted ( integer | comment : post season field goal attempted ) , players_teams.postfgmade ( integer | comment : post season field goal made ) , players_teams.postftattempted ( integer | comment : post season field free throw attempted ) , players_teams.postftmade ( integer | comment : post season free throw made ) , players_teams.postthreeattempted ( integer | comment : post season three point attempted ) , players_teams.postthreemade ( integer | comment : post season three point made ) , players_teams.note ( text ) ]\ntable series_post , columns = [ series_post.id ( integer | primary key ) , series_post.year ( integer ) , series_post.round ( text ) , series_post.series ( text ) , series_post.tmidwinner ( text | comment : team id winner ) , series_post.lgidwinner ( text | comment : league id winner ) , series_post.tmidloser ( text | comment : team id loser ) , series_post.lgidloser ( text | comment : league id loser ) , series_post.w ( integer | comment : wins ) , series_post.l ( integer | comment : loses ) ]\nforeign keys :\nawards_players.playerid = players.playerid\ncoaches.tmid = teams.tmid\ncoaches.year = teams.year\ndraft.tmid = teams.tmid\ndraft.draftyear = teams.year\nplayer_allstar.playerid = players.playerid\nawards_coaches.coachid = coaches.coachid\nawards_coaches.year = coaches.year\nplayers_teams.tmid = teams.tmid\nplayers_teams.year = teams.year\nseries_post.tmidloser = teams.tmid\nseries_post.year = teams.year\nseries_post.tmidwinner = teams.tmid\nseries_post.year = teams.year\nmatched contents : None",
  "database schema :\ntable chapters , columns = [ chapters.id ( integer | primary key ) , chapters.act ( integer ) , chapters.scene ( integer ) , chapters.description ( text ) , chapters.work_id ( integer ) ]\ntable characters , columns = [ characters.id ( integer | primary key ) , characters.charname ( text ) , characters.abbrev ( text | comment : abbreviation ) , characters.description ( text ) ]\ntable paragraphs , columns = [ paragraphs.id ( integer | primary key ) , paragraphs.paragraphnum ( integer | comment : paragraph number ) , paragraphs.plaintext ( text ) , paragraphs.character_id ( integer ) , paragraphs.chapter_id ( integer ) ]\ntable works , columns = [ works.id ( integer | primary key ) , works.title ( text ) , works.longtitle ( text ) , works.date ( integer | comment : character id ) , works.genretype ( text ) ]\nforeign keys : None\nmatched contents :\nparagraphs.paragraphnum ( 1602 )\nworks.date ( 1602 )",
  "database schema :\ntable essays , columns = [ essays.projectid ( text ) , essays.teacher_acctid ( text ) , essays.title ( text ) , essays.short_description ( text ) , essays.need_statement ( text ) , essays.essay ( text ) ]\ntable projects , columns = [ projects.projectid ( text | primary key ) , projects.teacher_acctid ( text ) , projects.schoolid ( text ) , projects.school_ncesid ( text | comment : school national center for education statistics id ) , projects.school_latitude ( real ) , projects.school_longitude ( real ) , projects.school_city ( text ) , projects.school_state ( text ) , projects.school_zip ( integer ) , projects.school_metro ( text ) , projects.school_district ( text ) , projects.school_county ( text ) , projects.school_charter ( text ) , projects.school_magnet ( text ) , projects.school_year_round ( text ) , projects.school_nlns ( text | comment : school nonleafy normal stature ) , projects.school_kipp ( text | comment : school knowledge is power program ) , projects.school_charter_ready_promise ( text ) , projects.teacher_prefix ( text ) , projects.teacher_teach_for_america ( text | comment : teachers teach for america ) , projects.teacher_ny_teaching_fellow ( text | comment : teacher_new_york_teaching_fellow ) , projects.primary_focus_subject ( text ) , projects.primary_focus_area ( text ) , projects.secondary_focus_subject ( text ) , projects.secondary_focus_area ( text ) , projects.resource_type ( text ) , projects.poverty_level ( text ) , projects.grade_level ( text ) , projects.fulfillment_labor_materials ( real ) , projects.total_price_excluding_optional_support ( real ) , projects.total_price_including_optional_support ( real ) , projects.students_reached ( integer ) , projects.eligible_double_your_impact_match ( text ) , projects.eligible_almost_home_match ( text ) , projects.date_posted ( date ) ]\ntable donations , columns = [ donations.donationid ( text | primary key ) , donations.projectid ( text ) , donations.donor_acctid ( text | comment : donor accid ) , donations.donor_city ( text ) , donations.donor_state ( text ) , donations.donor_zip ( text ) , donations.is_teacher_acct ( text ) , donations.donation_timestamp ( datetime ) , donations.donation_to_project ( real ) , donations.donation_optional_support ( real ) , donations.donation_total ( real ) , donations.dollar_amount ( text ) , donations.donation_included_optional_support ( text ) , donations.payment_method ( text ) , donations.payment_included_acct_credit ( text ) , donations.payment_included_campaign_gift_card ( text ) , donations.payment_included_web_purchased_gift_card ( text ) , donations.payment_was_promo_matched ( text ) , donations.via_giving_page ( text ) , donations.for_honoree ( text ) , donations.donation_message ( text ) ]\ntable resources , columns = [ resources.resourceid ( text | primary key ) , resources.projectid ( text ) , resources.vendorid ( integer ) , resources.vendor_name ( text ) , resources.project_resource_type ( text ) , resources.item_name ( text ) , resources.item_number ( text ) , resources.item_unit_price ( real ) , resources.item_quantity ( integer ) ]\nforeign keys :\ndonations.projectid = projects.projectid\nresources.projectid = projects.projectid\nmatched contents :\nessays.title ( 2012 )\ndonations.donor_city ( Donation )\ndonations.donation_message ( Donation , donation )\nresources.item_name ( 2012 )\nresources.item_number ( 2012 )",
  "database schema :\ntable institution_details , columns = [ institution_details.unitid ( integer | primary key | comment : unit id number ) , institution_details.chronname ( text ) , institution_details.city ( text ) , institution_details.state ( text ) , institution_details.level ( text ) , institution_details.control ( text ) , institution_details.basic ( text ) , institution_details.hbcu ( text | comment : historically black college and universities ) , institution_details.flagship ( text ) , institution_details.long_x ( real ) , institution_details.lat_y ( real ) , institution_details.site ( text ) , institution_details.student_count ( integer ) , institution_details.awards_per_value ( real ) , institution_details.awards_per_state_value ( real ) , institution_details.awards_per_natl_value ( real | comment : awards per national value ) , institution_details.exp_award_value ( integer | comment : expected award value ) , institution_details.exp_award_state_value ( integer | comment : expected award state value ) , institution_details.exp_award_natl_value ( integer | comment : expected award national value ) , institution_details.exp_award_percentile ( integer ) , institution_details.ft_pct ( real | comment : full-time percentage ) , institution_details.fte_value ( integer | comment : full-time percentage ) , institution_details.fte_percentile ( integer ) , institution_details.med_sat_value ( text | comment : median sat value ) , institution_details.med_sat_percentile ( text | comment : median sat percentile ) , institution_details.aid_value ( integer ) , institution_details.aid_percentile ( integer ) , institution_details.endow_value ( text ) , institution_details.endow_percentile ( text ) , institution_details.grad_100_value ( real | comment : graduation 100 value ) , institution_details.grad_100_percentile ( integer | comment : graduation 100 percentile ) , institution_details.grad_150_value ( real | comment : graduation 150 value ) , institution_details.grad_150_percentile ( integer | comment : graduation 150 percentile ) , institution_details.pell_value ( real ) , institution_details.pell_percentile ( integer ) , institution_details.retain_value ( real ) , institution_details.retain_percentile ( integer ) , institution_details.ft_fac_value ( real | comment : full time faculty value ) , institution_details.ft_fac_percentile ( integer | comment : full time faculty percentile ) , institution_details.vsa_year ( text | comment : voluntary system of accountability year ) , institution_details.vsa_grad_after4_first ( text | comment : voluntary system of accountability after 4 year first time ) , institution_details.vsa_grad_elsewhere_after4_first ( text | comment : voluntary system of accountability graduation elsewhere after 4 year first time ) , institution_details.vsa_enroll_after4_first ( text | comment : voluntary system of accountability enrollment after 4 year first time ) , institution_details.vsa_enroll_elsewhere_after4_first ( text | comment : voluntary system of accountability enrollment elsewhere after 4 year first time ) , institution_details.vsa_grad_after6_first ( text | comment : voluntary system of accountability graduation elsewhere after 6 year first time ) , institution_details.vsa_grad_elsewhere_after6_first ( text | comment : voluntary system of accountability graduation elsewhere after 6 year first time ) , institution_details.vsa_enroll_after6_first ( text | comment : voluntary system of accountability enrollment after 6 year first time ) , institution_details.vsa_enroll_elsewhere_after6_first ( text | comment : voluntary system of accountability enrollment elsewhere after 6 year first time ) , institution_details.vsa_grad_after4_transfer ( text | comment : voluntary system of accountability transfer after 6 year first time ) , institution_details.vsa_grad_elsewhere_after4_transfer ( text | comment : voluntary system of accountability graduation elsewhere after 4 year ) , institution_details.vsa_enroll_after4_transfer ( text | comment : voluntary system of accountability enrollment after 4 years transfer ) , institution_details.vsa_enroll_elsewhere_after4_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 4 years transfer ) , institution_details.vsa_grad_after6_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 6 years transfer ) , institution_details.vsa_grad_elsewhere_after6_transfer ( text | comment : voluntary system of accountability graduation elsewhere after 6 years transfer ) , institution_details.vsa_enroll_after6_transfer ( text | comment : voluntary system of accountability enrollment after 6 years transfer ) , institution_details.vsa_enroll_elsewhere_after6_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 6 years transfer ) , institution_details.similar ( text ) , institution_details.state_sector_ct ( integer ) , institution_details.carnegie_ct ( integer ) , institution_details.counted_pct ( text ) , institution_details.nicknames ( text ) , institution_details.cohort_size ( integer ) ]\ntable institution_grads , columns = [ institution_grads.unitid ( integer ) , institution_grads.year ( integer ) , institution_grads.gender ( text ) , institution_grads.race ( text ) , institution_grads.cohort ( text ) , institution_grads.grad_cohort ( text | comment : graduation cohort ) , institution_grads.grad_100 ( text | comment : graduation 100 ) , institution_grads.grad_150 ( text | comment : graduation 150 ) , institution_grads.grad_100_rate ( text ) , institution_grads.grad_150_rate ( text ) ]\ntable state_sector_grads , columns = [ state_sector_grads.stateid ( integer ) , state_sector_grads.state ( text | comment : state name ) , state_sector_grads.state_abbr ( text ) , state_sector_grads.control ( text ) , state_sector_grads.level ( text ) , state_sector_grads.year ( integer ) , state_sector_grads.gender ( text ) , state_sector_grads.race ( text ) , state_sector_grads.cohort ( text ) , state_sector_grads.grad_cohort ( text | comment : graduation cohort ) , state_sector_grads.grad_100 ( text | comment : graduation 100 ) , state_sector_grads.grad_150 ( text | comment : graduation 150 ) , state_sector_grads.grad_100_rate ( text ) , state_sector_grads.grad_150_rate ( text ) , state_sector_grads.grad_cohort_ct ( integer | comment : graduation cohort count ) ]\ntable state_sector_details , columns = [ state_sector_details.stateid ( integer | primary key ) , state_sector_details.state ( text | comment : state name ) , state_sector_details.state_post ( text ) , state_sector_details.level ( text | primary key ) , state_sector_details.control ( text | primary key ) , state_sector_details.schools_count ( integer ) , state_sector_details.counted_pct ( text | comment : counted percentage ) , state_sector_details.awards_per_state_value ( text ) , state_sector_details.awards_per_natl_value ( real | comment : awards per national value ) , state_sector_details.exp_award_state_value ( text | comment : expected award state value ) , state_sector_details.exp_award_natl_value ( integer | comment : expected award national value ) , state_sector_details.state_appr_value ( text | comment : state appropriation value ) , state_sector_details.state_appr_rank ( text ) , state_sector_details.grad_rate_rank ( text ) , state_sector_details.awards_per_rank ( text ) ]\nforeign keys :\ninstitution_grads.unitid = institution_details.unitid\nstate_sector_grads.stateid = state_sector_details.stateid\nstate_sector_grads.state = institution_details.state\nstate_sector_details.state = institution_details.state\nmatched contents :\ninstitution_details.city ( Institute )\ninstitution_details.aid_value ( 2007 )\ninstitution_details.endow_value ( 2007 )\ninstitution_details.cohort_size ( 2007 )\ninstitution_grads.year ( 2007 )\ninstitution_grads.race ( Ai )\ninstitution_grads.grad_cohort ( 2007 )\ninstitution_grads.grad_100 ( 2007 )\ninstitution_grads.grad_150 ( 2007 )\nstate_sector_grads.year ( 2007 )\nstate_sector_grads.race ( Ai )\nstate_sector_grads.grad_cohort ( 2007 )\nstate_sector_grads.grad_150 ( 2007 )",
  "database schema :\ntable cites , columns = [ cites.cited_paper_id ( text | primary key ) , cites.citing_paper_id ( text | primary key ) ]\ntable paper , columns = [ paper.paper_id ( text | primary key ) , paper.class_label ( text ) ]\ntable content , columns = [ content.paper_id ( text | primary key ) , content.word_cited_id ( text | primary key ) ]\nforeign keys :\ncontent.paper_id = paper.paper_id\nmatched contents :\npaper.class_label ( Agents )",
  "database schema :\ntable bool , columns = [ bool.name ( text | primary key ) ]\ntable person , columns = [ person.name ( text | primary key ) ]\ntable disabled , columns = [ disabled.name ( text | primary key ) ]\ntable enlist , columns = [ enlist.name ( text ) , enlist.organ ( text | comment : organization ) ]\ntable filed_for_bankrupcy , columns = [ filed_for_bankrupcy.name ( text | primary key ) ]\ntable longest_absense_from_school , columns = [ longest_absense_from_school.name ( text | primary key ) , longest_absense_from_school.month ( integer ) ]\ntable male , columns = [ male.name ( text | primary key ) ]\ntable no_payment_due , columns = [ no_payment_due.name ( text | primary key ) , no_payment_due.bool ( text ) ]\ntable unemployed , columns = [ unemployed.name ( text | primary key ) ]\ntable enrolled , columns = [ enrolled.name ( text | primary key ) , enrolled.school ( text | primary key ) , enrolled.month ( integer ) ]\nforeign keys :\ndisabled.name = person.name\nenlist.name = person.name\nfiled_for_bankrupcy.name = person.name\nlongest_absense_from_school.name = person.name\nmale.name = person.name\nno_payment_due.bool = bool.name\nno_payment_due.name = person.name\nunemployed.name = person.name\nenrolled.name = person.name\nmatched contents : None",
  "database schema :\ntable question , columns = [ question.questiontext ( text ) , question.questionid ( integer | primary key ) ]\ntable survey , columns = [ survey.surveyid ( integer | primary key ) , survey.description ( text ) ]\ntable answer , columns = [ answer.answertext ( text ) , answer.surveyid ( integer ) , answer.userid ( integer | primary key ) , answer.questionid ( integer | primary key ) ]\nforeign keys : None\nmatched contents :\nquestion.questionid ( 19 )\nanswer.answertext ( 19 )\nanswer.userid ( 19 )\nanswer.questionid ( 19 )",
  "database schema :\ntable characters , columns = [ characters.movie_title ( text | primary key ) , characters.release_date ( text ) , characters.hero ( text ) , characters.villian ( text ) , characters.song ( text ) ]\ntable director , columns = [ director.name ( text | primary key ) , director.director ( text ) ]\ntable movies_total_gross , columns = [ movies_total_gross.movie_title ( text | primary key ) , movies_total_gross.release_date ( text | primary key ) , movies_total_gross.genre ( text ) , movies_total_gross.mpaa_rating ( text | comment : motion picture association of america rating ) , movies_total_gross.total_gross ( text ) , movies_total_gross.inflation_adjusted_gross ( text ) ]\ntable revenue , columns = [ revenue.year ( integer | primary key ) , revenue.`studio entertainment[ni 1]` ( real ) , revenue.`disney consumer products[ni 2]` ( real ) , revenue.`disney interactive[ni 3][rev 1]` ( integer ) , revenue.`walt disney parks and resorts` ( real ) , revenue.`disney media networks` ( text ) , revenue.total ( integer ) ]\ntable `voice-actors` , columns = [ `voice-actors`.character ( text | primary key ) , `voice-actors`.`voice-actor` ( text ) , `voice-actors`.movie ( text ) ]\nforeign keys :\ncharacters.hero = `voice-actors`.character\ndirector.name = characters.movie_title\nmovies_total_gross.movie_title = characters.movie_title\n`voice-actors`.movie = characters.movie_title\nmatched contents :\nrevenue.year ( 1998 , 1997 )\n`voice-actors`.`voice-actor` ( Walt Disney )",
  "database schema :\ntable current , columns = [ current.ballotpedia_id ( text ) , current.bioguide_id ( text | primary key ) , current.birthday_bio ( date ) , current.cspan_id ( real | primary key ) , current.fec_id ( text ) , current.first_name ( text ) , current.gender_bio ( text ) , current.google_entity_id_id ( text | comment : google entity id ) , current.govtrack_id ( integer ) , current.house_history_id ( real ) , current.icpsr_id ( real | comment : interuniversity consortium for political and social research id ) , current.last_name ( text ) , current.lis_id ( text | comment : legislator id ) , current.maplight_id ( real ) , current.middle_name ( text ) , current.nickname_name ( text | comment : nickname ) , current.official_full_name ( text ) , current.opensecrets_id ( text ) , current.religion_bio ( text ) , current.suffix_name ( text ) , current.thomas_id ( integer ) , current.votesmart_id ( real ) , current.wikidata_id ( text ) , current.wikipedia_id ( text ) ]\ntable `current-terms` , columns = [ `current-terms`.address ( text ) , `current-terms`.bioguide ( text | primary key | comment : bioguide id ) , `current-terms`.caucus ( text ) , `current-terms`.chamber ( text ) , `current-terms`.class ( real ) , `current-terms`.contact_form ( text ) , `current-terms`.district ( real ) , `current-terms`.end ( text | primary key ) , `current-terms`.fax ( text ) , `current-terms`.last ( text ) , `current-terms`.name ( text ) , `current-terms`.office ( text ) , `current-terms`.party ( text ) , `current-terms`.party_affiliations ( text ) , `current-terms`.phone ( text ) , `current-terms`.relation ( text ) , `current-terms`.rss_url ( text | comment : really simple syndication url ) , `current-terms`.start ( text ) , `current-terms`.state ( text ) , `current-terms`.state_rank ( text ) , `current-terms`.title ( text ) , `current-terms`.type ( text ) , `current-terms`.url ( text ) ]\ntable historical , columns = [ historical.ballotpedia_id ( text ) , historical.bioguide_id ( text | primary key ) , historical.bioguide_previous_id ( text ) , historical.birthday_bio ( text ) , historical.cspan_id ( text ) , historical.fec_id ( text ) , historical.first_name ( text ) , historical.gender_bio ( text ) , historical.google_entity_id_id ( text | comment : google entity id ) , historical.govtrack_id ( integer ) , historical.house_history_alternate_id ( text ) , historical.house_history_id ( real ) , historical.icpsr_id ( real | comment : interuniversity consortium for political and social research id ) , historical.last_name ( text ) , historical.lis_id ( text | comment : legislator id ) , historical.maplight_id ( text ) , historical.middle_name ( text ) , historical.nickname_name ( text | comment : nickname ) , historical.official_full_name ( text ) , historical.opensecrets_id ( text ) , historical.religion_bio ( text ) , historical.suffix_name ( text ) , historical.thomas_id ( text ) , historical.votesmart_id ( text ) , historical.wikidata_id ( text ) , historical.wikipedia_id ( text ) ]\ntable `historical-terms` , columns = [ `historical-terms`.address ( text ) , `historical-terms`.bioguide ( text | primary key | comment : bioguide id ) , `historical-terms`.chamber ( text ) , `historical-terms`.class ( real ) , `historical-terms`.contact_form ( text ) , `historical-terms`.district ( real ) , `historical-terms`.end ( text ) , `historical-terms`.fax ( text ) , `historical-terms`.last ( text ) , `historical-terms`.middle ( text ) , `historical-terms`.name ( text ) , `historical-terms`.office ( text ) , `historical-terms`.party ( text ) , `historical-terms`.party_affiliations ( text ) , `historical-terms`.phone ( text ) , `historical-terms`.relation ( text ) , `historical-terms`.rss_url ( text | comment : really simple syndication url ) , `historical-terms`.start ( text ) , `historical-terms`.state ( text ) , `historical-terms`.state_rank ( text ) , `historical-terms`.title ( text ) , `historical-terms`.type ( text ) , `historical-terms`.url ( text ) ]\ntable `social-media` , columns = [ `social-media`.bioguide ( text | primary key ) , `social-media`.facebook ( text ) , `social-media`.facebook_id ( real ) , `social-media`.govtrack ( real ) , `social-media`.instagram ( text ) , `social-media`.instagram_id ( real ) , `social-media`.thomas ( integer ) , `social-media`.twitter ( text ) , `social-media`.twitter_id ( real ) , `social-media`.youtube ( text ) , `social-media`.youtube_id ( text ) ]\nforeign keys :\n`current-terms`.bioguide = current.bioguide_id\n`historical-terms`.bioguide = historical.bioguide_id\n`social-media`.bioguide = current.bioguide_id\nmatched contents : None",
  "database schema :\ntable cbsa , columns = [ cbsa.cbsa ( integer | primary key ) , cbsa.cbsa_name ( text ) , cbsa.cbsa_type ( text ) ]\ntable state , columns = [ state.abbreviation ( text | primary key ) , state.name ( text ) ]\ntable congress , columns = [ congress.cognress_rep_id ( text | primary key | comment : congress representative id ) , congress.first_name ( text ) , congress.last_name ( text ) , congress.cid ( text ) , congress.party ( text ) , congress.state ( text ) , congress.abbreviation ( text ) , congress.house ( text ) , congress.district ( integer ) , congress.land_area ( real ) ]\ntable zip_data , columns = [ zip_data.zip_code ( integer | primary key ) , zip_data.city ( text ) , zip_data.state ( text ) , zip_data.multi_county ( text | comment : multi country ) , zip_data.type ( text ) , zip_data.organization ( text ) , zip_data.time_zone ( text ) , zip_data.daylight_savings ( text ) , zip_data.latitude ( real ) , zip_data.longitude ( real ) , zip_data.elevation ( integer ) , zip_data.state_fips ( integer ) , zip_data.county_fips ( integer | comment : country fips ) , zip_data.region ( text ) , zip_data.division ( text ) , zip_data.population_2020 ( integer ) , zip_data.population_2010 ( integer ) , zip_data.households ( integer ) , zip_data.avg_house_value ( integer | comment : average house value ) , zip_data.avg_income_per_household ( integer | comment : average income per household ) , zip_data.persons_per_household ( real ) , zip_data.white_population ( integer ) , zip_data.black_population ( integer ) , zip_data.hispanic_population ( integer ) , zip_data.asian_population ( integer ) , zip_data.american_indian_population ( integer ) , zip_data.hawaiian_population ( integer ) , zip_data.other_population ( integer ) , zip_data.male_population ( integer ) , zip_data.female_population ( integer ) , zip_data.median_age ( real ) , zip_data.male_median_age ( real ) , zip_data.female_median_age ( real ) , zip_data.residential_mailboxes ( integer ) , zip_data.business_mailboxes ( integer ) , zip_data.total_delivery_receptacles ( integer ) , zip_data.businesses ( integer ) , zip_data.1st_quarter_payroll ( integer ) , zip_data.annual_payroll ( integer ) , zip_data.employees ( integer ) , zip_data.water_area ( real ) , zip_data.land_area ( real ) , zip_data.single_family_delivery_units ( integer | comment : single-family delivery units ) , zip_data.multi_family_delivery_units ( integer | comment : multi-family delivery units ) , zip_data.total_beneficiaries ( integer ) , zip_data.retired_workers ( integer ) , zip_data.disabled_workers ( integer | comment : disable workers ) , zip_data.parents_and_widowed ( integer ) , zip_data.spouses ( integer ) , zip_data.children ( integer ) , zip_data.over_65 ( integer ) , zip_data.monthly_benefits_all ( integer ) , zip_data.monthly_benefits_retired_workers ( integer ) , zip_data.monthly_benefits_widowed ( integer ) , zip_data.cbsa ( integer ) ]\ntable alias , columns = [ alias.zip_code ( integer | primary key ) , alias.alias ( text ) ]\ntable area_code , columns = [ area_code.zip_code ( integer | primary key ) , area_code.area_code ( integer | primary key ) ]\ntable avoid , columns = [ avoid.zip_code ( integer | primary key ) , avoid.bad_alias ( text | primary key ) ]\ntable country , columns = [ country.zip_code ( integer | primary key ) , country.county ( text | primary key | comment : country ) , country.state ( text ) ]\ntable zip_congress , columns = [ zip_congress.zip_code ( integer | primary key ) , zip_congress.district ( text | primary key ) ]\nforeign keys :\ncongress.abbreviation = state.abbreviation\nzip_data.cbsa = cbsa.cbsa\nzip_data.state = state.abbreviation\nalias.zip_code = zip_data.zip_code\narea_code.zip_code = zip_data.zip_code\navoid.zip_code = zip_data.zip_code\ncountry.state = state.abbreviation\ncountry.zip_code = zip_data.zip_code\nzip_congress.zip_code = zip_data.zip_code\nzip_congress.district = congress.cognress_rep_id\nmatched contents :\nzip_data.city ( Arecibo )\nalias.alias ( Arecibo )\ncountry.county ( ARECIBO )",
  "database schema :\ntable dish , columns = [ dish.id ( integer | primary key ) , dish.name ( text ) , dish.description ( text ) , dish.menus_appeared ( integer ) , dish.times_appeared ( integer ) , dish.first_appeared ( integer ) , dish.last_appeared ( integer ) , dish.lowest_price ( real ) , dish.highest_price ( real ) ]\ntable menu , columns = [ menu.id ( integer | primary key ) , menu.name ( text ) , menu.sponsor ( text ) , menu.event ( text ) , menu.venue ( text ) , menu.place ( text ) , menu.physical_description ( text ) , menu.occasion ( text ) , menu.notes ( text ) , menu.call_number ( text ) , menu.keywords ( text ) , menu.language ( text ) , menu.date ( date ) , menu.location ( text ) , menu.location_type ( text ) , menu.currency ( text ) , menu.currency_symbol ( text ) , menu.status ( text ) , menu.page_count ( integer ) , menu.dish_count ( integer ) ]\ntable menupage , columns = [ menupage.id ( integer | primary key ) , menupage.menu_id ( integer ) , menupage.page_number ( integer ) , menupage.image_id ( real ) , menupage.full_height ( integer ) , menupage.full_width ( integer ) , menupage.uuid ( text ) ]\ntable menuitem , columns = [ menuitem.id ( integer | primary key ) , menuitem.menu_page_id ( integer ) , menuitem.price ( real ) , menuitem.high_price ( real ) , menuitem.dish_id ( integer ) , menuitem.created_at ( text ) , menuitem.updated_at ( text ) , menuitem.xpos ( real | comment : x position ) , menuitem.ypos ( real | comment : y position ) ]\nforeign keys :\nmenupage.menu_id = menu.id\nmenuitem.menu_page_id = menupage.id\nmenuitem.dish_id = dish.id\nmatched contents :\ndish.id ( 1851 )\ndish.name ( DISHES )\ndish.first_appeared ( 1851 )\ndish.last_appeared ( 1851 )\nmenupage.id ( 1851 )\nmenupage.full_height ( 1851 )\nmenupage.full_width ( 1851 )\nmenuitem.id ( 1851 )\nmenuitem.dish_id ( 1851 )",
  "database schema :\ntable langs , columns = [ langs.lid ( integer | primary key | comment : language id ) , langs.lang ( text | comment : language ) , langs.locale ( text ) , langs.pages ( integer ) , langs.words ( integer ) ]\ntable pages , columns = [ pages.pid ( integer | primary key | comment : page id ) , pages.lid ( integer | comment : language id ) , pages.page ( integer ) , pages.revision ( integer ) , pages.title ( text ) , pages.words ( integer ) ]\ntable words , columns = [ words.wid ( integer | primary key | comment : word id ) , words.word ( text ) , words.occurrences ( integer ) ]\ntable langs_words , columns = [ langs_words.lid ( integer | primary key | comment : language id ) , langs_words.wid ( integer | primary key | comment : word id ) , langs_words.occurrences ( integer ) ]\ntable pages_words , columns = [ pages_words.pid ( integer | primary key | comment : page id ) , pages_words.wid ( integer | primary key | comment : word id ) , pages_words.occurrences ( integer ) ]\ntable biwords , columns = [ biwords.lid ( integer | primary key | comment : language id ) , biwords.w1st ( integer | primary key | comment : word id of the first word ) , biwords.w2nd ( integer | primary key | comment : word id of the second word ) , biwords.occurrences ( integer ) ]\nforeign keys :\npages.lid = langs.lid\nlangs_words.wid = words.wid\nlangs_words.lid = langs.lid\npages_words.wid = words.wid\npages_words.pid = pages.pid\nbiwords.w2nd = words.wid\nbiwords.w1st = words.wid\nbiwords.lid = langs.lid\nmatched contents :\npages.title ( Catalan , Wikipedia , Title , Max , State , Numbers )\nwords.word ( longest , wikipedia , words , differents , languages , catalans , lengths , numbers , titles , refer , states , wordes )",
  "database schema :\ntable `air carriers` , columns = [ `air carriers`.code ( integer | primary key ) , `air carriers`.description ( text ) ]\ntable airports , columns = [ airports.code ( text | primary key ) , airports.description ( text ) ]\ntable airlines , columns = [ airlines.fl_date ( text | comment : flight date ) , airlines.op_carrier_airline_id ( integer | comment : operator carrier airline id ) , airlines.tail_num ( text | comment : tail number ) , airlines.op_carrier_fl_num ( integer | comment : operator carrier flight number ) , airlines.origin_airport_id ( integer ) , airlines.origin_airport_seq_id ( integer | comment : origin airport sequence id ) , airlines.origin_city_market_id ( integer ) , airlines.origin ( text ) , airlines.dest_airport_id ( integer | comment : destination airport id ) , airlines.dest_airport_seq_id ( integer | comment : destination airport sequence id ) , airlines.dest_city_market_id ( integer | comment : destination city market id ) , airlines.dest ( text | comment : destination ) , airlines.crs_dep_time ( integer | comment : scheduled local departure time ) , airlines.dep_time ( integer | comment : departure time ) , airlines.dep_delay ( integer | comment : departure delay ) , airlines.dep_delay_new ( integer | comment : departure delay new ) , airlines.arr_time ( integer | comment : arrival time ) , airlines.arr_delay ( integer | comment : arrival delay ) , airlines.arr_delay_new ( integer | comment : arrival delay new ) , airlines.cancelled ( integer ) , airlines.cancellation_code ( text ) , airlines.crs_elapsed_time ( integer | comment : scheduled elapsed time ) , airlines.actual_elapsed_time ( integer ) , airlines.carrier_delay ( integer ) , airlines.weather_delay ( integer ) , airlines.nas_delay ( integer | comment : national aviavtion system delay ) , airlines.security_delay ( integer ) , airlines.late_aircraft_delay ( integer ) ]\nforeign keys :\nairlines.op_carrier_airline_id = `air carriers`.code\nairlines.dest = airports.code\nairlines.origin = airports.code\nmatched contents :\nairlines.fl_date ( 2018/8/17 )",
  "database schema :\ntable employee , columns = [ employee.employee_id ( integer | primary key ) , employee.first_name ( text ) , employee.last_name ( text ) , employee.address ( text ) , employee.city ( text ) , employee.state ( text ) , employee.zip ( integer ) , employee.phone ( text ) , employee.title ( text ) , employee.salary ( integer ) , employee.supervisor ( integer ) ]\ntable establishment , columns = [ establishment.license_no ( integer | primary key | comment : license number ) , establishment.dba_name ( text | comment : doing business as name ) , establishment.aka_name ( text | comment : as know as name ) , establishment.facility_type ( text ) , establishment.risk_level ( integer ) , establishment.address ( text ) , establishment.city ( text ) , establishment.state ( text ) , establishment.zip ( integer ) , establishment.latitude ( real ) , establishment.longitude ( real ) , establishment.ward ( integer ) ]\ntable inspection , columns = [ inspection.inspection_id ( integer | primary key ) , inspection.inspection_date ( date ) , inspection.inspection_type ( text ) , inspection.results ( text ) , inspection.employee_id ( integer ) , inspection.license_no ( integer | comment : license number ) , inspection.followup_to ( integer ) ]\ntable inspection_point , columns = [ inspection_point.point_id ( integer | primary key ) , inspection_point.description ( text ) , inspection_point.category ( text ) , inspection_point.code ( text ) , inspection_point.fine ( integer ) , inspection_point.point_level ( text ) ]\ntable violation , columns = [ violation.inspection_id ( integer | primary key ) , violation.point_id ( integer | primary key ) , violation.fine ( integer ) , violation.inspector_comment ( text ) ]\nforeign keys :\nemployee.supervisor = employee.employee_id\ninspection.followup_to = inspection.inspection_id\ninspection.license_no = establishment.license_no\ninspection.employee_id = employee.employee_id\nviolation.point_id = inspection_point.point_id\nviolation.inspection_id = inspection.inspection_id\nmatched contents :\nemployee.first_name ( Darlisha )\nemployee.last_name ( Jacobs )\nemployee.title ( Sanitarian )",
  "database schema :\ntable coins , columns = [ coins.id ( integer | primary key ) , coins.name ( text ) , coins.slug ( text ) , coins.symbol ( text ) , coins.status ( text ) , coins.category ( text ) , coins.description ( text ) , coins.subreddit ( text ) , coins.notice ( text ) , coins.tags ( text ) , coins.tag_names ( text ) , coins.website ( text ) , coins.platform_id ( integer ) , coins.date_added ( text ) , coins.date_launched ( text | comment : date lanched ) ]\ntable historical , columns = [ historical.date ( date ) , historical.coin_id ( integer ) , historical.cmc_rank ( integer | comment : coinmarketcap rank ) , historical.market_cap ( real | comment : market capitalization ) , historical.price ( real ) , historical.open ( real ) , historical.high ( real ) , historical.low ( real ) , historical.close ( real ) , historical.time_high ( text ) , historical.time_low ( text ) , historical.volume_24h ( real ) , historical.percent_change_1h ( real ) , historical.percent_change_24h ( real ) , historical.percent_change_7d ( real ) , historical.circulating_supply ( real ) , historical.total_supply ( real ) , historical.max_supply ( real ) , historical.num_market_pairs ( integer | comment : number market pairs ) ]\nforeign keys : None\nmatched contents :\ncoins.id ( 2018 )\ncoins.name ( COIN )\ncoins.slug ( coin )\ncoins.symbol ( MAX , YEAR , NAME , COIN )\ncoins.category ( coin )\nhistorical.coin_id ( 2018 )\nhistorical.cmc_rank ( 2018 )\nhistorical.num_market_pairs ( 2018 )",
  "database schema :\ntable categories , columns = [ categories.categoryid ( integer | primary key ) , categories.categoryname ( text ) , categories.description ( text ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key ) , customers.customername ( text ) , customers.contactname ( text ) , customers.address ( text ) , customers.city ( text ) , customers.postalcode ( text ) , customers.country ( text ) ]\ntable employees , columns = [ employees.employeeid ( integer | primary key ) , employees.lastname ( text ) , employees.firstname ( text ) , employees.birthdate ( date ) , employees.photo ( text ) , employees.notes ( text ) ]\ntable shippers , columns = [ shippers.shipperid ( integer | primary key ) , shippers.shippername ( text ) , shippers.phone ( text ) ]\ntable suppliers , columns = [ suppliers.supplierid ( integer | primary key ) , suppliers.suppliername ( text ) , suppliers.contactname ( text ) , suppliers.address ( text ) , suppliers.city ( text ) , suppliers.postalcode ( text ) , suppliers.country ( text ) , suppliers.phone ( text ) ]\ntable products , columns = [ products.productid ( integer | primary key ) , products.productname ( text ) , products.supplierid ( integer ) , products.categoryid ( integer ) , products.unit ( text ) , products.price ( real ) ]\ntable orders , columns = [ orders.orderid ( integer | primary key ) , orders.customerid ( integer ) , orders.employeeid ( integer ) , orders.orderdate ( datetime ) , orders.shipperid ( integer ) ]\ntable orderdetails , columns = [ orderdetails.orderdetailid ( integer | primary key ) , orderdetails.orderid ( integer ) , orderdetails.productid ( integer ) , orderdetails.quantity ( integer ) ]\nforeign keys :\nproducts.supplierid = suppliers.supplierid\nproducts.categoryid = categories.categoryid\norders.shipperid = shippers.shipperid\norders.customerid = customers.customerid\norders.employeeid = employees.employeeid\norderdetails.productid = products.productid\norderdetails.orderid = orders.orderid\nmatched contents : None",
  "database schema :\ntable height_info , columns = [ height_info.height_id ( integer | primary key ) , height_info.height_in_cm ( integer ) , height_info.height_in_inch ( text ) ]\ntable weight_info , columns = [ weight_info.weight_id ( integer | primary key ) , weight_info.weight_in_kg ( integer ) , weight_info.weight_in_lbs ( integer ) ]\ntable playerinfo , columns = [ playerinfo.eliteid ( integer | primary key ) , playerinfo.playername ( text ) , playerinfo.birthdate ( text ) , playerinfo.birthyear ( date ) , playerinfo.birthmonth ( integer ) , playerinfo.birthday ( integer ) , playerinfo.birthplace ( text ) , playerinfo.nation ( text ) , playerinfo.height ( integer ) , playerinfo.weight ( integer ) , playerinfo.position_info ( text | comment : position information ) , playerinfo.shoots ( text ) , playerinfo.draftyear ( integer ) , playerinfo.draftround ( integer ) , playerinfo.overall ( integer ) , playerinfo.overallby ( text ) , playerinfo.css_rank ( integer | comment : central scouting service ranking ) , playerinfo.sum_7yr_gp ( integer | comment : sum 7-year game plays ) , playerinfo.sum_7yr_toi ( integer | comment : sum 7-year time on ice ) , playerinfo.gp_greater_than_0 ( text | comment : game play greater than 0 ) ]\ntable seasonstatus , columns = [ seasonstatus.eliteid ( integer ) , seasonstatus.season ( text ) , seasonstatus.team ( text ) , seasonstatus.league ( text ) , seasonstatus.gametype ( text ) , seasonstatus.gp ( integer | comment : game plays ) , seasonstatus.g ( integer ) , seasonstatus.a ( integer ) , seasonstatus.p ( integer ) , seasonstatus.pim ( integer | comment : penalty minutes ) , seasonstatus.plusminus ( integer | comment : plus minutes ) ]\nforeign keys :\nplayerinfo.weight = weight_info.weight_id\nplayerinfo.height = height_info.height_id\nseasonstatus.eliteid = playerinfo.eliteid\nmatched contents :\nplayerinfo.playername ( David Bornhammar )",
  "database schema :\ntable att_classes , columns = [ att_classes.att_class_id ( integer | primary key | comment : attribute class id ) , att_classes.att_class ( text | comment : attribute class ) ]\ntable obj_classes , columns = [ obj_classes.obj_class_id ( integer | primary key | comment : object class id ) , obj_classes.obj_class ( text | comment : object class ) ]\ntable img_obj , columns = [ img_obj.img_id ( integer | primary key | comment : image id ) , img_obj.obj_sample_id ( integer | primary key | comment : object sample id ) , img_obj.obj_class_id ( integer | comment : object class id ) , img_obj.x ( integer ) , img_obj.y ( integer ) , img_obj.w ( integer ) , img_obj.h ( integer ) ]\ntable img_obj_att , columns = [ img_obj_att.img_id ( integer | primary key | comment : image id ) , img_obj_att.att_class_id ( integer | primary key | comment : attribute class id ) , img_obj_att.obj_sample_id ( integer | primary key | comment : object sample id ) ]\ntable pred_classes , columns = [ pred_classes.pred_class_id ( integer | primary key | comment : prediction class id ) , pred_classes.pred_class ( text | comment : prediction class ) ]\ntable img_rel , columns = [ img_rel.img_id ( integer | primary key | comment : image id ) , img_rel.pred_class_id ( integer | primary key | comment : prediction class id ) , img_rel.obj1_sample_id ( integer | primary key | comment : object1 sample id ) , img_rel.obj2_sample_id ( integer | primary key | comment : object2 sample id ) ]\nforeign keys :\nimg_obj.obj_class_id = obj_classes.obj_class_id\nimg_obj_att.img_id = img_obj.img_id\nimg_obj_att.obj_sample_id = img_obj.obj_sample_id\nimg_obj_att.att_class_id = att_classes.att_class_id\nimg_rel.img_id = img_obj.img_id\nimg_rel.obj2_sample_id = img_obj.obj_sample_id\nimg_rel.img_id = img_obj.img_id\nimg_rel.obj1_sample_id = img_obj.obj_sample_id\nimg_rel.pred_class_id = pred_classes.pred_class_id\nmatched contents :\natt_classes.att_class_id ( 1 )\natt_classes.att_class ( many )\nobj_classes.obj_class ( object )\nimg_obj.img_id ( 1 )\nimg_obj.obj_sample_id ( 1 )\nimg_obj.obj_class_id ( 1 )\nimg_obj.x ( 1 )\nimg_obj.y ( 1 )\nimg_obj.w ( 1 )\nimg_obj.h ( 1 )\nimg_obj_att.img_id ( 1 )\nimg_obj_att.att_class_id ( 1 )",
  "database schema :\ntable runs , columns = [ runs.run_at ( text ) , runs.max_rowid ( integer ) , runs.reviews_added ( integer ) ]\ntable podcasts , columns = [ podcasts.podcast_id ( text | primary key ) , podcasts.itunes_id ( integer ) , podcasts.slug ( text ) , podcasts.itunes_url ( text ) , podcasts.title ( text ) ]\ntable reviews , columns = [ reviews.podcast_id ( text ) , reviews.title ( text ) , reviews.content ( text ) , reviews.rating ( integer ) , reviews.author_id ( text ) , reviews.created_at ( text ) ]\ntable categories , columns = [ categories.podcast_id ( text | primary key ) , categories.category ( text | primary key ) ]\nforeign keys : None\nmatched contents :\nreviews.title ( The most , the most , how many , Max , max , Many , The MOST! )",
  "database schema :\ntable sales_in_weather , columns = [ sales_in_weather.date ( date | primary key ) , sales_in_weather.store_nbr ( integer | primary key | comment : store number ) , sales_in_weather.item_nbr ( integer | primary key | comment : item number ) , sales_in_weather.units ( integer ) ]\ntable weather , columns = [ weather.station_nbr ( integer | primary key | comment : station number ) , weather.date ( date | primary key ) , weather.tmax ( integer | comment : temperature max ) , weather.tmin ( integer | comment : temperature min ) , weather.tavg ( integer | comment : temperature average ) , weather.depart ( integer | comment : departure from normal ) , weather.dewpoint ( integer ) , weather.wetbulb ( integer ) , weather.heat ( integer ) , weather.cool ( integer ) , weather.sunrise ( text ) , weather.sunset ( text ) , weather.codesum ( text | comment : code summarization ) , weather.snowfall ( real ) , weather.preciptotal ( real ) , weather.stnpressure ( real | comment : station pressure ) , weather.sealevel ( real ) , weather.resultspeed ( real | comment : resultant speed ) , weather.resultdir ( integer | comment : resultant direction ) , weather.avgspeed ( real | comment : average speed ) ]\ntable relation , columns = [ relation.store_nbr ( integer | primary key | comment : store number ) , relation.station_nbr ( integer | comment : station number ) ]\nforeign keys :\nrelation.station_nbr = weather.station_nbr\nrelation.store_nbr = sales_in_weather.store_nbr\nmatched contents :\nsales_in_weather.date ( 2012-01-01 , 2012-01-02 , 2012-01-13 )\nsales_in_weather.store_nbr ( 1 , 9 )\nsales_in_weather.item_nbr ( 1 , 9 )\nsales_in_weather.units ( 1 , 9 )\nweather.date ( 2012-01-01 )\nweather.depart ( 1 , 9 )\nweather.dewpoint ( 1 , 9 )\nweather.cool ( 1 , 9 )\nrelation.store_nbr ( 1 , 9 )\nrelation.station_nbr ( 1 , 9 )",
  "database schema :\ntable borders , columns = [ borders.country1 ( text | primary key ) , borders.country2 ( text | primary key ) , borders.length ( real ) ]\ntable city , columns = [ city.name ( text | primary key ) , city.country ( text ) , city.province ( text | primary key ) , city.population ( integer ) , city.longitude ( real ) , city.latitude ( real ) ]\ntable continent , columns = [ continent.name ( text | primary key ) , continent.area ( real ) ]\ntable country , columns = [ country.name ( text ) , country.code ( text | primary key ) , country.capital ( text ) , country.province ( text ) , country.area ( real ) , country.population ( integer ) ]\ntable desert , columns = [ desert.name ( text | primary key ) , desert.area ( real ) , desert.longitude ( real ) , desert.latitude ( real ) ]\ntable economy , columns = [ economy.country ( text | primary key ) , economy.gdp ( real | comment : gross domestic product ) , economy.agriculture ( real ) , economy.service ( real ) , economy.industry ( real ) , economy.inflation ( real ) ]\ntable encompasses , columns = [ encompasses.country ( text | primary key ) , encompasses.continent ( text | primary key ) , encompasses.percentage ( real ) ]\ntable ethnicgroup , columns = [ ethnicgroup.country ( text | primary key ) , ethnicgroup.name ( text | primary key ) , ethnicgroup.percentage ( real ) ]\ntable geo_desert , columns = [ geo_desert.desert ( text | primary key ) , geo_desert.country ( text | primary key ) , geo_desert.province ( text | primary key ) ]\ntable geo_estuary , columns = [ geo_estuary.river ( text | primary key ) , geo_estuary.country ( text | primary key ) , geo_estuary.province ( text | primary key ) ]\ntable geo_island , columns = [ geo_island.island ( text | primary key ) , geo_island.country ( text | primary key ) , geo_island.province ( text | primary key ) ]\ntable geo_lake , columns = [ geo_lake.lake ( text | primary key ) , geo_lake.country ( text | primary key ) , geo_lake.province ( text | primary key ) ]\ntable geo_mountain , columns = [ geo_mountain.mountain ( text | primary key ) , geo_mountain.country ( text | primary key ) , geo_mountain.province ( text | primary key ) ]\ntable geo_river , columns = [ geo_river.river ( text | primary key ) , geo_river.country ( text | primary key ) , geo_river.province ( text | primary key ) ]\ntable geo_sea , columns = [ geo_sea.sea ( text | primary key ) , geo_sea.country ( text | primary key ) , geo_sea.province ( text | primary key ) ]\ntable geo_source , columns = [ geo_source.river ( text | primary key ) , geo_source.country ( text | primary key ) , geo_source.province ( text | primary key ) ]\ntable island , columns = [ island.name ( text | primary key ) , island.islands ( text ) , island.area ( real ) , island.height ( real ) , island.type ( text ) , island.longitude ( real ) , island.latitude ( real ) ]\ntable islandin , columns = [ islandin.island ( text ) , islandin.sea ( text ) , islandin.lake ( text ) , islandin.river ( text ) ]\ntable ismember , columns = [ ismember.country ( text | primary key ) , ismember.organization ( text | primary key ) , ismember.type ( text ) ]\ntable lake , columns = [ lake.name ( text | primary key ) , lake.area ( real ) , lake.depth ( real ) , lake.altitude ( real ) , lake.type ( text ) , lake.river ( text ) , lake.longitude ( real ) , lake.latitude ( real ) ]\ntable language , columns = [ language.country ( text | primary key ) , language.name ( text | primary key ) , language.percentage ( real ) ]\ntable located , columns = [ located.city ( text ) , located.province ( text ) , located.country ( text ) , located.river ( text ) , located.lake ( text ) , located.sea ( text ) ]\ntable locatedon , columns = [ locatedon.city ( text | primary key ) , locatedon.province ( text | primary key ) , locatedon.country ( text | primary key ) , locatedon.island ( text | primary key ) ]\ntable mergeswith , columns = [ mergeswith.sea1 ( text | primary key ) , mergeswith.sea2 ( text | primary key ) ]\ntable mountain , columns = [ mountain.name ( text | primary key ) , mountain.mountains ( text ) , mountain.height ( real ) , mountain.type ( text ) , mountain.longitude ( real ) , mountain.latitude ( real ) ]\ntable mountainonisland , columns = [ mountainonisland.mountain ( text | primary key ) , mountainonisland.island ( text | primary key ) ]\ntable organization , columns = [ organization.abbreviation ( text | primary key ) , organization.name ( text ) , organization.city ( text ) , organization.country ( text ) , organization.province ( text ) , organization.established ( date ) ]\ntable politics , columns = [ politics.country ( text | primary key ) , politics.independence ( date ) , politics.dependent ( text ) , politics.government ( text ) ]\ntable population , columns = [ population.country ( text | primary key ) , population.population_growth ( real ) , population.infant_mortality ( real ) ]\ntable province , columns = [ province.name ( text | primary key ) , province.country ( text | primary key ) , province.population ( integer ) , province.area ( real ) , province.capital ( text ) , province.capprov ( text | comment : capital province ) ]\ntable religion , columns = [ religion.country ( text | primary key ) , religion.name ( text | primary key ) , religion.percentage ( real ) ]\ntable river , columns = [ river.name ( text | primary key ) , river.river ( text ) , river.lake ( text ) , river.sea ( text ) , river.length ( real ) , river.sourcelongitude ( real ) , river.sourcelatitude ( real ) , river.mountains ( text ) , river.sourcealtitude ( real ) , river.estuarylongitude ( real ) , river.estuarylatitude ( real ) ]\ntable sea , columns = [ sea.name ( text | primary key ) , sea.depth ( real ) ]\ntable target , columns = [ target.country ( text | primary key ) , target.target ( text ) ]\nforeign keys : None\nmatched contents :\nethnicgroup.name ( Polish )\nlanguage.name ( Polish )",
  "database schema :\ntable demog , columns = [ demog.geoid ( integer | primary key | comment : geographic id ) , demog.inhabitants_k ( real | comment : inhabitants (thousands) ) , demog.income_k ( real | comment : income (thousands) ) , demog.a_var1 ( real ) , demog.a_var2 ( real ) , demog.a_var3 ( real ) , demog.a_var4 ( real ) , demog.a_var5 ( real ) , demog.a_var6 ( real ) , demog.a_var7 ( real ) , demog.a_var8 ( real ) , demog.a_var9 ( real ) , demog.a_var10 ( real ) , demog.a_var11 ( real ) , demog.a_var12 ( real ) , demog.a_var13 ( real ) , demog.a_var14 ( real ) , demog.a_var15 ( real ) , demog.a_var16 ( real ) , demog.a_var17 ( real ) , demog.a_var18 ( real ) ]\ntable mailings3 , columns = [ mailings3.refid ( integer | primary key | comment : reference id ) , mailings3.ref_date ( datetime | comment : reference date ) , mailings3.response ( text ) ]\ntable customers , columns = [ customers.id ( integer | primary key ) , customers.sex ( text ) , customers.marital_status ( text ) , customers.geoid ( integer | comment : geographic id ) , customers.educationnum ( integer | comment : education number ) , customers.occupation ( text ) , customers.age ( integer ) ]\ntable mailings1_2 , columns = [ mailings1_2.refid ( integer | primary key | comment : reference id ) , mailings1_2.ref_date ( datetime | comment : reference date ) , mailings1_2.response ( text ) ]\ntable sales , columns = [ sales.eventid ( integer | primary key ) , sales.refid ( integer | comment : reference id ) , sales.event_date ( datetime ) , sales.amount ( real ) ]\nforeign keys : None\nmatched contents :\ncustomers.marital_status ( Never-married )",
  "database schema :\ntable community_area , columns = [ community_area.community_area_no ( integer | primary key | comment : community area number ) , community_area.community_area_name ( text ) , community_area.side ( text ) , community_area.population ( text ) ]\ntable district , columns = [ district.district_no ( integer | primary key | comment : district number ) , district.district_name ( text ) , district.address ( text ) , district.zip_code ( integer ) , district.commander ( text ) , district.email ( text ) , district.phone ( text ) , district.fax ( text ) , district.tty ( text ) , district.twitter ( text ) ]\ntable fbi_code , columns = [ fbi_code.fbi_code_no ( text | primary key | comment : fbi code number ) , fbi_code.title ( text ) , fbi_code.description ( text ) , fbi_code.crime_against ( text ) ]\ntable iucr , columns = [ iucr.iucr_no ( text | primary key | comment : iucr number ) , iucr.primary_description ( text ) , iucr.secondary_description ( text ) , iucr.index_code ( text ) ]\ntable neighborhood , columns = [ neighborhood.neighborhood_name ( text | primary key ) , neighborhood.community_area_no ( integer | comment : community area number ) ]\ntable ward , columns = [ ward.ward_no ( integer | primary key ) , ward.alderman_first_name ( text ) , ward.alderman_last_name ( text ) , ward.alderman_name_suffix ( text ) , ward.ward_office_address ( text ) , ward.ward_office_zip ( text ) , ward.ward_email ( text ) , ward.ward_office_phone ( text ) , ward.ward_office_fax ( text ) , ward.city_hall_office_room ( integer ) , ward.city_hall_office_phone ( text ) , ward.city_hall_office_fax ( text ) , ward.population ( integer ) ]\ntable crime , columns = [ crime.report_no ( integer | primary key | comment : report number ) , crime.case_number ( text ) , crime.date ( text ) , crime.block ( text ) , crime.iucr_no ( text | comment : illinois uniform crime reporting number ) , crime.location_description ( text ) , crime.arrest ( text ) , crime.domestic ( text ) , crime.beat ( integer ) , crime.district_no ( integer | comment : district number ) , crime.ward_no ( integer | comment : ward number ) , crime.community_area_no ( integer | comment : community area number ) , crime.fbi_code_no ( text | comment : fbi code number ) , crime.latitude ( text ) , crime.longitude ( text ) ]\nforeign keys :\nneighborhood.community_area_no = community_area.community_area_no\ncrime.fbi_code_no = fbi_code.fbi_code_no\ncrime.community_area_no = community_area.community_area_no\ncrime.district_no = district.district_no\ncrime.iucr_no = iucr.iucr_no\ncrime.ward_no = ward.ward_no\nmatched contents :\ncommunity_area.side ( Central )\ndistrict.district_name ( Central )",
  "database schema :\ntable breweries , columns = [ breweries.id ( integer | primary key ) , breweries.name ( text ) , breweries.city ( text ) , breweries.state ( text ) ]\ntable beers , columns = [ beers.id ( integer | primary key ) , beers.brewery_id ( integer ) , beers.abv ( real | comment : alcohol by volume ) , beers.ibu ( real | comment : international bitterness units ) , beers.name ( text ) , beers.style ( text ) , beers.ounces ( real ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable ingredient , columns = [ ingredient.ingredient_id ( integer | primary key ) , ingredient.category ( text ) , ingredient.name ( text ) , ingredient.plural ( text ) ]\ntable recipe , columns = [ recipe.recipe_id ( integer | primary key ) , recipe.title ( text ) , recipe.subtitle ( text ) , recipe.servings ( integer ) , recipe.yield_unit ( text ) , recipe.prep_min ( integer | comment : preparation minute ) , recipe.cook_min ( integer | comment : cooked minute ) , recipe.stnd_min ( integer | comment : stand minute ) , recipe.source ( text ) , recipe.intro ( text | comment : introduction ) , recipe.directions ( text ) ]\ntable nutrition , columns = [ nutrition.recipe_id ( integer | primary key ) , nutrition.protein ( real ) , nutrition.carbo ( real ) , nutrition.alcohol ( real ) , nutrition.total_fat ( real ) , nutrition.sat_fat ( real | comment : saturated fat ) , nutrition.cholestrl ( real | comment : cholesterol ) , nutrition.sodium ( real ) , nutrition.iron ( real ) , nutrition.vitamin_c ( real ) , nutrition.vitamin_a ( real ) , nutrition.fiber ( real ) , nutrition.pcnt_cal_carb ( real | comment : percentage calculation carbo ) , nutrition.pcnt_cal_fat ( real | comment : percentage calculation fat ) , nutrition.pcnt_cal_prot ( real | comment : percentage calculation protein ) , nutrition.calories ( real ) ]\ntable quantity , columns = [ quantity.quantity_id ( integer | primary key ) , quantity.recipe_id ( integer ) , quantity.ingredient_id ( integer ) , quantity.max_qty ( real | comment : maximum quantity ) , quantity.min_qty ( real | comment : minimum quantity ) , quantity.unit ( text ) , quantity.preparation ( text ) , quantity.optional ( text ) ]\nforeign keys :\nnutrition.recipe_id = recipe.recipe_id\nquantity.recipe_id = nutrition.recipe_id\nquantity.ingredient_id = ingredient.ingredient_id\nquantity.recipe_id = recipe.recipe_id\nmatched contents : None",
  "database schema :\ntable film_text , columns = [ film_text.film_id ( integer | primary key ) , film_text.title ( text ) , film_text.description ( text ) ]\ntable actor , columns = [ actor.actor_id ( integer | primary key ) , actor.first_name ( text ) , actor.last_name ( text ) , actor.last_update ( datetime ) ]\ntable address , columns = [ address.address_id ( integer | primary key ) , address.address ( text ) , address.address2 ( text ) , address.district ( text ) , address.city_id ( integer ) , address.postal_code ( text ) , address.phone ( text ) , address.last_update ( datetime ) ]\ntable category , columns = [ category.category_id ( integer | primary key ) , category.name ( text ) , category.last_update ( datetime ) ]\ntable city , columns = [ city.city_id ( integer | primary key ) , city.city ( text ) , city.country_id ( integer ) , city.last_update ( datetime ) ]\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country ( text | comment : the name of the country ) , country.last_update ( datetime ) ]\ntable customer , columns = [ customer.customer_id ( integer | primary key | comment : country id ) , customer.store_id ( integer ) , customer.first_name ( text ) , customer.last_name ( text ) , customer.email ( text ) , customer.address_id ( integer ) , customer.active ( integer ) , customer.create_date ( datetime ) , customer.last_update ( datetime ) ]\ntable film , columns = [ film.film_id ( integer | primary key ) , film.title ( text ) , film.description ( text ) , film.release_year ( text ) , film.language_id ( integer ) , film.original_language_id ( integer ) , film.rental_duration ( integer ) , film.rental_rate ( real ) , film.length ( integer ) , film.replacement_cost ( real ) , film.rating ( text ) , film.special_features ( text ) , film.last_update ( datetime ) ]\ntable film_actor , columns = [ film_actor.actor_id ( integer | primary key ) , film_actor.film_id ( integer | primary key ) , film_actor.last_update ( datetime ) ]\ntable film_category , columns = [ film_category.film_id ( integer | primary key ) , film_category.category_id ( integer | primary key ) , film_category.last_update ( datetime ) ]\ntable inventory , columns = [ inventory.inventory_id ( integer | primary key ) , inventory.film_id ( integer ) , inventory.store_id ( integer ) , inventory.last_update ( datetime ) ]\ntable language , columns = [ language.language_id ( integer | primary key ) , language.name ( text ) , language.last_update ( datetime ) ]\ntable payment , columns = [ payment.payment_id ( integer | primary key ) , payment.customer_id ( integer ) , payment.staff_id ( integer ) , payment.rental_id ( integer ) , payment.amount ( real ) , payment.payment_date ( datetime ) , payment.last_update ( datetime ) ]\ntable rental , columns = [ rental.rental_id ( integer | primary key ) , rental.rental_date ( datetime ) , rental.inventory_id ( integer ) , rental.customer_id ( integer ) , rental.return_date ( datetime ) , rental.staff_id ( integer ) , rental.last_update ( datetime ) ]\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.first_name ( text ) , staff.last_name ( text ) , staff.address_id ( integer ) , staff.picture ( blob | comment : picture of the staff ) , staff.email ( text | comment : email of the staff ) , staff.store_id ( integer ) , staff.active ( integer ) , staff.username ( text ) , staff.password ( text ) , staff.last_update ( datetime ) ]\ntable store , columns = [ store.store_id ( integer | primary key ) , store.manager_staff_id ( integer ) , store.address_id ( integer ) , store.last_update ( datetime ) ]\nforeign keys : None\nmatched contents :\nfilm_text.title ( ACADEMY DINOSAUR )\nfilm.title ( ACADEMY DINOSAUR )",
  "database schema :\ntable basic_info , columns = [ basic_info.stk_code ( text | primary key | comment : securities code ) , basic_info.stk_name ( text | comment : securities name ) ]\ntable balance_sheet , columns = [ balance_sheet.stk_code ( text | comment : securities code ) , balance_sheet.cash_cb ( real | comment : cash and deposits with central bank (in yuan) ) , balance_sheet.ib_deposits ( real | comment : due from interbank deposits (in yuan) ) , balance_sheet.prec_metals ( real | comment : noble metal (in yuan) ) , balance_sheet.lending_funds ( real | comment : lending funds (in yuan) ) , balance_sheet.trad_fas ( real | comment : trading financial assets (in yuan) ) , balance_sheet.deriv_assets ( real | comment : derivative financial assets (in yuan) ) , balance_sheet.buyback_fas ( real | comment : purchase of resale financial assets (in yuan) ) , balance_sheet.int_receiv ( real | comment : interest receivable (in yuan) ) , balance_sheet.loans_adv ( real | comment : issuance of loans and advances (in yuan) ) , balance_sheet.avail_sale_fas ( real | comment : available-for-sale financial assets (in yuan) ) , balance_sheet.held_mat_invest ( real | comment : held-to-maturity investments (in yuan) ) , balance_sheet.recv_invest ( real | comment : accounts receivable investment (in yuan) ) , balance_sheet.lt_eq_invest ( real | comment : long term equity investment (in yuan) ) , balance_sheet.inv_real_estate ( real | comment : investment real estate (in yuan) ) , balance_sheet.fix_assets ( real | comment : fixed assets (in yuan) ) , balance_sheet.intang_assets ( real | comment : intangible assets (in yuan) ) , balance_sheet.def_it_assets ( real | comment : deferred tax assets (in yuan) ) , balance_sheet.oth_assets ( real | comment : other assets (in yuan) ) , balance_sheet.tot_assets ( real | comment : total assets (in yuan) ) , balance_sheet.bor_cb ( real | comment : borrowing from the central bank (in yuan) ) , balance_sheet.ib_dep_oth_fis ( real | comment : deposits from interbank and other financial institutions (in yuan) ) , balance_sheet.bor_funds_oth_fis ( real | comment : borrowing funds (in yuan) ) , balance_sheet.trad_fin_liab ( real | comment : trading financial liabilities (in yuan) ) , balance_sheet.deriv_liab ( real | comment : derivative financial liabilities (in yuan) ) , balance_sheet.sell_rep_fas ( real | comment : financial assets sold for repurchase (in yuan) ) , balance_sheet.acc_deposits ( real | comment : deposit absorption (in yuan) ) , balance_sheet.emp_comp_pay ( real | comment : payable employee compensation (in yuan) ) , balance_sheet.tax_pay ( real | comment : taxes and fees payable (in yuan) ) , balance_sheet.int_pay ( real | comment : interest payable (in yuan) ) , balance_sheet.est_liab ( real | comment : estimated liabilities (in yuan) ) , balance_sheet.bonds_pay ( real | comment : bonds payable (in yuan) ) , balance_sheet.def_it_liab ( real | comment : deferred tax liability (in yuan) ) , balance_sheet.oth_liab ( real | comment : other liabilities (in yuan) ) , balance_sheet.tot_liab ( real | comment : total liabilities (in yuan) ) , balance_sheet.paid_up_cap ( real | comment : paid-in capital (or share capital) (in yuan) ) , balance_sheet.cap_reserves ( real | comment : capital reserve (in yuan) ) , balance_sheet.treas_stock ( real | comment : treasury stock (in yuan) ) , balance_sheet.sur_reserves ( real | comment : surplus reserves (in yuan) ) , balance_sheet.gen_risk_res ( real | comment : general risk preparation (in yuan) ) , balance_sheet.undist_profits ( real | comment : undistributed profits (in yuan) ) , balance_sheet.exch_diff_cash ( real | comment : translation difference of foreign currency statements (in yuan) ) , balance_sheet.own_eq_attr_parent ( real | comment : total owner's equity attributable to the parent company (in yuan) ) , balance_sheet.minor_int_eq ( real | comment : minority shareholders' equity (in yuan) ) , balance_sheet.tot_own_eq ( real | comment : total owner's equity (in yuan) ) , balance_sheet.tot_liab_own_eq ( real | comment : total liabilities and owner's equity (in yuan) ) ]\ntable income_statement , columns = [ income_statement.stk_code ( text | comment : securities code ) , income_statement.oper_rev ( real | comment : operating income (in yuan) ) , income_statement.net_int_inc ( real | comment : net interest income (in yuan) ) , income_statement.int_inc ( real | comment : interest income (in yuan) ) , income_statement.int_exp ( real | comment : interest expenses (in yuan) ) , income_statement.fee_com_net_inc ( real | comment : net income from handling fees and commissions (in yuan) ) , income_statement.fee_com_inc ( real | comment : fee and commission income (in yuan) ) , income_statement.fee_com_exp ( real | comment : handling fees and commission expenses (in yuan) ) , income_statement.inv_inc ( real | comment : investment income (in yuan) ) , income_statement.inv_inc_assoc_jv ( real | comment : investment income from associates and joint ventures (in yuan) ) , income_statement.fv_change_inc ( real | comment : income from changes in fair value (in yuan) ) , income_statement.exch_gain_inc ( real | comment : exchange gains (in yuan) ) , income_statement.oth_biz_inc ( real | comment : other business income (in yuan) ) , income_statement.oper_exp ( real | comment : operating expenses (in yuan) ) , income_statement.tax_n_surs ( real | comment : taxes and surcharges (in yuan) ) , income_statement.gen_n_admin_exps ( real | comment : business and management fees (in yuan) ) , income_statement.assets_imp_loss ( real | comment : assets impairment loss (in yuan) ) , income_statement.oth_biz_costs ( real | comment : other business costs (in yuan) ) , income_statement.oper_profit ( real | comment : operating profit (in yuan) ) , income_statement.non_op_rev ( real | comment : non operating income (in yuan) ) , income_statement.non_op_exp ( real | comment : non operating expenses (in yuan) ) , income_statement.loss_disposal_nonc_assets ( real | comment : loss on disposal of non current assets (in yuan) ) , income_statement.tot_profit ( real | comment : total profit (in yuan) ) , income_statement.income_tax_exp ( real | comment : income tax expenses (in yuan) ) , income_statement.net_profit ( real | comment : net profit (in yuan) ) , income_statement.attr_parent_net_profit ( real | comment : net profit attributable to the owner of the parent company (in yuan) ) , income_statement.minor_int_inc_loss ( real | comment : minority interest (in yuan) ) , income_statement.basic_eps ( real | comment : basic earnings per share (in yuan) ) , income_statement.diluted_eps ( real | comment : diluted earnings per share (in yuan) ) , income_statement.oth_compre_inc ( real | comment : other comprehensive income (in yuan) ) , income_statement.tot_compre_inc ( real | comment : total comprehensive income (in yuan) ) , income_statement.attr_parent_shareholders_compre_inc ( real | comment : total comprehensive income attributable to shareholders of the parent company (in yuan) ) , income_statement.minor_int_shareholders_compre_inc ( real | comment : total comprehensive income attributable to minority shareholders (in yuan) ) ]\ntable cash_flow_statement , columns = [ cash_flow_statement.stk_code ( text | comment : securities code ) , cash_flow_statement.net_inc_cust_deposits_ib_deposits ( real | comment : net increase in customer deposits and interbank deposits (in yuan) ) , cash_flow_statement.net_inc_borrowings_cb ( real | comment : net increase in borrowings from the central bank (in yuan) ) , cash_flow_statement.net_inc_ib_borrowings ( real | comment : net increase in borrowing funds from other financial institutions (in yuan) ) , cash_flow_statement.cash_int_commission_collected ( real | comment : cash received for interest, handling fees, and commissions (in yuan) ) , cash_flow_statement.cash_oth_oper_activities ( real | comment : received other cash related to operating activities (in yuan) ) , cash_flow_statement.op_cf_sub ( real | comment : subtotal of cash inflows from operating activities (in yuan) ) , cash_flow_statement.cust_loans_net_inc ( real | comment : net increase in customer loans and advances (in yuan) ) , cash_flow_statement.cenbank_interbank_net_inc ( real | comment : net increase in deposits with central bank and interbank funds (in yuan) ) , cash_flow_statement.cash_pay_int_fees_com ( real | comment : cash paid for interest, handling fees, and commissions (in yuan) ) , cash_flow_statement.cash_pay_emp ( real | comment : cash paid to and on behalf of employees (in yuan) ) , cash_flow_statement.cash_pay_taxes ( real | comment : various taxes and fees paid (in yuan) ) , cash_flow_statement.cash_pay_op_other ( real | comment : other cash payments related to operating activities (in yuan) ) , cash_flow_statement.op_cf_out_sub ( real | comment : subtotal of cash outflows from operating activities (in yuan) ) , cash_flow_statement.net_cf_op ( real | comment : net cash flow generated from operating activities (in yuan) ) , cash_flow_statement.recv_investment ( real | comment : cash received from investment recovery (in yuan) ) , cash_flow_statement.investment_income ( real | comment : cash received from obtaining investment income (in yuan) ) , cash_flow_statement.cash_disposal_assets ( real | comment : net cash received from disposal of fixed assets, intangible assets, and other long-term assets (in yuan) ) , cash_flow_statement.recv_other_invest ( real | comment : received other cash related to investment activities (in yuan) ) , cash_flow_statement.inv_cf_in_sub ( real | comment : subtotal of cash inflows from investment activities (in yuan) ) , cash_flow_statement.cash_pay_invest ( real | comment : cash paid for investment (in yuan) ) , cash_flow_statement.cash_pay_assets ( real | comment : cash paid for the purchase and construction of fixed assets, intangible assets, and other long-term assets (in yuan) ) , cash_flow_statement.cash_pay_inv_other ( real | comment : other cash payments related to investment activities (in yuan) ) , cash_flow_statement.inv_cf_out_sub ( real | comment : subtotal of cash outflows from investment activities (in yuan) ) , cash_flow_statement.net_cf_inv ( real | comment : net cash flow generated from investment activities (in yuan) ) , cash_flow_statement.absorb_investment ( real | comment : cash received from absorbing investments (in yuan) ) , cash_flow_statement.subsidiary_absorb_minority ( real | comment : cash received from subsidiaries absorbing minority shareholder investments (in yuan) ) , cash_flow_statement.issue_bonds ( real | comment : cash received from issuing bonds (in yuan) ) , cash_flow_statement.recv_other_fin ( real | comment : received other cash related to financing activities (in yuan) ) , cash_flow_statement.fin_cf_in_sub ( real | comment : subtotal of cash inflows from financing activities (in yuan) ) , cash_flow_statement.repay_debt ( real | comment : cash paid for debt repayment (in yuan) ) , cash_flow_statement.distribute_dividends_profits ( real | comment : cash paid for distributing dividends, profits, or paying interest (in yuan) ) , cash_flow_statement.subsidiary_pay_minority ( real | comment : dividends and profits paid by subsidiaries to minority shareholders (in yuan) ) , cash_flow_statement.cash_pay_fin_other ( real | comment : other cash payments related to financing activities (in yuan) ) , cash_flow_statement.fin_cf_out_sub ( real | comment : subtotal of cash outflows from financing activities (in yuan) ) , cash_flow_statement.net_cf_fin ( real | comment : net cash flow generated from financing activities (in yuan) ) , cash_flow_statement.fx_rate_change_cash ( real | comment : the impact of exchange rate changes on cash and cash equivalents (in yuan) ) , cash_flow_statement.net_cf_cash_equiv ( real | comment : net increase in cash and cash equivalents (in yuan) ) , cash_flow_statement.initial_cash_equiv ( real | comment : opening balance of cash and cash equivalents (in yuan) ) , cash_flow_statement.final_cash_equiv ( real | comment : closing balance of cash and cash equivalents (in yuan) ) , cash_flow_statement.cf_stmt_net_income ( real | comment : cash flow statement - net profit (in yuan) ) , cash_flow_statement.asset_impairment_dec ( real | comment : asset impairment provision (in yuan) ) , cash_flow_statement.fixed_asset_dep_amort_dec ( real | comment : depreciation of fixed assets, depletion of oil and gas assets, and depreciation of productive biological assets (in yuan) ) , cash_flow_statement.intangible_asset_amortization ( real | comment : amortization of intangible assets (in yuan) ) , cash_flow_statement.longterm_amortization ( real | comment : amortization of long-term deferred expenses (in yuan) ) , cash_flow_statement.loss_disposal_fixed_assets_dec ( real | comment : losses on disposal of fixed assets, intangible assets, and other long-term assets (in yuan) ) , cash_flow_statement.fixed_asset_scrap_loss ( real | comment : loss on scrapping of fixed assets (in yuan) ) , cash_flow_statement.fair_value_change_loss ( real | comment : loss from changes in fair value (in yuan) ) , cash_flow_statement.cf_stmt_fin_expenses ( real | comment : cash flow statement - financial expenses (in yuan) ) , cash_flow_statement.investment_loss ( real | comment : investment losses (in yuan) ) , cash_flow_statement.dit_asset_reduction ( real | comment : decrease in deferred income tax assets (in yuan) ) , cash_flow_statement.dit_liability_increase ( real | comment : increase in deferred income tax liabilities (in yuan) ) , cash_flow_statement.inventory_decrease ( real | comment : decrease in inventory (in yuan) ) , cash_flow_statement.oper_receivables_decrease ( real | comment : reduction in operating receivables (in yuan) ) , cash_flow_statement.oper_payables_increase ( real | comment : increase in operating payables (in yuan) ) , cash_flow_statement.other ( real | comment : other (in yuan) ) , cash_flow_statement.im_ncf_oper_activities ( real | comment : indirect method - net cash flow generated from operating activities (in yuan) ) , cash_flow_statement.debt_converted_capital ( real | comment : debt converted to capital (in yuan) ) , cash_flow_statement.conv_bonds_maturing_within_1y ( real | comment : convertible corporate bonds maturing within one year (in yuan) ) , cash_flow_statement.fin_lease_additions_fixed_assets ( real | comment : fixed assets acquired through financing lease (in yuan) ) , cash_flow_statement.cash_end_period ( real | comment : closing balance of cash (in yuan) ) , cash_flow_statement.cash_begin_period ( real | comment : opening balance of cash (in yuan) ) , cash_flow_statement.cash_eq_end_period ( real | comment : closing balance of cash equivalents (in yuan) ) , cash_flow_statement.cash_eq_begin_period ( real | comment : opening balance of cash equivalents (in yuan) ) , cash_flow_statement.im_ncf_cash_eq ( real | comment : indirect method - net increase in cash and cash equivalents (in yuan) ) ]\nforeign keys :\nbalance_sheet.stk_code = basic_info.stk_code\nincome_statement.stk_code = basic_info.stk_code\ncash_flow_statement.stk_code = basic_info.stk_code\nmatched contents : None"
]