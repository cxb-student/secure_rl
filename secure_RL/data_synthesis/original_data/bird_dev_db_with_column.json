[
  "database schema :\ntable frpm , columns = [ frpm.cdscode ( text | primary key | example values : 01100170109835, 01100170112607 ) , frpm.`academic year` ( text | example values : 2014-2015 ) , frpm.`county code` ( text | example values : 01, 02 ) , frpm.`district code` ( integer | example values : 10017, 31609 ) , frpm.`school code` ( text | example values : 0109835, 0112607 ) , frpm.`county name` ( text | example values : Alameda, Alpine ) , frpm.`district name` ( text ) , frpm.`school name` ( text | example values : FAME Public Charter ) , frpm.`district type` ( text | example values : State Special Schools ) , frpm.`school type` ( text | example values : K-12 Schools (Public), High Schools (Public) ) , frpm.`educational option type` ( text | example values : Traditional, Juvenile Court School ) , frpm.`nslp provision status` ( text | example values : Breakfast Provision 2, Provision 2 ) , frpm.`charter school (y/n)` ( integer | example values : 1, 0 ) , frpm.`charter school number` ( text | example values : 0728, 0811 ) , frpm.`charter funding type` ( text | example values : Directly funded, Locally funded ) , frpm.irc ( integer | example values : 1, 0 ) , frpm.`low grade` ( text | example values : K, 9 ) , frpm.`high grade` ( text | example values : 12, 8 ) , frpm.`enrollment (k-12)` ( real | example values : 1087.0, 395.0 ) , frpm.`free meal count (k-12)` ( real | example values : 565.0, 186.0 ) , frpm.`percent (%) eligible free (k-12)` ( real | example values : 0.519779208831647, 0.470886075949367 ) , frpm.`frpm count (k-12)` ( real | example values : 715.0, 186.0 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | example values : 0.657773689052438, 0.470886075949367 ) , frpm.`enrollment (ages 5-17)` ( real | example values : 1070.0, 376.0 ) , frpm.`free meal count (ages 5-17)` ( real | example values : 553.0, 182.0 ) , frpm.`percent (%) eligible free (ages 5-17)` ( real | example values : 0.516822429906542, 0.484042553191489 ) , frpm.`frpm count (ages 5-17)` ( real | example values : 702.0, 182.0 ) , frpm.`percent (%) eligible frpm (ages 5-17)` ( real | example values : 0.65607476635514, 0.484042553191489 ) , frpm.`2013-14 calpads fall 1 certification status` ( integer | example values : 1 ) ]\ntable satscores , columns = [ satscores.cds ( text | primary key | example values : 10101080000000, 10101080109991 ) , satscores.rtype ( text | example values : D, S ) , satscores.sname ( text | comment : school name | example values : FAME Public Charter ) , satscores.dname ( text | comment : district name | example values : Alameda Unified ) , satscores.cname ( text | comment : county name | example values : Alameda, Amador ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | example values : 398, 62 ) , satscores.numtsttakr ( integer | comment : number of test takers | example values : 88, 17 ) , satscores.avgscrread ( integer | comment : average scores in reading | example values : 418, 503 ) , satscores.avgscrmath ( integer | comment : average scores in math | example values : 418, 546 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | example values : 417, 505 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | example values : 14, 9 ) ]\ntable schools , columns = [ schools.cdscode ( text | primary key | example values : 01100170000000, 01100170109835 ) , schools.ncesdist ( text | comment : national center for educational statistics school district identification number | example values : 0691051, 0600002 ) , schools.ncesschool ( text | comment : national center for educational statistics school identification number | example values : 10546, 10947 ) , schools.statustype ( text | example values : Active, Closed ) , schools.county ( text | example values : Alameda, Alpine ) , schools.district ( text ) , schools.school ( text | example values : FAME Public Charter ) , schools.street ( text | example values : 313 West Winton Avenue ) , schools.streetabr ( text | comment : street address | example values : 313 West Winton Ave. ) , schools.city ( text | example values : Hayward, Newark ) , schools.zip ( text | example values : 94544-1136, 94560-5359 ) , schools.state ( text | example values : CA ) , schools.mailstreet ( text | example values : 313 West Winton Avenue ) , schools.mailstrabr ( text | comment : mailing street address | example values : 313 West Winton Ave. ) , schools.mailcity ( text | comment : mailing city | example values : Hayward, Newark ) , schools.mailzip ( text | comment : mailing zip | example values : 94544-1136, 94560-5359 ) , schools.mailstate ( text | comment : mailing state | example values : CA ) , schools.phone ( text | example values : (510) 887-0152, (510) 596-8901 ) , schools.ext ( text | comment : extension | example values : 130, 1240 ) , schools.website ( text | example values : www.acoe.org, www.envisionacademy.org/ ) , schools.opendate ( date | example values : 2005-08-29, 2006-08-28 ) , schools.closeddate ( date | example values : 2015-07-31, 2015-06-30 ) , schools.charter ( integer | example values : 1, 0 ) , schools.charternum ( text | example values : 0728, 0811 ) , schools.fundingtype ( text | example values : Directly funded, Locally funded ) , schools.doc ( text | comment : district ownership code | example values : 00, 31 ) , schools.doctype ( text | comment : the district ownership code type | example values : State Special Schools ) , schools.soc ( text | comment : school ownership code | example values : 65, 66 ) , schools.soctype ( text | comment : school ownership code type | example values : K-12 Schools (Public), High Schools (Public) ) , schools.edopscode ( text | comment : education option code | example values : TRAD, JUV ) , schools.edopsname ( text | comment : educational option name | example values : Traditional, Juvenile Court School ) , schools.eilcode ( text | comment : educational instruction level code | example values : ELEMHIGH, HS ) , schools.eilname ( text | comment : educational instruction level name | example values : High School ) , schools.gsoffered ( text | comment : grade span offered | example values : K-12, 9-12 ) , schools.gsserved ( text | comment : grade span served. | example values : K-12, 9-12 ) , schools.virtual ( text | example values : P, N ) , schools.magnet ( integer | example values : 0, 1 ) , schools.latitude ( real | example values : 37.658212, 37.521436 ) , schools.longitude ( real | example values : -122.09713, -121.99391 ) , schools.admfname1 ( text | comment : administrator's first name 1 | example values : L Karen, Laura ) , schools.admlname1 ( text | comment : administrator's last name 1 | example values : Monroe, Robell ) , schools.admemail1 ( text | comment : administrator's email address 1 | example values : lkmonroe@acoe.org, laura@envisionacademy.org ) , schools.admfname2 ( text | comment : administrator's first name 2 | example values : Sau-Lim (Lance), Jennifer ) , schools.admlname2 ( text | comment : administrator's last name 2 | example values : Tsang, Koelling ) , schools.admemail2 ( text | comment : administrator's email address 2 | example values : stsang@unityhigh.org, jkoelling@efcps.net ) , schools.admfname3 ( text | comment : administrator's first name 3 | example values : Drew, Irma ) , schools.admlname3 ( text | comment : administrator's last name 3 | example values : Sarratore, Munoz ) , schools.admemail3 ( text | comment : administrator's email address 3 | example values : gmunoz@piedmont.k12.ca.us ) , schools.lastupdate ( date | example values : 2015-06-23, 2015-09-01 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county name` ( Alameda )\nsatscores.cname ( Alameda )\nschools.county ( Alameda )\nschools.city ( Alameda )\nschools.mailcity ( Alameda )\nschools.gsoffered ( K-12 )\nschools.gsserved ( K-12 )\nschools.admlname1 ( Free )",
  "database schema :\ntable account , columns = [ account.account_id ( integer | primary key | example values : 1, 2 ) , account.district_id ( integer | comment : location of branch | example values : 18, 1 ) , account.frequency ( text | example values : POPLATEK MESICNE, POPLATEK TYDNE ) , account.date ( date | example values : 1995-03-24, 1993-02-26 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | example values : 1, 2 ) , card.disp_id ( integer | comment : disposition id | example values : 9, 19 ) , card.type ( text | example values : gold, classic ) , card.issued ( date | example values : 1998-10-16, 1998-03-13 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | example values : 1, 2 ) , client.gender ( text | example values : F, M ) , client.birth_date ( date | example values : 1970-12-13, 1945-02-04 ) , client.district_id ( integer | comment : location of branch | example values : 18, 1 ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | example values : 1, 2 ) , disp.client_id ( integer | example values : 1, 2 ) , disp.account_id ( integer | example values : 1, 2 ) , disp.type ( text | example values : OWNER, DISPONENT ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | example values : 1, 2 ) , district.a2 ( text | comment : district_name | example values : Hl.m. Praha, Benesov ) , district.a3 ( text | comment : region | example values : Prague, central Bohemia ) , district.a4 ( text | comment : number of inhabitants | example values : 1204953, 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | example values : 0, 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | example values : 0, 26 ) , district.a7 ( text | comment : no. of municipalities with inhabitants 2000-9999 | example values : 0, 6 ) , district.a8 ( integer | comment : no. of municipalities with inhabitants > 10000 | example values : 1, 2 ) , district.a9 ( integer | example values : 1, 5 ) , district.a10 ( real | comment : ratio of urban inhabitants | example values : 100.0, 46.7 ) , district.a11 ( integer | comment : average salary | example values : 12541, 8507 ) , district.a12 ( real | comment : unemployment rate 1995 | example values : 0.2, 1.6 ) , district.a13 ( real | comment : unemployment rate 1996 | example values : 0.43, 1.85 ) , district.a14 ( integer | comment : no. of entrepreneurs per 1000 inhabitants | example values : 167, 132 ) , district.a15 ( integer | comment : no. of committed crimes 1995 | example values : 85677, 2159 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | example values : 99107, 2674 ) ]\ntable loan , columns = [ loan.loan_id ( integer | primary key | example values : 4959, 4961 ) , loan.account_id ( integer | example values : 2, 19 ) , loan.date ( date | example values : 1994-01-05, 1996-04-29 ) , loan.amount ( integer | example values : 80952, 30276 ) , loan.duration ( integer | example values : 24, 12 ) , loan.payments ( real | comment : monthly payments | example values : 3373.0, 2523.0 ) , loan.status ( text | example values : A, B ) ]\ntable order , columns = [ order.order_id ( integer | primary key | example values : 29401, 29402 ) , order.account_id ( integer | example values : 1, 2 ) , order.bank_to ( text | comment : bank of the recipient | example values : YZ, ST ) , order.account_to ( integer | comment : account of the recipient | example values : 87144583, 89597016 ) , order.amount ( real | comment : debited amount | example values : 2452.0, 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | example values : SIPO, UVER ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | example values : 1, 5 ) , trans.account_id ( integer | example values : 1, 2 ) , trans.date ( date | comment : date of transaction | example values : 1995-03-24, 1995-04-13 ) , trans.type ( text | comment : +/- transaction | example values : PRIJEM, VYDAJ ) , trans.operation ( text | comment : mode of transaction | example values : VKLAD, PREVOD Z UCTU ) , trans.amount ( integer | comment : amount of money | example values : 1000, 3679 ) , trans.balance ( integer | comment : balance after transaction | example values : 1000, 4679 ) , trans.k_symbol ( text | comment : characterization of the transaction | example values : SIPO, SLUZBY ) , trans.bank ( text | comment : bank of the partner | example values : AB, YZ ) , trans.account ( integer | comment : account of the partner | example values : 41403269, 87144583 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( east Bohemia )",
  "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | example values : TR000_1, TR000_2 ) , atom.molecule_id ( text | example values : TR000, TR001 ) , atom.element ( text | example values : cl, c ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | example values : TR000_1_2, TR000_2_3 ) , bond.molecule_id ( text | example values : TR000, TR001 ) , bond.bond_type ( text | example values : -, = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | example values : TR000_1, TR000_2 ) , connected.atom_id2 ( text | primary key | example values : TR000_2, TR000_1 ) , connected.bond_id ( text | example values : TR000_1_2, TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | example values : TR000, TR001 ) , molecule.label ( text | example values : +, - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None",
  "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | example values : 41138, 1349 ) , cards.artist ( text | example values : Pete Venters, Volkan Baǵa ) , cards.asciiname ( text | example values : El-Hajjaj, Junun Efreet ) , cards.availability ( text | example values : mtgo,paper, paper ) , cards.bordercolor ( text | example values : black, white ) , cards.cardkingdomfoilid ( text | example values : 123094, 123095 ) , cards.cardkingdomid ( text | example values : 122719, 122720 ) , cards.coloridentity ( text | example values : W, B ) , cards.colorindicator ( text | example values : U, G ) , cards.colors ( text | example values : W, B ) , cards.convertedmanacost ( real | example values : 7.0, 5.0 ) , cards.dueldeck ( text | example values : a, b ) , cards.edhrecrank ( integer | comment : rec rank in edh | example values : 15650, 12702 ) , cards.faceconvertedmanacost ( real | example values : 4.0, 5.0 ) , cards.facename ( text | example values : Dusk, Dawn ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.frameeffects ( text | example values : legendary, nyxtouched ) , cards.frameversion ( text | example values : 2003, 1993 ) , cards.hand ( text | example values : 1, 0 ) , cards.hasalternativedecklimit ( integer | example values : 0, 1 ) , cards.hascontentwarning ( integer | example values : 0, 1 ) , cards.hasfoil ( integer | example values : 0, 1 ) , cards.hasnonfoil ( integer | example values : 1, 0 ) , cards.isalternative ( integer | example values : 0, 1 ) , cards.isfullart ( integer | example values : 0, 1 ) , cards.isonlineonly ( integer | example values : 0, 1 ) , cards.isoversized ( integer | example values : 0, 1 ) , cards.ispromo ( integer | comment : is promotion | example values : 0, 1 ) , cards.isreprint ( integer | example values : 1, 0 ) , cards.isreserved ( integer | example values : 0, 1 ) , cards.isstarter ( integer | example values : 0, 1 ) , cards.isstoryspotlight ( integer | example values : 0, 1 ) , cards.istextless ( integer | example values : 0, 1 ) , cards.istimeshifted ( integer | example values : 0, 1 ) , cards.keywords ( text | example values : First strike, Flying ) , cards.layout ( text | example values : normal, aftermath ) , cards.leadershipskills ( text ) , cards.life ( text | example values : -5, -1 ) , cards.loyalty ( text | example values : 6, 3 ) , cards.manacost ( text | example values : {5}{W}{W}, {4}{W} ) , cards.mcmid ( text | example values : 16165, 16166 ) , cards.mcmmetaid ( text | example values : 156, 176 ) , cards.mtgarenaid ( text | example values : 74983, 74986 ) , cards.mtgjsonv4id ( text ) , cards.mtgofoilid ( text | example values : 27501, 26993 ) , cards.mtgoid ( text | example values : 27500, 26992 ) , cards.multiverseid ( text | example values : 130550, 129465 ) , cards.name ( text | example values : Ancestor's Chosen, Angel of Mercy ) , cards.number ( text | example values : 1, 2 ) , cards.originalreleasedate ( text | example values : 2012/12/1, 2006/12/1 ) , cards.originaltext ( text ) , cards.originaltype ( text | example values : Creature - Human Cleric, Creature - Angel ) , cards.otherfaceids ( text ) , cards.power ( text | example values : 4, 3 ) , cards.printings ( text | example values : 10E,JUD,UMA ) , cards.promotypes ( text | example values : boxtopper,boosterfun, boosterfun ) , cards.purchaseurls ( text ) , cards.rarity ( text | example values : uncommon, common ) , cards.scryfallid ( text ) , cards.scryfallillustrationid ( text ) , cards.scryfalloracleid ( text ) , cards.setcode ( text | example values : 10E, 2ED ) , cards.side ( text | example values : a, b ) , cards.subtypes ( text | example values : Human,Cleric, Angel ) , cards.supertypes ( text | example values : Legendary, Basic ) , cards.tcgplayerproductid ( text | example values : 15032, 15033 ) , cards.text ( text ) , cards.toughness ( text | example values : 4, 3 ) , cards.type ( text | example values : Creature — Human Cleric, Creature — Angel ) , cards.types ( text | example values : Creature, Instant ) , cards.uuid ( text ) , cards.variations ( text ) , cards.watermark ( text | example values : set (HOU), set (LGN) ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | example values : 1, 2 ) , foreign_data.flavortext ( text ) , foreign_data.language ( text | example values : German, Spanish ) , foreign_data.multiverseid ( integer | example values : 148411, 150317 ) , foreign_data.name ( text | example values : Ausgewählter der Ahnfrau, Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | example values : Criatura — Clérigo humano ) , foreign_data.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | example values : 1, 2 ) , legalities.format ( text | example values : commander, duel ) , legalities.status ( text | example values : Legal, Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | example values : 1, 2 ) , sets.basesetsize ( integer | example values : 383, 302 ) , sets.block ( text | example values : Core Set, Mirrodin ) , sets.booster ( text ) , sets.code ( text | example values : 10E, 2ED ) , sets.isfoilonly ( integer | example values : 0, 1 ) , sets.isforeignonly ( integer | example values : 0, 1 ) , sets.isnonfoilonly ( integer | example values : 0, 1 ) , sets.isonlineonly ( integer | example values : 0, 1 ) , sets.ispartialpreview ( integer | example values : 0, 1 ) , sets.keyrunecode ( text | example values : 10E, 2ED ) , sets.mcmid ( integer | comment : magic card market id | example values : 74, 3204 ) , sets.mcmidextras ( integer | comment : magic card market id extras | example values : 3209, 3459 ) , sets.mcmname ( text | comment : magic card market name | example values : Tenth Edition, Double Masters ) , sets.mtgocode ( text | comment : magic the gathering online code | example values : 10E, 2XM ) , sets.name ( text | example values : Tenth Edition, Unlimited Edition ) , sets.parentcode ( text | example values : JMP, MH1 ) , sets.releasedate ( date | example values : 2007-07-13, 1993-12-01 ) , sets.tcgplayergroupid ( integer | example values : 1, 115 ) , sets.totalsetsize ( integer | example values : 508, 302 ) , sets.type ( text | example values : core, masters ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | example values : 1, 2 ) , set_translations.language ( text | example values : Chinese Simplified, Chinese Traditional ) , set_translations.setcode ( text | example values : 10E, 4ED ) , set_translations.translation ( text | example values : 核心系列第十版, Dixième édition ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | example values : 1, 2 ) , rulings.date ( date | example values : 2007-07-15, 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None",
  "database schema :\ntable badges , columns = [ badges.id ( integer | primary key | example values : 1, 2 ) , badges.userid ( integer | example values : 5, 6 ) , badges.name ( text | example values : Teacher, Student ) , badges.date ( datetime | example values : 2010-07-19 19:39:07.0, 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | example values : 1, 2 ) , comments.postid ( integer | example values : 3, 5 ) , comments.score ( integer | example values : 5, 0 ) , comments.text ( text ) , comments.creationdate ( datetime | example values : 2010-07-19 19:15:52.0, 2010-07-19 19:16:14.0 ) , comments.userid ( integer | example values : 13, 37 ) , comments.userdisplayname ( text | example values : user28, Statprof ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | example values : 1, 2 ) , posthistory.posthistorytypeid ( integer | example values : 2, 1 ) , posthistory.postid ( integer | example values : 1, 2 ) , posthistory.revisionguid ( text ) , posthistory.creationdate ( datetime | example values : 2010-07-19 19:12:12.0, 2010-07-19 19:12:57.0 ) , posthistory.userid ( integer | example values : 8, 24 ) , posthistory.text ( text ) , posthistory.comment ( text | example values : edited tags ) , posthistory.userdisplayname ( text | example values : user28 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | example values : 108, 145 ) , postlinks.creationdate ( datetime | example values : 2010-07-21 14:47:33.0, 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | example values : 395, 548 ) , postlinks.relatedpostid ( integer | example values : 173, 539 ) , postlinks.linktypeid ( integer | example values : 1, 3 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | example values : 1, 2 ) , posts.posttypeid ( integer | example values : 1, 2 ) , posts.acceptedanswerid ( integer | example values : 15, 59 ) , posts.creaiondate ( datetime | comment : creation date | example values : 2010-07-19 19:12:12.0, 2010-07-19 19:12:57.0 ) , posts.score ( integer | example values : 23, 22 ) , posts.viewcount ( integer | example values : 1278, 8198 ) , posts.body ( text ) , posts.owneruserid ( integer | example values : 8, 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | example values : 2010-09-15 21:08:26.0, 2012-11-12 09:21:54.0 ) , posts.title ( text | example values : What is normality? ) , posts.tags ( text ) , posts.answercount ( integer | example values : 5, 7 ) , posts.commentcount ( integer | example values : 1, 4 ) , posts.favoritecount ( integer | example values : 14, 8 ) , posts.lasteditoruserid ( integer | example values : 88, 183 ) , posts.lasteditdate ( datetime | example values : 2010-08-07 17:56:44.0, 2011-02-12 05:50:03.0 ) , posts.communityowneddate ( datetime | example values : 2010-07-19 19:13:28.0, 2010-07-19 19:14:43.0 ) , posts.parentid ( integer | example values : 3, 7 ) , posts.closeddate ( datetime | example values : 2010-07-19 20:19:46.0, 2010-08-05 13:06:12.0 ) , posts.ownerdisplayname ( text | example values : user28, user209 ) , posts.lasteditordisplayname ( text | example values : user28, user10525 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | example values : 1, 2 ) , tags.tagname ( text | example values : bayesian, prior ) , tags.count ( integer | example values : 1342, 168 ) , tags.excerptpostid ( integer | example values : 20258, 62158 ) , tags.wikipostid ( integer | example values : 20257, 62157 ) ]\ntable users , columns = [ users.id ( integer | primary key | example values : -1, 2 ) , users.reputation ( integer | example values : 1, 101 ) , users.creationdate ( datetime | example values : 2010-07-19 06:55:26.0, 2010-07-19 14:01:36.0 ) , users.displayname ( text | example values : Community, Geoff Dalgas ) , users.lastaccessdate ( datetime | example values : 2010-07-19 06:55:26.0, 2013-11-12 22:07:23.0 ) , users.websiteurl ( text | example values : http://stackoverflow.com ) , users.location ( text | example values : on the server farm, Corvallis, OR ) , users.aboutme ( text ) , users.views ( integer | example values : 0, 25 ) , users.upvotes ( integer | example values : 5007, 3 ) , users.downvotes ( integer | example values : 1920, 0 ) , users.accountid ( integer | example values : -1, 2 ) , users.age ( integer | example values : 37, 35 ) , users.profileimageurl ( text ) ]\ntable votes , columns = [ votes.id ( integer | primary key | example values : 1, 2 ) , votes.postid ( integer | example values : 3, 2 ) , votes.votetypeid ( integer | example values : 2, 5 ) , votes.creationdate ( date | example values : 2010-07-19, 2010-07-20 ) , votes.userid ( integer | example values : 58, 6 ) , votes.bountyamount ( integer | example values : 50, 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.userdisplayname ( User )\nposts.ownerdisplayname ( User )\nusers.displayname ( Jarrod Dixon , Harlan , Jarrod , user , useR , User )",
  "database schema :\ntable alignment , columns = [ alignment.id ( integer | primary key | example values : 1, 2 ) , alignment.alignment ( text | example values : Good, Bad ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | example values : 1, 2 ) , attribute.attribute_name ( text | example values : Intelligence, Strength ) ]\ntable colour , columns = [ colour.id ( integer | primary key | example values : 1, 2 ) , colour.colour ( text | example values : No Colour, Amber ) ]\ntable gender , columns = [ gender.id ( integer | primary key | example values : 1, 2 ) , gender.gender ( text | example values : Male, Female ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | example values : 1, 2 ) , publisher.publisher_name ( text | example values : ABC Studios ) ]\ntable race , columns = [ race.id ( integer | primary key | example values : 1, 2 ) , race.race ( text | example values : -, Alien ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | example values : 1, 2 ) , superhero.superhero_name ( text | example values : 3-D Man, A-Bomb ) , superhero.full_name ( text | example values : Charles Chandler, Richard Milhouse Jones ) , superhero.gender_id ( integer | example values : 1, 2 ) , superhero.eye_colour_id ( integer | example values : 9, 33 ) , superhero.hair_colour_id ( integer | example values : 13, 1 ) , superhero.skin_colour_id ( integer | example values : 1, 7 ) , superhero.race_id ( integer | example values : 1, 24 ) , superhero.publisher_id ( integer | example values : 13, 3 ) , superhero.alignment_id ( integer | example values : 1, 2 ) , superhero.height_cm ( integer | example values : 188, 203 ) , superhero.weight_kg ( integer | example values : 90, 441 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | example values : 1, 2 ) , hero_attribute.attribute_id ( integer | example values : 1, 2 ) , hero_attribute.attribute_value ( integer | example values : 80, 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | example values : 1, 2 ) , superpower.power_name ( text | example values : Agility, Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | example values : 1, 2 ) , hero_power.power_id ( integer | example values : 1, 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( 3-D Man )",
  "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | example values : 23, 61 ) , circuits.circuitref ( text | comment : circuit reference name | example values : sepang, bahrain ) , circuits.name ( text ) , circuits.location ( text | example values : Kuala Lumpur, Sakhir ) , circuits.country ( text | example values : Malaysia, Bahrain ) , circuits.lat ( real | comment : latitude | example values : 2.76083, 26.0325 ) , circuits.lng ( real | comment : longitude | example values : 101.738, 50.5106 ) , circuits.alt ( integer ) , circuits.url ( text ) ]\ntable constructors , columns = [ constructors.constructorid ( integer | primary key | example values : 147, 39 ) , constructors.constructorref ( text | comment : constructor reference name | example values : mclaren, bmw_sauber ) , constructors.name ( text | example values : AFM, AGS ) , constructors.nationality ( text | example values : British, German ) , constructors.url ( text ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | example values : 452, 625 ) , drivers.driverref ( text | comment : driver reference name | example values : hamilton, heidfeld ) , drivers.number ( integer | example values : 44, 6 ) , drivers.code ( text | example values : HAM, HEI ) , drivers.forename ( text | example values : Lewis, Nick ) , drivers.surname ( text | example values : Hamilton, Heidfeld ) , drivers.dob ( date | comment : date of birth | example values : 1985-01-07, 1977-05-10 ) , drivers.nationality ( text | example values : British, German ) , drivers.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | example values : 1950, 1951 ) , seasons.url ( text ) ]\ntable races , columns = [ races.raceid ( integer | primary key | example values : 837, 833 ) , races.year ( integer | example values : 2009, 2008 ) , races.round ( integer | example values : 1, 2 ) , races.circuitid ( integer | example values : 1, 2 ) , races.name ( text | example values : Australian Grand Prix, Malaysian Grand Prix ) , races.date ( date | example values : 2009-03-29, 2009-04-05 ) , races.time ( text | example values : 06:00:00, 09:00:00 ) , races.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.constructorresultsid ( integer | primary key | example values : 1, 2 ) , constructorresults.raceid ( integer | example values : 18, 19 ) , constructorresults.constructorid ( integer | example values : 1, 2 ) , constructorresults.points ( real | example values : 14.0, 8.0 ) , constructorresults.status ( text | example values : D ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorstandingsid ( integer | primary key | example values : 1, 2 ) , constructorstandings.raceid ( integer | example values : 18, 19 ) , constructorstandings.constructorid ( integer | example values : 1, 2 ) , constructorstandings.points ( real | example values : 14.0, 8.0 ) , constructorstandings.position ( integer | example values : 1, 3 ) , constructorstandings.positiontext ( text | example values : 1, 3 ) , constructorstandings.wins ( integer | example values : 1, 0 ) ]\ntable driverstandings , columns = [ driverstandings.driverstandingsid ( integer | primary key | example values : 1, 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | example values : 18, 19 ) , driverstandings.driverid ( integer | example values : 1, 2 ) , driverstandings.points ( real | example values : 10.0, 8.0 ) , driverstandings.position ( integer | example values : 1, 2 ) , driverstandings.positiontext ( text | example values : 1, 2 ) , driverstandings.wins ( integer | example values : 1, 0 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | example values : 1, 2 ) , laptimes.driverid ( integer | primary key | example values : 1, 2 ) , laptimes.lap ( integer | primary key | example values : 1, 2 ) , laptimes.position ( integer | example values : 13, 12 ) , laptimes.time ( text | example values : 1:49.088, 1:33.740 ) , laptimes.milliseconds ( integer | example values : 109088, 93740 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | example values : 841, 842 ) , pitstops.driverid ( integer | primary key | example values : 1, 2 ) , pitstops.stop ( integer | primary key | example values : 1, 2 ) , pitstops.lap ( integer | example values : 16, 36 ) , pitstops.time ( text | example values : 17:28:24, 17:59:29 ) , pitstops.duration ( text | example values : 23.227, 23.199 ) , pitstops.milliseconds ( integer | example values : 23227, 23199 ) ]\ntable qualifying , columns = [ qualifying.qualifyid ( integer | primary key | example values : 1, 2 ) , qualifying.raceid ( integer | example values : 18, 19 ) , qualifying.driverid ( integer | example values : 1, 9 ) , qualifying.constructorid ( integer | example values : 1, 2 ) , qualifying.number ( integer | example values : 22, 4 ) , qualifying.position ( integer | example values : 1, 2 ) , qualifying.q1 ( text | comment : qualifying 1 | example values : 1:26.572, 1:26.103 ) , qualifying.q2 ( text | comment : qualifying 2 | example values : 1:25.187, 1:25.315 ) , qualifying.q3 ( text | comment : qualifying 3 | example values : 1:26.714, 1:26.869 ) ]\ntable status , columns = [ status.statusid ( integer | primary key | example values : 1, 2 ) , status.status ( text | example values : Finished, Disqualified ) ]\ntable results , columns = [ results.resultid ( integer | primary key | example values : 1, 2 ) , results.raceid ( integer | example values : 18, 19 ) , results.driverid ( integer | example values : 1, 2 ) , results.constructorid ( integer | example values : 1, 2 ) , results.number ( integer | example values : 22, 3 ) , results.grid ( integer | example values : 1, 5 ) , results.position ( integer | example values : 1, 2 ) , results.positiontext ( text | example values : 1, 2 ) , results.positionorder ( integer | example values : 1, 2 ) , results.points ( real | example values : 10.0, 8.0 ) , results.laps ( integer | example values : 58, 57 ) , results.time ( text | example values : 1:34:50.616, +5.478 ) , results.milliseconds ( integer | example values : 5690616, 5696094 ) , results.fastestlap ( integer | example values : 39, 41 ) , results.rank ( integer | example values : 2, 3 ) , results.fastestlaptime ( text | example values : 1:27.452, 1:27.739 ) , results.fastestlapspeed ( text | example values : 218.300, 217.586 ) , results.statusid ( integer | example values : 1, 11 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nconstructorstandings.raceid = races.raceid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nqualifying.constructorid = constructors.constructorid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.statusid = status.statusid\nresults.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )",
  "database schema :\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | example values : 1, 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | example values : 218353, 189615 ) , player_attributes.player_api_id ( integer | example values : 505942, 155782 ) , player_attributes.date ( text | example values : 2016-02-18 00:00:00, 2015-11-19 00:00:00 ) , player_attributes.overall_rating ( integer | example values : 67, 62 ) , player_attributes.potential ( integer | example values : 71, 66 ) , player_attributes.preferred_foot ( text | example values : right, left ) , player_attributes.attacking_work_rate ( text | example values : medium, high ) , player_attributes.defensive_work_rate ( text | example values : medium, high ) , player_attributes.crossing ( integer | example values : 49, 48 ) , player_attributes.finishing ( integer | example values : 44, 43 ) , player_attributes.heading_accuracy ( integer | example values : 71, 70 ) , player_attributes.short_passing ( integer | example values : 61, 60 ) , player_attributes.volleys ( integer | example values : 44, 43 ) , player_attributes.dribbling ( integer | example values : 51, 50 ) , player_attributes.curve ( integer | example values : 45, 44 ) , player_attributes.free_kick_accuracy ( integer | example values : 39, 38 ) , player_attributes.long_passing ( integer | example values : 64, 63 ) , player_attributes.ball_control ( integer | example values : 49, 48 ) , player_attributes.acceleration ( integer | example values : 60, 79 ) , player_attributes.sprint_speed ( integer | example values : 64, 78 ) , player_attributes.agility ( integer | example values : 59, 78 ) , player_attributes.reactions ( integer | example values : 47, 46 ) , player_attributes.balance ( integer | example values : 65, 90 ) , player_attributes.shot_power ( integer | example values : 55, 54 ) , player_attributes.jumping ( integer | example values : 58, 85 ) , player_attributes.stamina ( integer | example values : 54, 79 ) , player_attributes.strength ( integer | example values : 76, 56 ) , player_attributes.long_shots ( integer | example values : 35, 34 ) , player_attributes.aggression ( integer | example values : 71, 63 ) , player_attributes.interceptions ( integer | example values : 70, 41 ) , player_attributes.positioning ( integer | example values : 45, 44 ) , player_attributes.vision ( integer | example values : 54, 53 ) , player_attributes.penalties ( integer | example values : 48, 47 ) , player_attributes.marking ( integer | example values : 65, 62 ) , player_attributes.standing_tackle ( integer | example values : 69, 66 ) , player_attributes.sliding_tackle ( integer | example values : 69, 66 ) , player_attributes.gk_diving ( integer | comment : goalkeep diving | example values : 6, 5 ) , player_attributes.gk_handling ( integer | comment : goalkeep handling | example values : 11, 10 ) , player_attributes.gk_kicking ( integer | comment : goalkeep kicking | example values : 10, 9 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | example values : 8, 7 ) , player_attributes.gk_reflexes ( integer | comment : goalkeep reflexes | example values : 8, 7 ) ]\ntable player , columns = [ player.id ( integer | primary key | example values : 3879, 401 ) , player.player_api_id ( integer | example values : 2625, 2752 ) , player.player_name ( text | example values : Aaron Appindangoye, Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | example values : 2, 6 ) , player.birthday ( text | example values : 1992-02-29 00:00:00, 1989-12-15 00:00:00 ) , player.height ( integer | example values : 182.88, 170.18 ) , player.weight ( integer | example values : 187, 146 ) ]\ntable league , columns = [ league.id ( integer | primary key | example values : 1, 1729 ) , league.country_id ( integer | example values : 1, 1729 ) , league.name ( text | example values : Belgium Jupiler League, England Premier League ) ]\ntable country , columns = [ country.id ( integer | primary key | example values : 1, 1729 ) , country.name ( text | example values : Belgium, England ) ]\ntable team , columns = [ team.id ( integer | primary key | example values : 31446, 1513 ) , team.team_api_id ( integer | example values : 1601, 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | example values : 673, 675 ) , team.team_long_name ( text | example values : KRC Genk, Beerschot AC ) , team.team_short_name ( text | example values : GEN, BAC ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | example values : 1, 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | example values : 434, 77 ) , team_attributes.team_api_id ( integer | example values : 9930, 8485 ) , team_attributes.date ( text | example values : 2010-02-22 00:00:00, 2014-09-19 00:00:00 ) , team_attributes.buildupplayspeed ( integer | example values : 60, 52 ) , team_attributes.buildupplayspeedclass ( text | example values : Balanced, Fast ) , team_attributes.buildupplaydribbling ( integer | example values : 48, 41 ) , team_attributes.buildupplaydribblingclass ( text | example values : Little, Normal ) , team_attributes.buildupplaypassing ( integer | example values : 50, 56 ) , team_attributes.buildupplaypassingclass ( text | example values : Mixed, Long ) , team_attributes.buildupplaypositioningclass ( text | example values : Organised, Free Form ) , team_attributes.chancecreationpassing ( integer | example values : 60, 54 ) , team_attributes.chancecreationpassingclass ( text | example values : Normal, Risky ) , team_attributes.chancecreationcrossing ( integer | example values : 65, 63 ) , team_attributes.chancecreationcrossingclass ( text | example values : Normal, Lots ) , team_attributes.chancecreationshooting ( integer | example values : 55, 64 ) , team_attributes.chancecreationshootingclass ( text | example values : Normal, Lots ) , team_attributes.chancecreationpositioningclass ( text | example values : Organised, Free Form ) , team_attributes.defencepressure ( integer | example values : 50, 47 ) , team_attributes.defencepressureclass ( text | example values : Medium, Deep ) , team_attributes.defenceaggression ( integer | example values : 55, 44 ) , team_attributes.defenceaggressionclass ( text | example values : Press, Double ) , team_attributes.defenceteamwidth ( integer | example values : 45, 54 ) , team_attributes.defenceteamwidthclass ( text | example values : Normal, Wide ) , team_attributes.defencedefenderlineclass ( text | example values : Cover, Offside Trap ) ]\ntable match , columns = [ match.id ( integer | primary key | example values : 4769, 4770 ) , match.country_id ( integer | example values : 1, 1729 ) , match.league_id ( integer | example values : 1, 1729 ) , match.season ( text | example values : 2008/2009, 2009/2010 ) , match.stage ( integer | example values : 1, 10 ) , match.date ( text | example values : 2008-08-17 00:00:00, 2008-08-16 00:00:00 ) , match.match_api_id ( integer | example values : 483129, 483130 ) , match.home_team_api_id ( integer | example values : 9987, 10000 ) , match.away_team_api_id ( integer | example values : 9993, 9994 ) , match.home_team_goal ( integer | example values : 1, 0 ) , match.away_team_goal ( integer | example values : 1, 0 ) , match.home_player_x1 ( integer | example values : 1, 2 ) , match.home_player_x2 ( integer | example values : 2, 4 ) , match.home_player_x3 ( integer | example values : 4, 6 ) , match.home_player_x4 ( integer | example values : 6, 8 ) , match.home_player_x5 ( integer | example values : 8, 6 ) , match.home_player_x6 ( integer | example values : 2, 6 ) , match.home_player_x7 ( integer | example values : 4, 8 ) , match.home_player_x8 ( integer | example values : 6, 2 ) , match.home_player_x9 ( integer | example values : 8, 4 ) , match.home_player_x10 ( integer | example values : 4, 6 ) , match.home_player_x11 ( integer | example values : 6, 4 ) , match.away_player_x1 ( integer | example values : 1, 2 ) , match.away_player_x2 ( integer | example values : 2, 4 ) , match.away_player_x3 ( integer | example values : 4, 6 ) , match.away_player_x4 ( integer | example values : 6, 8 ) , match.away_player_x5 ( integer | example values : 8, 6 ) , match.away_player_x6 ( integer | example values : 2, 4 ) , match.away_player_x7 ( integer | example values : 4, 6 ) , match.away_player_x8 ( integer | example values : 6, 8 ) , match.away_player_x9 ( integer | example values : 8, 2 ) , match.away_player_x10 ( integer | example values : 4, 6 ) , match.away_player_x11 ( integer | example values : 6, 4 ) , match.home_player_y1 ( integer | example values : 1, 3 ) , match.home_player_y2 ( integer | example values : 3, 0 ) , match.home_player_y3 ( integer | example values : 3, 5 ) , match.home_player_y4 ( integer | example values : 3, 5 ) , match.home_player_y5 ( integer | example values : 3, 7 ) , match.home_player_y6 ( integer | example values : 7, 3 ) , match.home_player_y7 ( integer | example values : 7, 6 ) , match.home_player_y8 ( integer | example values : 7, 8 ) , match.home_player_y9 ( integer | example values : 7, 10 ) , match.home_player_y10 ( integer | example values : 10, 7 ) , match.home_player_y11 ( integer | example values : 10, 11 ) , match.away_player_y1 ( integer | example values : 1, 3 ) , match.away_player_y2 ( integer | example values : 3 ) , match.away_player_y3 ( integer | example values : 3, 7 ) , match.away_player_y4 ( integer | example values : 3, 5 ) , match.away_player_y5 ( integer | example values : 3, 7 ) , match.away_player_y6 ( integer | example values : 7, 3 ) , match.away_player_y7 ( integer | example values : 7, 6 ) , match.away_player_y8 ( integer | example values : 7, 8 ) , match.away_player_y9 ( integer | example values : 7, 10 ) , match.away_player_y10 ( integer | example values : 10, 7 ) , match.away_player_y11 ( integer | example values : 10, 11 ) , match.home_player_1 ( integer | example values : 39890, 38327 ) , match.home_player_2 ( integer | example values : 67950, 39580 ) , match.home_player_3 ( integer | example values : 38788, 67958 ) , match.home_player_4 ( integer | example values : 38312, 67959 ) , match.home_player_5 ( integer | example values : 26235, 37112 ) , match.home_player_6 ( integer | example values : 36393, 46004 ) , match.home_player_7 ( integer | example values : 148286, 164732 ) , match.home_player_8 ( integer | example values : 67898, 39631 ) , match.home_player_9 ( integer | example values : 26916, 164352 ) , match.home_player_10 ( integer | example values : 38801, 38423 ) , match.home_player_11 ( integer | example values : 94289, 26502 ) , match.away_player_1 ( integer | example values : 34480, 37937 ) , match.away_player_2 ( integer | example values : 38388, 38293 ) , match.away_player_3 ( integer | example values : 26458, 148313 ) , match.away_player_4 ( integer | example values : 13423, 104411 ) , match.away_player_5 ( integer | example values : 38389, 148314 ) , match.away_player_6 ( integer | example values : 38798, 37202 ) , match.away_player_7 ( integer | example values : 30949, 43158 ) , match.away_player_8 ( integer | example values : 38253, 9307 ) , match.away_player_9 ( integer | example values : 106013, 42153 ) , match.away_player_10 ( integer | example values : 38383, 32690 ) , match.away_player_11 ( integer | example values : 46552, 38782 ) , match.goal ( text ) , match.shoton ( text ) , match.shotoff ( text ) , match.foulcommit ( text ) , match.card ( text | example values : <card /> ) , match.cross ( text ) , match.corner ( text ) , match.possession ( text ) , match.b365h ( real | example values : 1.73, 1.95 ) , match.b365d ( real | example values : 3.4, 3.2 ) , match.b365a ( real | example values : 5.0, 3.6 ) , match.bwh ( real | example values : 1.75, 1.8 ) , match.bwd ( real | example values : 3.35, 3.3 ) , match.bwa ( real | example values : 4.2, 3.95 ) , match.iwh ( real | example values : 1.85, 1.9 ) , match.iwd ( real | example values : 3.2, 3.1 ) , match.iwa ( real | example values : 3.5, 2.3 ) , match.lbh ( real | example values : 1.8, 1.9 ) , match.lbd ( real | example values : 3.3, 3.2 ) , match.lba ( real | example values : 3.75, 3.5 ) , match.psh ( real | example values : 5.1, 2.48 ) , match.psd ( real | example values : 3.82, 3.52 ) , match.psa ( real | example values : 1.76, 2.96 ) , match.whh ( real | example values : 1.7, 1.83 ) , match.whd ( real | example values : 3.3, 3.25 ) , match.wha ( real | example values : 4.33, 3.6 ) , match.sjh ( real | example values : 1.9, 1.95 ) , match.sjd ( real | example values : 3.3, 4.0 ) , match.sja ( real | example values : 4.0, 3.8 ) , match.vch ( real | example values : 1.65, 2.0 ) , match.vcd ( real | example values : 3.4, 3.25 ) , match.vca ( real | example values : 4.5, 3.25 ) , match.gbh ( real | example values : 1.78, 1.85 ) , match.gbd ( real | example values : 3.25, 3.2 ) , match.gba ( real | example values : 4.0, 3.75 ) , match.bsh ( real | example values : 1.73, 1.91 ) , match.bsd ( real | example values : 3.4, 3.25 ) , match.bsa ( real | example values : 4.2, 3.6 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None",
  "database schema :\ntable examination , columns = [ examination.id ( integer | example values : 14872, 48473 ) , examination.`examination date` ( date | example values : 1997-05-27, 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | example values : 1.3, 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | example values : 1.6, 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | example values : 256, 0 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | example values : P, P,S ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | example values : 0, 3 ) , examination.diagnosis ( text | example values : MCTD, AMI, SLE ) , examination.kct ( text | comment : measure of degree of coagulation | example values : -, + ) , examination.rvvt ( text | comment : measure of degree of coagulation | example values : -, + ) , examination.lac ( text | comment : measure of degree of coagulation | example values : -, + ) , examination.symptoms ( text | example values : AMI, CNS lupus ) , examination.thrombosis ( integer | example values : 1, 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | example values : 2110, 11408 ) , patient.sex ( text | example values : F, M ) , patient.birthday ( date | example values : 1934-02-13, 1937-05-02 ) , patient.description ( date | example values : 1994-02-14, 1996-12-01 ) , patient.`first date` ( date | example values : 1993-02-10, 1973-01-01 ) , patient.admission ( text | example values : +, - ) , patient.diagnosis ( text | example values : RA susp., PSS ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | example values : 27654, 30609 ) , laboratory.date ( date | primary key | example values : 1991-09-11, 1991-09-17 ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | example values : 34, 29 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | example values : 36, 31 ) , laboratory.ldh ( integer | comment : lactate dehydrogenase | example values : 567, 579 ) , laboratory.alp ( integer | comment : alkaliphophatase | example values : 166, 154 ) , laboratory.tp ( real | comment : total protein | example values : 4.5, 5.1 ) , laboratory.alb ( real | comment : albumin | example values : 3.3, 3.4 ) , laboratory.ua ( real | comment : uric acid | example values : 3.8, 4.2 ) , laboratory.un ( integer | comment : urea nitrogen | example values : 29, 36 ) , laboratory.cre ( real | comment : creatinine | example values : 0.8, 0.9 ) , laboratory.`t-bil` ( real | comment : total bilirubin | example values : 0.3, 0.2 ) , laboratory.`t-cho` ( integer | comment : total cholesterol | example values : 165, 134 ) , laboratory.tg ( integer | comment : triglyceride | example values : 185, 205 ) , laboratory.cpk ( integer | comment : creatinine phosphokinase | example values : 9, 10 ) , laboratory.glu ( integer | comment : blood glucose | example values : 88, 134 ) , laboratory.wbc ( real | comment : white blood cell | example values : 5.0, 10.4 ) , laboratory.rbc ( real | comment : red blood cell | example values : 2.6, 2.9 ) , laboratory.hgb ( real | comment : hemoglobin | example values : 6.4, 6.7 ) , laboratory.hct ( real | comment : hematoclit | example values : 20.3, 21.6 ) , laboratory.plt ( integer | comment : platelet | example values : 227, 242 ) , laboratory.pt ( real | comment : prothrombin time | example values : 11.3, 12.0 ) , laboratory.aptt ( integer | comment : activated partial prothrombin time | example values : 108, 84 ) , laboratory.fg ( real | comment : fibrinogen | example values : 27.0, 38.6 ) , laboratory.pic ( integer | example values : 320, 513 ) , laboratory.tat ( integer | example values : 77, 108 ) , laboratory.tat2 ( integer | example values : 113, 88 ) , laboratory.`u-pro` ( text | comment : proteinuria | example values : -, 0 ) , laboratory.igg ( integer | example values : 339, 771 ) , laboratory.iga ( integer | example values : 145, 188 ) , laboratory.igm ( integer | example values : 46, 132 ) , laboratory.crp ( text | comment : c-reactive protein | example values : 0.6, 2.7 ) , laboratory.ra ( text | comment : rhuematoid factor | example values : -, + ) , laboratory.rf ( text | comment : raha | example values : <20.5, <20.8 ) , laboratory.c3 ( integer | comment : complement 3 | example values : 30, 82 ) , laboratory.c4 ( integer | comment : complement 4 | example values : 14, 26 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | example values : 0, 1 ) , laboratory.sm ( text | comment : anti-sm | example values : 0, 1 ) , laboratory.sc170 ( text | comment : anti-scl70 | example values : 16, 1 ) , laboratory.ssa ( text | comment : anti-ssa | example values : 0, negative ) , laboratory.ssb ( text | comment : anti-ssb | example values : 0, negative ) , laboratory.centromea ( text | comment : anti-centromere | example values : 0, negative ) , laboratory.dna ( text | comment : anti-dna | example values : 41.9, 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None",
  "database schema :\ntable event , columns = [ event.event_id ( text | primary key | example values : rec0Si5cQ4rJRVzd6, rec0akZnLLpGUloLH ) , event.event_name ( text | example values : March Meeting ) , event.event_date ( text | example values : 2020-03-10T12:00:00, 2020-01-14T09:30:00 ) , event.type ( text | example values : Meeting, Election ) , event.notes ( text ) , event.location ( text | example values : MU 215 ) , event.status ( text | example values : Open, Planning ) ]\ntable major , columns = [ major.major_id ( text | primary key | example values : rec06DF6vZ1CyPKpc, rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | example values : 501, 544 ) , zip_code.type ( text | example values : Unique, Standard ) , zip_code.city ( text | example values : Holtsville, Adjuntas ) , zip_code.county ( text | example values : Suffolk County, Adjuntas Municipio ) , zip_code.state ( text | example values : New York, Puerto Rico ) , zip_code.short_state ( text | example values : NY, PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | example values : rec2N69DMcrqN9PJC, rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | example values : recD078PnS3x2doBe, recP6DJPyi5donvXL ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | example values : rec0QmEc3cSQFQ6V2, rec1bG6HSft7XIvTP ) , budget.category ( text | example values : Advertisement, Food ) , budget.spent ( real | example values : 67.81, 121.14 ) , budget.remaining ( real | example values : 7.19, 28.86 ) , budget.amount ( integer | example values : 75, 150 ) , budget.event_status ( text | example values : Closed, Open ) , budget.link_to_event ( text | example values : recI43CzsZ0Q625ma, recggMW2eyCYceNcy ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | example values : rec017x6R3hQqkLAo, rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | example values : Post Cards, Posters, Water, Cookies ) , expense.expense_date ( text | example values : 2019-08-20, 2019-10-08 ) , expense.cost ( real | example values : 122.06, 20.2 ) , expense.approved ( text | example values : true ) , expense.link_to_member ( text | example values : rec4BLdZHS2Blfp4v, recro8T1MPMwRadVH ) , expense.link_to_budget ( text | example values : recvKTAWAFKkVNnXQ, recy8KY5bUdzF81vv ) ]\ntable income , columns = [ income.income_id ( text | primary key | example values : rec0s9ZrO15zhzUeE, rec7f5XMQZexgtQJo ) , income.date_received ( text | example values : 2019-10-17, 2019-09-04 ) , income.amount ( integer | example values : 50, 200 ) , income.source ( text | example values : Dues, Fundraising ) , income.notes ( text ) , income.link_to_member ( text | example values : reccW7q1KkhSKZsea, recTjHY5xXhvkCdVT ) ]\ntable member , columns = [ member.member_id ( text | primary key | example values : rec1x5zBFIqoOuPW8, rec280Sk7o31iG0Tx ) , member.first_name ( text | example values : Angela, Grant ) , member.last_name ( text | example values : Sanders, Gilmour ) , member.email ( text | example values : angela.sanders@lpu.edu, grant.gilmour@lpu.edu ) , member.position ( text | example values : Member, Inactive ) , member.t_shirt_size ( text | example values : Medium, X-Large ) , member.phone ( text | example values : (651) 928-4507, 403-555-1310 ) , member.zip ( integer | example values : 55108, 29440 ) , member.link_to_major ( text | example values : recxK3MHQFbR9J5uO, rec7BxKpjJ7bNph3O ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nzip_code.city ( Sanders , Angela )\nmember.first_name ( Angela )\nmember.last_name ( Sanders )",
  "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | example values : 3, 5 ) , customers.segment ( text | comment : client segment | example values : SME, LAM ) , customers.currency ( text | example values : EUR, CZK ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | example values : 44, 45 ) , gasstations.chainid ( integer | example values : 13, 6 ) , gasstations.country ( text | example values : CZE, SVK ) , gasstations.segment ( text | comment : chain segment | example values : Value for money, Premium ) ]\ntable products , columns = [ products.productid ( integer | primary key | example values : 1, 2 ) , products.description ( text | example values : Rucní zadání, Nafta ) ]\ntable transactions_1k , columns = [ transactions_1k.transactionid ( integer | primary key | example values : 1, 2 ) , transactions_1k.date ( date | example values : 2012-08-24, 2012-08-23 ) , transactions_1k.time ( text | example values : 09:41:00, 10:03:00 ) , transactions_1k.customerid ( integer | example values : 31543, 46707 ) , transactions_1k.cardid ( integer | example values : 486621, 550134 ) , transactions_1k.gasstationid ( integer | example values : 3704, 656 ) , transactions_1k.productid ( integer | example values : 2, 23 ) , transactions_1k.amount ( integer | example values : 28, 18 ) , transactions_1k.price ( real | example values : 672.64, 430.72 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | example values : 39, 63 ) , yearmonth.date ( text | primary key | example values : 201112, 201201 ) , yearmonth.consumption ( real | example values : 528.3, 1598.28 ) ]\nforeign keys : None\nmatched contents :\ngasstations.country ( CZE )\ngasstations.segment ( Premium )\nproducts.description ( Premium )"
]