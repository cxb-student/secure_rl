[
  "database schema :\ntable lists , columns = [ lists.user_id ( integer ) , lists.list_id ( integer | primary key ) , lists.list_title ( text ) , lists.list_movie_number ( integer ) , lists.list_update_timestamp_utc ( text ) , lists.list_creation_timestamp_utc ( text ) , lists.list_followers ( integer ) , lists.list_url ( text ) , lists.list_comments ( integer ) , lists.list_description ( text ) , lists.list_cover_image_url ( text ) , lists.list_first_image_url ( text ) , lists.list_second_image_url ( text ) , lists.list_third_image_url ( text ) ]\ntable movies , columns = [ movies.movie_id ( integer | primary key ) , movies.movie_title ( text ) , movies.movie_release_year ( integer ) , movies.movie_url ( text ) , movies.movie_title_language ( text ) , movies.movie_popularity ( integer ) , movies.movie_image_url ( text ) , movies.director_id ( text ) , movies.director_name ( text ) , movies.director_url ( text ) ]\ntable ratings_users , columns = [ ratings_users.user_id ( integer ) , ratings_users.rating_date_utc ( text ) , ratings_users.user_trialist ( integer ) , ratings_users.user_subscriber ( integer ) , ratings_users.user_avatar_image_url ( text ) , ratings_users.user_cover_image_url ( text ) , ratings_users.user_eligible_for_trial ( integer ) , ratings_users.user_has_payment_method ( integer ) ]\ntable lists_users , columns = [ lists_users.user_id ( integer | primary key ) , lists_users.list_id ( integer | primary key ) , lists_users.list_update_date_utc ( text ) , lists_users.list_creation_date_utc ( text ) , lists_users.user_trialist ( integer ) , lists_users.user_subscriber ( integer ) , lists_users.user_avatar_image_url ( text ) , lists_users.user_cover_image_url ( text ) , lists_users.user_eligible_for_trial ( text ) , lists_users.user_has_payment_method ( text ) ]\ntable ratings , columns = [ ratings.movie_id ( integer ) , ratings.rating_id ( integer ) , ratings.rating_url ( text ) , ratings.rating_score ( integer ) , ratings.rating_timestamp_utc ( text ) , ratings.critic ( text ) , ratings.critic_likes ( integer ) , ratings.critic_comments ( integer ) , ratings.user_id ( integer ) , ratings.user_trialist ( integer ) , ratings.user_subscriber ( integer ) , ratings.user_eligible_for_trial ( integer ) , ratings.user_has_payment_method ( integer ) ]\nforeign keys :\nlists.user_id = lists_users.user_id\nratings_users.user_id = lists_users.user_id\nlists_users.user_id = lists.user_id\nlists_users.list_id = lists.list_id\nratings.user_id = ratings_users.user_id\nratings.rating_id = ratings.rating_id\nratings.user_id = lists_users.user_id\nratings.movie_id = movies.movie_id\nmatched contents :\nlists.list_id ( 1945 )\nlists.list_title ( 1945 , Sort , Titles. , movies , title , Title )\nmovies.movie_id ( 1945 )\nmovies.movie_title ( Year , 1945 , Order , Release )\nmovies.movie_release_year ( 1945 )\nlists_users.list_id ( 1945 )\nratings.movie_id ( 1945 )\nratings.rating_id ( 1945 )",
  "database schema :\ntable authors , columns = [ authors.au_id ( text | primary key | comment : author id ) , authors.au_lname ( text | comment : author last name ) , authors.au_fname ( text | comment : author first name ) , authors.phone ( text ) , authors.address ( text ) , authors.city ( text ) , authors.state ( text ) , authors.zip ( text ) , authors.contract ( text ) ]\ntable jobs , columns = [ jobs.job_id ( integer | primary key ) , jobs.job_desc ( text | comment : job description ) , jobs.min_lvl ( integer | comment : min level ) , jobs.max_lvl ( integer | comment : max level ) ]\ntable publishers , columns = [ publishers.pub_id ( text | primary key | comment : publisher id ) , publishers.pub_name ( text | comment : publisher name ) , publishers.city ( text ) , publishers.state ( text ) , publishers.country ( text ) ]\ntable employee , columns = [ employee.emp_id ( text | primary key | comment : employee id ) , employee.fname ( text | comment : first name ) , employee.minit ( text ) , employee.lname ( text | comment : last name ) , employee.job_id ( integer ) , employee.job_lvl ( integer | comment : job level ) , employee.pub_id ( text | comment : publisher id ) , employee.hire_date ( datetime ) ]\ntable pub_info , columns = [ pub_info.pub_id ( text | primary key | comment : publication id ) , pub_info.logo ( blob ) , pub_info.pr_info ( text | comment : publisher's information ) ]\ntable stores , columns = [ stores.stor_id ( text | primary key | comment : store id ) , stores.stor_name ( text | comment : store name ) , stores.stor_address ( text | comment : store address ) , stores.city ( text ) , stores.state ( text ) , stores.zip ( text ) ]\ntable discounts , columns = [ discounts.discounttype ( text ) , discounts.stor_id ( text | comment : store id ) , discounts.lowqty ( integer | comment : low quantity ) , discounts.highqty ( integer | comment : high quantity ) , discounts.discount ( real ) ]\ntable titles , columns = [ titles.title_id ( text | primary key ) , titles.title ( text ) , titles.type ( text ) , titles.pub_id ( text | comment : publisher id ) , titles.price ( real ) , titles.advance ( real ) , titles.royalty ( integer ) , titles.ytd_sales ( integer | comment : year to date sales ) , titles.notes ( text ) , titles.pubdate ( datetime | comment : publication date ) ]\ntable roysched , columns = [ roysched.title_id ( text ) , roysched.lorange ( integer | comment : low range ) , roysched.hirange ( integer | comment : high range ) , roysched.royalty ( integer ) ]\ntable sales , columns = [ sales.stor_id ( text | primary key | comment : store id ) , sales.ord_num ( text | primary key | comment : order number ) , sales.ord_date ( datetime | comment : order date ) , sales.qty ( integer | comment : quantity ) , sales.payterms ( text ) , sales.title_id ( text | primary key ) ]\ntable titleauthor , columns = [ titleauthor.au_id ( text | primary key | comment : author id ) , titleauthor.title_id ( text | primary key ) , titleauthor.au_ord ( integer | comment : author ordering ) , titleauthor.royaltyper ( integer ) ]\nforeign keys :\nemployee.pub_id = publishers.pub_id\nemployee.job_id = jobs.job_id\npub_info.pub_id = publishers.pub_id\ndiscounts.stor_id = stores.stor_id\ntitles.pub_id = publishers.pub_id\nroysched.title_id = titles.title_id\nsales.title_id = titles.title_id\nsales.stor_id = stores.stor_id\ntitleauthor.title_id = titles.title_id\ntitleauthor.au_id = authors.au_id\nmatched contents : None",
  "database schema :\ntable state , columns = [ state.statecode ( text | primary key ) , state.state ( text ) , state.region ( text ) ]\ntable callcenterlogs , columns = [ callcenterlogs.`date received` ( date ) , callcenterlogs.`complaint id` ( text | primary key ) , callcenterlogs.`rand client` ( text ) , callcenterlogs.phonefinal ( text ) , callcenterlogs.vru+line ( text | comment : voice response unit line ) , callcenterlogs.call_id ( integer ) , callcenterlogs.priority ( integer ) , callcenterlogs.type ( text ) , callcenterlogs.outcome ( text ) , callcenterlogs.server ( text ) , callcenterlogs.ser_start ( text | comment : server start ) , callcenterlogs.ser_exit ( text | comment : server exit ) , callcenterlogs.ser_time ( text | comment : server time ) ]\ntable client , columns = [ client.client_id ( text | primary key ) , client.sex ( text ) , client.day ( integer ) , client.month ( integer ) , client.year ( integer ) , client.age ( integer ) , client.social ( text ) , client.first ( text ) , client.middle ( text ) , client.last ( text ) , client.phone ( text ) , client.email ( text ) , client.address_1 ( text ) , client.address_2 ( text ) , client.city ( text ) , client.state ( text ) , client.zipcode ( integer ) , client.district_id ( integer ) ]\ntable district , columns = [ district.district_id ( integer | primary key ) , district.city ( text ) , district.state_abbrev ( text ) , district.division ( text ) ]\ntable events , columns = [ events.`date received` ( date ) , events.product ( text ) , events.`sub-product` ( text ) , events.issue ( text ) , events.`sub-issue` ( text ) , events.`consumer complaint narrative` ( text ) , events.tags ( text ) , events.`consumer consent provided?` ( text | comment : tags consumer consent provided? ) , events.`submitted via` ( text ) , events.`date sent to company` ( text ) , events.`company response to consumer` ( text ) , events.`timely response?` ( text ) , events.`consumer disputed?` ( text ) , events.`complaint id` ( text | primary key ) , events.client_id ( text | primary key ) ]\ntable reviews , columns = [ reviews.date ( date | primary key ) , reviews.stars ( integer ) , reviews.reviews ( text ) , reviews.product ( text ) , reviews.district_id ( integer ) ]\nforeign keys :\ncallcenterlogs.`rand client` = client.client_id\nclient.district_id = district.district_id\ndistrict.state_abbrev = state.statecode\nevents.client_id = client.client_id\nevents.`complaint id` = callcenterlogs.`complaint id`\nreviews.district_id = district.district_id\nmatched contents :\nclient.last ( Day )",
  "database schema :\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country_iso_code ( text ) , country.country_name ( text ) ]\ntable department , columns = [ department.department_id ( integer | primary key ) , department.department_name ( text ) ]\ntable gender , columns = [ gender.gender_id ( integer | primary key ) , gender.gender ( text ) ]\ntable genre , columns = [ genre.genre_id ( integer | primary key ) , genre.genre_name ( text ) ]\ntable keyword , columns = [ keyword.keyword_id ( integer | primary key ) , keyword.keyword_name ( text ) ]\ntable language , columns = [ language.language_id ( integer | primary key ) , language.language_code ( text ) , language.language_name ( text ) ]\ntable language_role , columns = [ language_role.role_id ( integer | primary key ) , language_role.language_role ( text ) ]\ntable movie , columns = [ movie.movie_id ( integer | primary key ) , movie.title ( text ) , movie.budget ( integer ) , movie.homepage ( text ) , movie.overview ( text ) , movie.popularity ( real ) , movie.release_date ( date ) , movie.revenue ( integer ) , movie.runtime ( integer ) , movie.movie_status ( text ) , movie.tagline ( text ) , movie.vote_average ( real ) , movie.vote_count ( integer ) ]\ntable movie_genres , columns = [ movie_genres.movie_id ( integer ) , movie_genres.genre_id ( integer ) ]\ntable movie_languages , columns = [ movie_languages.movie_id ( integer ) , movie_languages.language_id ( integer ) , movie_languages.language_role_id ( integer ) ]\ntable person , columns = [ person.person_id ( integer | primary key ) , person.person_name ( text ) ]\ntable movie_crew , columns = [ movie_crew.movie_id ( integer ) , movie_crew.person_id ( integer ) , movie_crew.department_id ( integer ) , movie_crew.job ( text ) ]\ntable production_company , columns = [ production_company.company_id ( integer | primary key ) , production_company.company_name ( text ) ]\ntable production_country , columns = [ production_country.movie_id ( integer | comment : mivie id ) , production_country.country_id ( integer ) ]\ntable movie_cast , columns = [ movie_cast.movie_id ( integer ) , movie_cast.person_id ( integer ) , movie_cast.character_name ( text ) , movie_cast.gender_id ( integer ) , movie_cast.cast_order ( integer ) ]\ntable movie_keywords , columns = [ movie_keywords.movie_id ( integer ) , movie_keywords.keyword_id ( integer ) ]\ntable movie_company , columns = [ movie_company.movie_id ( integer ) , movie_company.company_id ( integer ) ]\nforeign keys :\nmovie_genres.movie_id = movie.movie_id\nmovie_genres.genre_id = genre.genre_id\nmovie_languages.language_role_id = language_role.role_id\nmovie_languages.movie_id = movie.movie_id\nmovie_languages.language_id = language.language_id\nmovie_crew.person_id = person.person_id\nmovie_crew.movie_id = movie.movie_id\nmovie_crew.department_id = department.department_id\nproduction_country.movie_id = movie.movie_id\nproduction_country.country_id = country.country_id\nmovie_cast.person_id = person.person_id\nmovie_cast.movie_id = movie.movie_id\nmovie_cast.gender_id = gender.gender_id\nmatched contents :\ndepartment.department_name ( Production )\nkeyword.keyword_name ( company , list , movies )\nmovie.title ( Four Rooms )\nproduction_company.company_name ( The Production Company )",
  "database schema :\ntable method , columns = [ method.id ( integer | primary key ) , method.name ( text ) , method.fullcomment ( text ) , method.summary ( text ) , method.apicalls ( text ) , method.commentisxml ( integer ) , method.sampledat ( integer ) , method.solutionid ( integer ) , method.lang ( text | comment : language ) , method.nametokenized ( text ) ]\ntable methodparameter , columns = [ methodparameter.id ( integer | primary key ) , methodparameter.methodid ( text ) , methodparameter.type ( text ) , methodparameter.name ( text ) ]\ntable repo , columns = [ repo.id ( integer | primary key ) , repo.url ( text ) , repo.stars ( integer ) , repo.forks ( integer ) , repo.watchers ( integer ) , repo.processedtime ( integer ) ]\ntable solution , columns = [ solution.id ( integer | primary key ) , solution.repoid ( integer | comment : repository id ) , solution.path ( text ) , solution.processedtime ( integer ) , solution.wascompiled ( integer ) ]\nforeign keys : None\nmatched contents :\nmethod.nametokenized ( language code )\nmethodparameter.name ( english , English , many )",
  "database schema :\ntable cars , columns = [ cars.id ( integer | primary key ) , cars.train_id ( integer ) , cars.position ( integer ) , cars.shape ( text ) , cars.len ( text | comment : length ) , cars.sides ( text ) , cars.roof ( text ) , cars.wheels ( integer ) , cars.load_shape ( text ) , cars.load_num ( integer | comment : load number ) ]\ntable trains , columns = [ trains.id ( integer | primary key ) , trains.direction ( text ) ]\nforeign keys :\ncars.train_id = trains.id\nmatched contents :\ntrains.direction ( east )",
  "database schema :\ntable actor , columns = [ actor.actorid ( integer | primary key ) , actor.name ( text ) , actor.`date of birth` ( date ) , actor.`birth city` ( text ) , actor.`birth country` ( text ) , actor.`height (inches)` ( integer | comment : height inches ) , actor.biography ( text ) , actor.gender ( text ) , actor.ethnicity ( text ) , actor.networth ( text ) ]\ntable movie , columns = [ movie.movieid ( integer | primary key ) , movie.title ( text ) , movie.`mpaa rating` ( text | comment : motion picture association of america rating ) , movie.budget ( integer ) , movie.gross ( integer ) , movie.`release date` ( text ) , movie.genre ( text ) , movie.runtime ( integer ) , movie.rating ( real ) , movie.`rating count` ( integer ) , movie.summary ( text ) ]\ntable characters , columns = [ characters.movieid ( integer | primary key ) , characters.actorid ( integer | primary key ) , characters.`character name` ( text ) , characters.creditorder ( integer ) , characters.pay ( text ) , characters.screentime ( text ) ]\nforeign keys :\ncharacters.movieid = movie.movieid\ncharacters.actorid = actor.actorid\nmatched contents :\nmovie.title ( Look Who's Talking )",
  "database schema :\ntable location , columns = [ location.locationid ( integer | primary key ) , location.country ( text ) , location.state ( text ) , location.statecode ( text ) , location.city ( text ) ]\ntable user , columns = [ user.userid ( text | primary key ) , user.gender ( text ) ]\ntable twitter , columns = [ twitter.tweetid ( text | primary key ) , twitter.weekday ( text ) , twitter.hour ( integer ) , twitter.day ( integer ) , twitter.lang ( text | comment : language ) , twitter.isreshare ( text ) , twitter.reach ( integer ) , twitter.retweetcount ( integer ) , twitter.likes ( integer ) , twitter.klout ( integer ) , twitter.sentiment ( real ) , twitter.text ( text ) , twitter.locationid ( integer ) , twitter.userid ( text ) ]\nforeign keys :\ntwitter.userid = user.userid\ntwitter.locationid = location.locationid\nmatched contents : None",
  "database schema :\ntable course , columns = [ course.course_id ( integer | primary key ) , course.name ( text ) , course.credit ( integer ) , course.diff ( integer | comment : difficulty ) ]\ntable prof , columns = [ prof.prof_id ( integer | primary key | comment : professor id ) , prof.gender ( text ) , prof.first_name ( text ) , prof.last_name ( text ) , prof.email ( text ) , prof.popularity ( integer ) , prof.teachingability ( integer ) , prof.graduate_from ( text ) ]\ntable ra , columns = [ ra.student_id ( integer | primary key ) , ra.capability ( integer ) , ra.prof_id ( integer | primary key | comment : professor id ) , ra.salary ( text ) ]\ntable registration , columns = [ registration.course_id ( integer | primary key ) , registration.student_id ( integer | primary key ) , registration.grade ( text ) , registration.sat ( integer | comment : satisfying degree ) ]\ntable student , columns = [ student.student_id ( integer | primary key ) , student.f_name ( text | comment : first name ) , student.l_name ( text | comment : last name ) , student.phone_number ( text ) , student.email ( text ) , student.intelligence ( integer ) , student.gpa ( real | comment : graduate point average ) , student.type ( text ) ]\nforeign keys :\nra.student_id = student.student_id\nra.prof_id = prof.prof_id\nregistration.student_id = student.student_id\nregistration.course_id = course.course_id\nmatched contents :\ncourse.name ( Intro to BlockChain , Computer Network )",
  "database schema :\ntable app_all , columns = [ app_all.app_id ( integer | primary key ) ]\ntable app_events , columns = [ app_events.event_id ( integer | primary key ) , app_events.app_id ( integer | primary key ) , app_events.is_installed ( integer ) , app_events.is_active ( integer ) ]\ntable app_events_relevant , columns = [ app_events_relevant.event_id ( integer | primary key ) , app_events_relevant.app_id ( integer | primary key ) , app_events_relevant.is_installed ( integer ) , app_events_relevant.is_active ( integer ) ]\ntable app_labels , columns = [ app_labels.app_id ( integer ) , app_labels.label_id ( integer ) ]\ntable events , columns = [ events.event_id ( integer | primary key ) , events.device_id ( integer ) , events.timestamp ( datetime ) , events.longitude ( real ) , events.latitude ( real ) ]\ntable events_relevant , columns = [ events_relevant.event_id ( integer | primary key ) , events_relevant.device_id ( integer ) , events_relevant.timestamp ( datetime ) , events_relevant.longitude ( real ) , events_relevant.latitude ( real ) ]\ntable gender_age , columns = [ gender_age.device_id ( integer | primary key ) , gender_age.gender ( text ) , gender_age.age ( integer ) , gender_age.group ( text ) ]\ntable gender_age_test , columns = [ gender_age_test.device_id ( integer | primary key ) ]\ntable gender_age_train , columns = [ gender_age_train.device_id ( integer | primary key ) , gender_age_train.gender ( text ) , gender_age_train.age ( integer ) , gender_age_train.group ( text ) ]\ntable label_categories , columns = [ label_categories.label_id ( integer | primary key ) , label_categories.category ( text ) ]\ntable phone_brand_device_model2 , columns = [ phone_brand_device_model2.device_id ( integer | primary key ) , phone_brand_device_model2.phone_brand ( text | primary key ) , phone_brand_device_model2.device_model ( text | primary key ) ]\ntable sample_submission , columns = [ sample_submission.device_id ( integer | primary key ) , sample_submission.`f23-` ( real ) , sample_submission.`f24-26` ( real ) , sample_submission.`f27-28` ( real ) , sample_submission.`f29-32` ( real ) , sample_submission.`f33-42` ( real ) , sample_submission.f43+ ( real ) , sample_submission.`m22-` ( real ) , sample_submission.`m23-26` ( real ) , sample_submission.`m27-28` ( real ) , sample_submission.`m29-31` ( real ) , sample_submission.`m32-38` ( real ) , sample_submission.m39+ ( real ) ]\nforeign keys :\napp_events.event_id = events.event_id\napp_events_relevant.app_id = app_all.app_id\napp_events_relevant.event_id = events_relevant.event_id\napp_labels.app_id = app_all.app_id\napp_labels.label_id = label_categories.label_id\nevents_relevant.device_id = gender_age.device_id\ngender_age.device_id = phone_brand_device_model2.device_id\nmatched contents : None",
  "database schema :\ntable episode , columns = [ episode.episode_id ( text | primary key ) , episode.series ( text ) , episode.season ( integer ) , episode.episode ( integer ) , episode.number_in_series ( integer ) , episode.title ( text ) , episode.summary ( text ) , episode.air_date ( date ) , episode.episode_image ( text ) , episode.rating ( real ) , episode.votes ( integer ) ]\ntable keyword , columns = [ keyword.episode_id ( text | primary key ) , keyword.keyword ( text | primary key ) ]\ntable person , columns = [ person.person_id ( text | primary key ) , person.name ( text ) , person.birthdate ( date ) , person.birth_name ( text ) , person.birth_place ( text ) , person.birth_region ( text ) , person.birth_country ( text ) , person.height_meters ( real ) , person.nickname ( text ) ]\ntable award , columns = [ award.award_id ( integer | primary key ) , award.organization ( text ) , award.year ( integer ) , award.award_category ( text ) , award.award ( text ) , award.series ( text ) , award.episode_id ( text ) , award.person_id ( text ) , award.role ( text ) , award.result ( text ) ]\ntable credit , columns = [ credit.episode_id ( text | primary key ) , credit.person_id ( text | primary key ) , credit.category ( text ) , credit.role ( text ) , credit.credited ( text ) ]\ntable vote , columns = [ vote.episode_id ( text ) , vote.stars ( integer ) , vote.votes ( integer ) , vote.percent ( real ) ]\nforeign keys :\nkeyword.episode_id = episode.episode_id\naward.person_id = person.person_id\naward.episode_id = episode.episode_id\ncredit.person_id = person.person_id\ncredit.episode_id = episode.episode_id\nvote.episode_id = episode.episode_id\nmatched contents :\nepisode.episode ( 1 )\nepisode.title ( Refuge: Part 1 , Refuge: Part 2 )\nvote.stars ( 1 )\nvote.votes ( 1 )",
  "database schema :\ntable all_prevalences , columns = [ all_prevalences.item ( text | primary key ) , all_prevalences.`population type` ( text ) , all_prevalences.occurrences ( integer ) , all_prevalences.`population count` ( integer ) , all_prevalences.`prevalence rate` ( real ) , all_prevalences.`prevalence percentage` ( real ) ]\ntable patients , columns = [ patients.patient ( text | primary key ) , patients.birthdate ( date ) , patients.deathdate ( date ) , patients.ssn ( text | comment : social security number ) , patients.drivers ( text ) , patients.passport ( text ) , patients.prefix ( text ) , patients.first ( text ) , patients.last ( text ) , patients.suffix ( text ) , patients.maiden ( text ) , patients.marital ( text ) , patients.race ( text ) , patients.ethnicity ( text ) , patients.gender ( text ) , patients.birthplace ( text ) , patients.address ( text ) ]\ntable encounters , columns = [ encounters.id ( text | primary key ) , encounters.date ( date ) , encounters.patient ( text ) , encounters.code ( integer ) , encounters.description ( text ) , encounters.reasoncode ( integer ) , encounters.reasondescription ( text ) ]\ntable allergies , columns = [ allergies.start ( text ) , allergies.stop ( text ) , allergies.patient ( text | primary key ) , allergies.encounter ( text | primary key ) , allergies.code ( integer | primary key ) , allergies.description ( text ) ]\ntable careplans , columns = [ careplans.id ( text ) , careplans.start ( date ) , careplans.stop ( date ) , careplans.patient ( text ) , careplans.encounter ( text ) , careplans.code ( real ) , careplans.description ( text ) , careplans.reasoncode ( integer ) , careplans.reasondescription ( text ) ]\ntable conditions , columns = [ conditions.start ( date ) , conditions.stop ( date ) , conditions.patient ( text ) , conditions.encounter ( text ) , conditions.code ( integer ) , conditions.description ( text ) ]\ntable immunizations , columns = [ immunizations.date ( date | primary key ) , immunizations.patient ( text | primary key ) , immunizations.encounter ( text | primary key ) , immunizations.code ( integer | primary key ) , immunizations.description ( text ) ]\ntable medications , columns = [ medications.start ( date | primary key ) , medications.stop ( date ) , medications.patient ( text | primary key ) , medications.encounter ( text | primary key ) , medications.code ( integer | primary key ) , medications.description ( text ) , medications.reasoncode ( integer ) , medications.reasondescription ( text ) ]\ntable observations , columns = [ observations.date ( date ) , observations.patient ( text ) , observations.encounter ( text ) , observations.code ( text ) , observations.description ( text ) , observations.value ( real ) , observations.units ( text ) ]\ntable procedures , columns = [ procedures.date ( date ) , procedures.patient ( text ) , procedures.encounter ( text ) , procedures.code ( integer ) , procedures.description ( text ) , procedures.reasoncode ( integer ) , procedures.reasondescription ( text ) ]\ntable claims , columns = [ claims.id ( text | primary key ) , claims.patient ( text ) , claims.billableperiod ( date ) , claims.organization ( text ) , claims.encounter ( text ) , claims.diagnosis ( text ) , claims.total ( integer ) ]\nforeign keys :\nencounters.patient = patients.patient\nallergies.patient = patients.patient\nallergies.encounter = encounters.id\ncareplans.patient = patients.patient\ncareplans.encounter = encounters.id\nconditions.description = all_prevalences.item\nconditions.patient = patients.patient\nconditions.encounter = encounters.id\nimmunizations.patient = patients.patient\nimmunizations.encounter = encounters.id\nmedications.patient = patients.patient\nmedications.encounter = encounters.id\nobservations.patient = patients.patient\nobservations.encounter = encounters.id\nprocedures.patient = patients.patient\nprocedures.encounter = encounters.id\nmatched contents :\npatients.first ( Elly )\npatients.last ( Koss )\npatients.maiden ( Koss )",
  "database schema :\ntable offices , columns = [ offices.officecode ( text | primary key ) , offices.city ( text ) , offices.phone ( text ) , offices.addressline1 ( text ) , offices.addressline2 ( text ) , offices.state ( text ) , offices.country ( text ) , offices.postalcode ( text ) , offices.territory ( text ) ]\ntable employees , columns = [ employees.employeenumber ( integer | primary key ) , employees.lastname ( text ) , employees.firstname ( text ) , employees.extension ( text ) , employees.email ( text ) , employees.officecode ( text ) , employees.reportsto ( integer ) , employees.jobtitle ( text ) ]\ntable customers , columns = [ customers.customernumber ( integer | primary key ) , customers.customername ( text ) , customers.contactlastname ( text ) , customers.contactfirstname ( text ) , customers.phone ( text ) , customers.addressline1 ( text ) , customers.addressline2 ( text ) , customers.city ( text ) , customers.state ( text ) , customers.postalcode ( text ) , customers.country ( text ) , customers.salesrepemployeenumber ( integer | comment : sales representative employee number ) , customers.creditlimit ( real ) ]\ntable orders , columns = [ orders.ordernumber ( integer | primary key ) , orders.orderdate ( date ) , orders.requireddate ( date ) , orders.shippeddate ( date ) , orders.status ( text ) , orders.comments ( text ) , orders.customernumber ( integer ) ]\ntable payments , columns = [ payments.customernumber ( integer | primary key ) , payments.checknumber ( text | primary key ) , payments.paymentdate ( date ) , payments.amount ( real ) ]\ntable productlines , columns = [ productlines.productline ( text | primary key ) , productlines.textdescription ( text ) , productlines.htmldescription ( text ) , productlines.image ( blob ) ]\ntable products , columns = [ products.productcode ( text | primary key ) , products.productname ( text ) , products.productline ( text ) , products.productscale ( text ) , products.productvendor ( text ) , products.productdescription ( text ) , products.quantityinstock ( integer ) , products.buyprice ( real ) , products.msrp ( real | comment : manufacturer suggested retail price ) ]\ntable orderdetails , columns = [ orderdetails.ordernumber ( integer | primary key ) , orderdetails.productcode ( text | primary key ) , orderdetails.quantityordered ( integer ) , orderdetails.priceeach ( real | comment : price for each ) , orderdetails.orderlinenumber ( integer ) ]\nforeign keys :\nemployees.reportsto = employees.employeenumber\nemployees.officecode = offices.officecode\ncustomers.salesrepemployeenumber = employees.employeenumber\norders.customernumber = customers.customernumber\npayments.customernumber = customers.customernumber\nproducts.productline = productlines.productline\nmatched contents : None",
  "database schema :\ntable geographic , columns = [ geographic.city ( text | primary key ) , geographic.county ( text | comment : country ) , geographic.region ( text ) ]\ntable generalinfo , columns = [ generalinfo.id_restaurant ( integer | primary key ) , generalinfo.label ( text ) , generalinfo.food_type ( text ) , generalinfo.city ( text ) , generalinfo.review ( real ) ]\ntable location , columns = [ location.id_restaurant ( integer | primary key ) , location.street_num ( integer | comment : street number ) , location.street_name ( text ) , location.city ( text ) ]\nforeign keys :\ngeneralinfo.city = geographic.city\nlocation.id_restaurant = generalinfo.id_restaurant\nlocation.city = geographic.city\nmatched contents :\ngeneralinfo.id_restaurant ( 3 )\nlocation.id_restaurant ( 3 )\nlocation.street_num ( 3 )",
  "database schema :\ntable batting_style , columns = [ batting_style.batting_id ( integer | primary key ) , batting_style.batting_hand ( text ) ]\ntable bowling_style , columns = [ bowling_style.bowling_id ( integer | primary key ) , bowling_style.bowling_skill ( text ) ]\ntable city , columns = [ city.city_id ( integer | primary key ) , city.city_name ( text ) , city.country_id ( integer ) ]\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country_name ( text ) ]\ntable extra_type , columns = [ extra_type.extra_id ( integer | primary key ) , extra_type.extra_name ( text ) ]\ntable extra_runs , columns = [ extra_runs.match_id ( integer | primary key ) , extra_runs.over_id ( integer | primary key ) , extra_runs.ball_id ( integer | primary key ) , extra_runs.extra_type_id ( integer ) , extra_runs.extra_runs ( integer ) , extra_runs.innings_no ( integer | primary key | comment : innings number ) ]\ntable out_type , columns = [ out_type.out_id ( integer | primary key ) , out_type.out_name ( text ) ]\ntable outcome , columns = [ outcome.outcome_id ( integer | primary key ) , outcome.outcome_type ( text ) ]\ntable player , columns = [ player.player_id ( integer | primary key ) , player.player_name ( text ) , player.dob ( date | comment : date of birth ) , player.batting_hand ( integer ) , player.bowling_skill ( integer ) , player.country_name ( integer ) ]\ntable rolee , columns = [ rolee.role_id ( integer | primary key ) , rolee.role_desc ( text | comment : role description ) ]\ntable season , columns = [ season.season_id ( integer | primary key ) , season.man_of_the_series ( integer ) , season.orange_cap ( integer ) , season.purple_cap ( integer ) , season.season_year ( integer ) ]\ntable team , columns = [ team.team_id ( integer | primary key ) , team.team_name ( text ) ]\ntable toss_decision , columns = [ toss_decision.toss_id ( integer | primary key ) , toss_decision.toss_name ( text ) ]\ntable umpire , columns = [ umpire.umpire_id ( integer | primary key ) , umpire.umpire_name ( text ) , umpire.umpire_country ( integer ) ]\ntable venue , columns = [ venue.venue_id ( integer | primary key ) , venue.venue_name ( text ) , venue.city_id ( integer ) ]\ntable win_by , columns = [ win_by.win_id ( integer | primary key | comment : winning id ) , win_by.win_type ( text | comment : winning type ) ]\ntable match , columns = [ match.match_id ( integer | primary key ) , match.team_1 ( integer ) , match.team_2 ( integer ) , match.match_date ( date ) , match.season_id ( integer ) , match.venue_id ( integer ) , match.toss_winner ( integer ) , match.toss_decide ( integer ) , match.win_type ( integer | comment : winning type ) , match.win_margin ( integer | comment : winning margin ) , match.outcome_type ( integer ) , match.match_winner ( integer ) , match.man_of_the_match ( integer ) ]\ntable ball_by_ball , columns = [ ball_by_ball.match_id ( integer | primary key ) , ball_by_ball.over_id ( integer | primary key ) , ball_by_ball.ball_id ( integer | primary key ) , ball_by_ball.innings_no ( integer | primary key | comment : innings number ) , ball_by_ball.team_batting ( integer ) , ball_by_ball.team_bowling ( integer ) , ball_by_ball.striker_batting_position ( integer ) , ball_by_ball.striker ( integer ) , ball_by_ball.non_striker ( integer ) , ball_by_ball.bowler ( integer ) ]\ntable batsman_scored , columns = [ batsman_scored.match_id ( integer | primary key ) , batsman_scored.over_id ( integer | primary key ) , batsman_scored.ball_id ( integer | primary key ) , batsman_scored.runs_scored ( integer ) , batsman_scored.innings_no ( integer | primary key | comment : innings number ) ]\ntable player_match , columns = [ player_match.match_id ( integer | primary key ) , player_match.player_id ( integer | primary key ) , player_match.role_id ( integer | primary key ) , player_match.team_id ( integer ) ]\ntable wicket_taken , columns = [ wicket_taken.match_id ( integer | primary key ) , wicket_taken.over_id ( integer | primary key ) , wicket_taken.ball_id ( integer | primary key ) , wicket_taken.player_out ( integer ) , wicket_taken.kind_out ( integer ) , wicket_taken.fielders ( integer ) , wicket_taken.innings_no ( integer | primary key | comment : innings number ) ]\nforeign keys :\ncountry.country_id = country.country_id\nextra_runs.extra_type_id = extra_type.extra_id\nplayer.country_name = country.country_id\nplayer.bowling_skill = bowling_style.bowling_id\nplayer.batting_hand = batting_style.batting_id\numpire.umpire_country = country.country_id\nvenue.city_id = city.city_id\nmatch.man_of_the_match = player.player_id\nmatch.match_winner = team.team_id\nmatch.outcome_type = out_type.out_id\nmatch.win_type = win_by.win_id\nmatch.toss_decide = toss_decision.toss_id\nmatch.toss_winner = team.team_id\nmatch.venue_id = venue.venue_id\nmatch.season_id = season.season_id\nmatch.team_2 = team.team_id\nmatch.team_1 = team.team_id\nball_by_ball.match_id = match.match_id\nbatsman_scored.match_id = match.match_id\nplayer_match.role_id = rolee.role_id\nplayer_match.team_id = team.team_id\nplayer_match.player_id = player.player_id\nplayer_match.match_id = match.match_id\nwicket_taken.fielders = player.player_id\nwicket_taken.kind_out = out_type.out_id\nwicket_taken.player_out = player.player_id\nwicket_taken.match_id = match.match_id\nmatched contents :\nrolee.role_desc ( Player )",
  "database schema :\ntable torrents , columns = [ torrents.groupname ( text ) , torrents.totalsnatched ( integer ) , torrents.artist ( text ) , torrents.groupyear ( integer ) , torrents.releasetype ( text ) , torrents.groupid ( integer ) , torrents.id ( integer | primary key ) ]\ntable tags , columns = [ tags.index ( integer | primary key ) , tags.id ( integer ) , tags.tag ( text ) ]\nforeign keys : None\nmatched contents :\ntorrents.groupname ( the release , the single , released , release , 1979 , singles , titled )\ntorrents.totalsnatched ( 1979 , 239 )\ntorrents.groupyear ( 1979 )\ntorrents.releasetype ( single )\ntorrents.id ( 1979 , 239 )\ntags.index ( 1979 , 239 )\ntags.id ( 1979 , 239 )\ntags.tag ( single )",
  "database schema :\ntable users , columns = [ users.userid ( integer | primary key ) , users.age ( text ) , users.u_gender ( text | comment : user gender ) , users.occupation ( text ) ]\ntable directors , columns = [ directors.directorid ( integer | primary key ) , directors.d_quality ( integer | comment : director quality ) , directors.avg_revenue ( integer | comment : average revenue ) ]\ntable actors , columns = [ actors.actorid ( integer | primary key ) , actors.a_gender ( text | comment : actor gender ) , actors.a_quality ( integer | comment : actor quality ) ]\ntable movies , columns = [ movies.movieid ( integer | primary key ) , movies.year ( integer ) , movies.isenglish ( text ) , movies.country ( text ) , movies.runningtime ( integer ) ]\ntable movies2actors , columns = [ movies2actors.movieid ( integer | primary key ) , movies2actors.actorid ( integer | primary key ) , movies2actors.cast_num ( integer | comment : cast number ) ]\ntable movies2directors , columns = [ movies2directors.movieid ( integer | primary key ) , movies2directors.directorid ( integer | primary key ) , movies2directors.genre ( text ) ]\ntable u2base , columns = [ u2base.userid ( integer | primary key ) , u2base.movieid ( integer | primary key ) , u2base.rating ( text ) ]\nforeign keys : None\nmatched contents :\nusers.userid ( 4 )\nusers.occupation ( 4 )\ndirectors.d_quality ( 4 )\ndirectors.avg_revenue ( 4 )\nactors.actorid ( 4 )\nactors.a_quality ( 4 )\nmovies.year ( 4 )\nmovies2actors.actorid ( 4 )\nu2base.userid ( 4 )\nu2base.rating ( 4 )",
  "database schema :\ntable people , columns = [ people.`customer id` ( text | primary key ) , people.`customer name` ( text ) , people.segment ( text ) , people.country ( text ) , people.city ( text ) , people.state ( text ) , people.`postal code` ( integer ) , people.region ( text | primary key ) ]\ntable product , columns = [ product.`product id` ( text | primary key ) , product.`product name` ( text ) , product.category ( text ) , product.`sub-category` ( text ) , product.region ( text | primary key ) ]\ntable central_superstore , columns = [ central_superstore.`row id` ( integer | primary key ) , central_superstore.`order id` ( text ) , central_superstore.`order date` ( date ) , central_superstore.`ship date` ( date ) , central_superstore.`ship mode` ( text ) , central_superstore.`customer id` ( text ) , central_superstore.region ( text ) , central_superstore.`product id` ( text ) , central_superstore.sales ( real ) , central_superstore.quantity ( integer ) , central_superstore.discount ( real ) , central_superstore.profit ( real ) ]\ntable east_superstore , columns = [ east_superstore.`row id` ( integer | primary key ) , east_superstore.`order id` ( text ) , east_superstore.`order date` ( date ) , east_superstore.`ship date` ( date ) , east_superstore.`ship mode` ( text ) , east_superstore.`customer id` ( text ) , east_superstore.region ( text ) , east_superstore.`product id` ( text ) , east_superstore.sales ( real ) , east_superstore.quantity ( integer ) , east_superstore.discount ( real ) , east_superstore.profit ( real ) ]\ntable south_superstore , columns = [ south_superstore.`row id` ( integer | primary key ) , south_superstore.`order id` ( text ) , south_superstore.`order date` ( date ) , south_superstore.`ship date` ( date ) , south_superstore.`ship mode` ( text ) , south_superstore.`customer id` ( text ) , south_superstore.region ( text ) , south_superstore.`product id` ( text ) , south_superstore.sales ( real ) , south_superstore.quantity ( integer ) , south_superstore.discount ( real ) , south_superstore.profit ( real ) ]\ntable west_superstore , columns = [ west_superstore.`row id` ( integer | primary key ) , west_superstore.`order id` ( text ) , west_superstore.`order date` ( date ) , west_superstore.`ship date` ( date ) , west_superstore.`ship mode` ( text ) , west_superstore.`customer id` ( text ) , west_superstore.region ( text ) , west_superstore.`product id` ( text ) , west_superstore.sales ( real ) , west_superstore.quantity ( integer ) , west_superstore.discount ( real ) , west_superstore.profit ( real ) ]\nforeign keys :\ncentral_superstore.`product id` = product.`product id`\ncentral_superstore.region = product.region\ncentral_superstore.`customer id` = people.`customer id`\ncentral_superstore.region = people.region\neast_superstore.`product id` = product.`product id`\neast_superstore.region = product.region\neast_superstore.`customer id` = people.`customer id`\neast_superstore.region = people.region\nsouth_superstore.`product id` = product.`product id`\nsouth_superstore.region = product.region\nsouth_superstore.`customer id` = people.`customer id`\nsouth_superstore.region = people.region\nwest_superstore.`product id` = product.`product id`\nwest_superstore.region = product.region\nwest_superstore.`customer id` = people.`customer id`\nwest_superstore.region = people.region\nmatched contents :\ncentral_superstore.`order id` ( CA-2011-112326 )",
  "database schema :\ntable incidents , columns = [ incidents.case_number ( text | primary key ) , incidents.date ( date ) , incidents.location ( text ) , incidents.subject_statuses ( text ) , incidents.subject_weapon ( text ) , incidents.subjects ( text ) , incidents.subject_count ( integer ) , incidents.officers ( text ) ]\ntable officers , columns = [ officers.case_number ( text ) , officers.race ( text ) , officers.gender ( text ) , officers.last_name ( text ) , officers.first_name ( text ) , officers.full_name ( text ) ]\ntable subjects , columns = [ subjects.case_number ( text ) , subjects.race ( text ) , subjects.gender ( text ) , subjects.last_name ( text ) , subjects.first_name ( text ) , subjects.full_name ( text ) ]\nforeign keys :\nofficers.case_number = incidents.case_number\nsubjects.case_number = incidents.case_number\nmatched contents :\nofficers.last_name ( White )\nsubjects.last_name ( White )",
  "database schema :\ntable classification , columns = [ classification.geneid ( text | primary key ) , classification.localization ( text ) ]\ntable genes , columns = [ genes.geneid ( text ) , genes.essential ( text ) , genes.class ( text ) , genes.complex ( text ) , genes.phenotype ( text ) , genes.motif ( text ) , genes.chromosome ( integer ) , genes.function ( text ) , genes.localization ( text ) ]\ntable interactions , columns = [ interactions.geneid1 ( text | primary key ) , interactions.geneid2 ( text | primary key ) , interactions.type ( text ) , interactions.expression_corr ( real | comment : expression correlation score ) ]\nforeign keys :\ngenes.geneid = classification.geneid\ninteractions.geneid2 = classification.geneid\ninteractions.geneid1 = classification.geneid\nmatched contents :\nclassification.localization ( plasma membrane )\ngenes.localization ( plasma membrane )",
  "database schema :\ntable playstore , columns = [ playstore.app ( text ) , playstore.category ( text ) , playstore.rating ( real ) , playstore.reviews ( integer ) , playstore.size ( text ) , playstore.installs ( text ) , playstore.type ( text ) , playstore.price ( text ) , playstore.`content rating` ( text ) , playstore.genres ( text ) ]\ntable user_reviews , columns = [ user_reviews.app ( text ) , user_reviews.translated_review ( text ) , user_reviews.sentiment ( text ) , user_reviews.sentiment_polarity ( text ) , user_reviews.sentiment_subjectivity ( text ) ]\nforeign keys :\nuser_reviews.app = playstore.app\nmatched contents :\nuser_reviews.sentiment ( Positive )",
  "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key ) , customers.`customer names` ( text ) ]\ntable products , columns = [ products.productid ( integer | primary key ) , products.`product name` ( text ) ]\ntable regions , columns = [ regions.statecode ( text | primary key ) , regions.state ( text ) , regions.region ( text ) ]\ntable `sales team` , columns = [ `sales team`.salesteamid ( integer | primary key ) , `sales team`.`sales team` ( text ) , `sales team`.region ( text ) ]\ntable `store locations` , columns = [ `store locations`.storeid ( integer | primary key ) , `store locations`.`city name` ( text ) , `store locations`.county ( text ) , `store locations`.statecode ( text ) , `store locations`.state ( text ) , `store locations`.type ( text ) , `store locations`.latitude ( real ) , `store locations`.longitude ( real ) , `store locations`.areacode ( integer ) , `store locations`.population ( integer ) , `store locations`.`household income` ( integer ) , `store locations`.`median income` ( integer ) , `store locations`.`land area` ( integer ) , `store locations`.`water area` ( integer ) , `store locations`.`time zone` ( text ) ]\ntable `sales orders` , columns = [ `sales orders`.ordernumber ( text | primary key ) , `sales orders`.`sales channel` ( text ) , `sales orders`.warehousecode ( text ) , `sales orders`.procureddate ( text ) , `sales orders`.orderdate ( text ) , `sales orders`.shipdate ( text ) , `sales orders`.deliverydate ( text ) , `sales orders`.currencycode ( text ) , `sales orders`._salesteamid ( integer ) , `sales orders`._customerid ( integer ) , `sales orders`._storeid ( integer ) , `sales orders`._productid ( integer ) , `sales orders`.`order quantity` ( integer ) , `sales orders`.`discount applied` ( real ) , `sales orders`.`unit price` ( text ) , `sales orders`.`unit cost` ( text ) ]\nforeign keys :\n`store locations`.statecode = regions.statecode\n`sales orders`._productid = products.productid\n`sales orders`._storeid = `store locations`.storeid\n`sales orders`._customerid = customers.customerid\n`sales orders`._salesteamid = `sales team`.salesteamid\nmatched contents : None",
  "database schema :\ntable divisions , columns = [ divisions.division ( text | primary key ) , divisions.name ( text ) , divisions.country ( text ) ]\ntable matchs , columns = [ matchs.div ( text | comment : division ) , matchs.date ( date ) , matchs.hometeam ( text ) , matchs.awayteam ( text ) , matchs.fthg ( integer | comment : final-time home-team goals ) , matchs.ftag ( integer | comment : final-time away-team goals ) , matchs.ftr ( text | comment : final-time results ) , matchs.season ( integer ) ]\nforeign keys :\nmatchs.div = divisions.division\nmatched contents :\nmatchs.hometeam ( Ebbsfleet )\nmatchs.awayteam ( Ebbsfleet )\nmatchs.season ( 2008 )",
  "database schema :\ntable awards_players , columns = [ awards_players.playerid ( text | primary key ) , awards_players.award ( text | primary key ) , awards_players.year ( integer | primary key ) , awards_players.lgid ( text | comment : league id ) , awards_players.note ( text ) , awards_players.pos ( text | comment : position ) ]\ntable coaches , columns = [ coaches.coachid ( text | primary key ) , coaches.year ( integer | primary key ) , coaches.tmid ( text | primary key | comment : team id ) , coaches.lgid ( text | comment : league id ) , coaches.stint ( integer | primary key ) , coaches.won ( integer ) , coaches.lost ( integer ) , coaches.post_wins ( integer | comment : post season wins ) , coaches.post_losses ( integer | comment : post season losses ) ]\ntable draft , columns = [ draft.id ( integer | primary key ) , draft.draftyear ( integer ) , draft.draftround ( integer ) , draft.draftselection ( integer | comment : league id ) , draft.draftoverall ( integer | comment : draft overall rank ) , draft.tmid ( text | comment : team id ) , draft.firstname ( text ) , draft.lastname ( text ) , draft.suffixname ( text ) , draft.playerid ( text ) , draft.draftfrom ( text ) , draft.lgid ( text | comment : league id ) ]\ntable player_allstar , columns = [ player_allstar.playerid ( text | primary key ) , player_allstar.last_name ( text ) , player_allstar.first_name ( text ) , player_allstar.season_id ( integer | primary key ) , player_allstar.conference ( text ) , player_allstar.league_id ( text ) , player_allstar.games_played ( integer ) , player_allstar.minutes ( integer ) , player_allstar.points ( integer ) , player_allstar.o_rebounds ( integer | comment : offense rebounds ) , player_allstar.d_rebounds ( integer | comment : defense rebounds ) , player_allstar.rebounds ( integer ) , player_allstar.assists ( integer | comment : assistants ) , player_allstar.steals ( integer ) , player_allstar.blocks ( integer ) , player_allstar.turnovers ( integer ) , player_allstar.personal_fouls ( integer ) , player_allstar.fg_attempted ( integer | comment : field goal attempted ) , player_allstar.fg_made ( integer | comment : field goal made ) , player_allstar.ft_attempted ( integer | comment : free throw attempted ) , player_allstar.ft_made ( integer | comment : free throw made ) , player_allstar.three_attempted ( integer | comment : three point attempted ) , player_allstar.three_made ( integer | comment : three point made ) ]\ntable players , columns = [ players.playerid ( text | primary key ) , players.usefirst ( text | comment : use first name ) , players.firstname ( text ) , players.middlename ( text ) , players.lastname ( text ) , players.namegiven ( text ) , players.fullgivenname ( text ) , players.namesuffix ( text ) , players.namenick ( text | comment : nick name ) , players.pos ( text | comment : position ) , players.firstseason ( integer ) , players.lastseason ( integer ) , players.height ( real ) , players.weight ( integer ) , players.college ( text ) , players.collegeother ( text ) , players.birthdate ( date ) , players.birthcity ( text ) , players.birthstate ( text ) , players.birthcountry ( text ) , players.highschool ( text ) , players.hscity ( text | comment : high school city ) , players.hsstate ( text | comment : high school state ) , players.hscountry ( text | comment : high school country ) , players.deathdate ( date ) , players.race ( text ) ]\ntable teams , columns = [ teams.year ( integer | primary key ) , teams.lgid ( text | comment : league id ) , teams.tmid ( text | primary key | comment : team id ) , teams.franchid ( text ) , teams.confid ( text ) , teams.divid ( text | comment : division id ) , teams.rank ( integer ) , teams.confrank ( integer ) , teams.playoff ( text ) , teams.name ( text ) , teams.o_fgm ( integer | comment : offense field goal made ) , teams.o_ftm ( integer | comment : offense free throw made ) , teams.o_pts ( integer | comment : offense points ) , teams.d_pts ( integer | comment : defense points ) , teams.homewon ( integer | comment : home wins ) , teams.homelost ( integer | comment : home loses ) , teams.awaywon ( integer | comment : away wins ) , teams.awaylost ( integer | comment : away loses ) , teams.won ( integer ) , teams.lost ( integer ) , teams.games ( integer ) , teams.arena ( text ) ]\ntable awards_coaches , columns = [ awards_coaches.id ( integer | primary key ) , awards_coaches.year ( integer ) , awards_coaches.coachid ( text ) , awards_coaches.award ( text ) , awards_coaches.lgid ( text | comment : league id ) , awards_coaches.note ( text ) ]\ntable players_teams , columns = [ players_teams.id ( integer | primary key ) , players_teams.playerid ( text ) , players_teams.year ( integer ) , players_teams.stint ( integer ) , players_teams.tmid ( text | comment : team id ) , players_teams.lgid ( text ) , players_teams.gp ( integer | comment : game presentatons ) , players_teams.gs ( integer | comment : game starting ) , players_teams.minutes ( integer ) , players_teams.points ( integer ) , players_teams.orebounds ( integer | comment : offense rebounds ) , players_teams.drebounds ( integer | comment : defense rebounds ) , players_teams.rebounds ( integer ) , players_teams.assists ( integer | comment : assistants ) , players_teams.steals ( integer ) , players_teams.blocks ( integer ) , players_teams.turnovers ( integer ) , players_teams.pf ( integer | comment : personal fouls ) , players_teams.fgattempted ( integer | comment : field goal attempted ) , players_teams.fgmade ( integer | comment : field goal made ) , players_teams.ftattempted ( integer | comment : free throw attempted ) , players_teams.ftmade ( integer | comment : free throw made ) , players_teams.threeattempted ( integer | comment : three point attempted ) , players_teams.threemade ( integer | comment : three point made ) , players_teams.postgp ( integer | comment : post season game presentations ) , players_teams.postgs ( integer | comment : post season game starting ) , players_teams.postminutes ( integer | comment : post season minutes ) , players_teams.postpoints ( integer | comment : post season points ) , players_teams.postorebounds ( integer | comment : post season offense rebounds ) , players_teams.postdrebounds ( integer | comment : post season defense rebounds ) , players_teams.postrebounds ( integer | comment : post season defense rebounds ) , players_teams.postassists ( integer | comment : post season assistants ) , players_teams.poststeals ( integer | comment : post season steals ) , players_teams.postblocks ( integer | comment : post season blocks ) , players_teams.postturnovers ( integer | comment : post season turnovers ) , players_teams.postpf ( integer | comment : post season personal fouls ) , players_teams.postfgattempted ( integer | comment : post season field goal attempted ) , players_teams.postfgmade ( integer | comment : post season field goal made ) , players_teams.postftattempted ( integer | comment : post season field free throw attempted ) , players_teams.postftmade ( integer | comment : post season free throw made ) , players_teams.postthreeattempted ( integer | comment : post season three point attempted ) , players_teams.postthreemade ( integer | comment : post season three point made ) , players_teams.note ( text ) ]\ntable series_post , columns = [ series_post.id ( integer | primary key ) , series_post.year ( integer ) , series_post.round ( text ) , series_post.series ( text ) , series_post.tmidwinner ( text | comment : team id winner ) , series_post.lgidwinner ( text | comment : league id winner ) , series_post.tmidloser ( text | comment : team id loser ) , series_post.lgidloser ( text | comment : league id loser ) , series_post.w ( integer | comment : wins ) , series_post.l ( integer | comment : loses ) ]\nforeign keys :\nawards_players.playerid = players.playerid\ncoaches.tmid = teams.tmid\ncoaches.year = teams.year\ndraft.tmid = teams.tmid\ndraft.draftyear = teams.year\nplayer_allstar.playerid = players.playerid\nawards_coaches.coachid = coaches.coachid\nawards_coaches.year = coaches.year\nplayers_teams.tmid = teams.tmid\nplayers_teams.year = teams.year\nseries_post.tmidloser = teams.tmid\nseries_post.year = teams.year\nseries_post.tmidwinner = teams.tmid\nseries_post.year = teams.year\nmatched contents : None",
  "database schema :\ntable chapters , columns = [ chapters.id ( integer | primary key ) , chapters.act ( integer ) , chapters.scene ( integer ) , chapters.description ( text ) , chapters.work_id ( integer ) ]\ntable characters , columns = [ characters.id ( integer | primary key ) , characters.charname ( text ) , characters.abbrev ( text | comment : abbreviation ) , characters.description ( text ) ]\ntable paragraphs , columns = [ paragraphs.id ( integer | primary key ) , paragraphs.paragraphnum ( integer | comment : paragraph number ) , paragraphs.plaintext ( text ) , paragraphs.character_id ( integer ) , paragraphs.chapter_id ( integer ) ]\ntable works , columns = [ works.id ( integer | primary key ) , works.title ( text ) , works.longtitle ( text ) , works.date ( integer | comment : character id ) , works.genretype ( text ) ]\nforeign keys : None\nmatched contents :\nparagraphs.paragraphnum ( 1602 )\nworks.date ( 1602 )",
  "database schema :\ntable essays , columns = [ essays.projectid ( text ) , essays.teacher_acctid ( text ) , essays.title ( text ) , essays.short_description ( text ) , essays.need_statement ( text ) , essays.essay ( text ) ]\ntable projects , columns = [ projects.projectid ( text | primary key ) , projects.teacher_acctid ( text ) , projects.schoolid ( text ) , projects.school_ncesid ( text | comment : school national center for education statistics id ) , projects.school_latitude ( real ) , projects.school_longitude ( real ) , projects.school_city ( text ) , projects.school_state ( text ) , projects.school_zip ( integer ) , projects.school_metro ( text ) , projects.school_district ( text ) , projects.school_county ( text ) , projects.school_charter ( text ) , projects.school_magnet ( text ) , projects.school_year_round ( text ) , projects.school_nlns ( text | comment : school nonleafy normal stature ) , projects.school_kipp ( text | comment : school knowledge is power program ) , projects.school_charter_ready_promise ( text ) , projects.teacher_prefix ( text ) , projects.teacher_teach_for_america ( text | comment : teachers teach for america ) , projects.teacher_ny_teaching_fellow ( text | comment : teacher_new_york_teaching_fellow ) , projects.primary_focus_subject ( text ) , projects.primary_focus_area ( text ) , projects.secondary_focus_subject ( text ) , projects.secondary_focus_area ( text ) , projects.resource_type ( text ) , projects.poverty_level ( text ) , projects.grade_level ( text ) , projects.fulfillment_labor_materials ( real ) , projects.total_price_excluding_optional_support ( real ) , projects.total_price_including_optional_support ( real ) , projects.students_reached ( integer ) , projects.eligible_double_your_impact_match ( text ) , projects.eligible_almost_home_match ( text ) , projects.date_posted ( date ) ]\ntable donations , columns = [ donations.donationid ( text | primary key ) , donations.projectid ( text ) , donations.donor_acctid ( text | comment : donor accid ) , donations.donor_city ( text ) , donations.donor_state ( text ) , donations.donor_zip ( text ) , donations.is_teacher_acct ( text ) , donations.donation_timestamp ( datetime ) , donations.donation_to_project ( real ) , donations.donation_optional_support ( real ) , donations.donation_total ( real ) , donations.dollar_amount ( text ) , donations.donation_included_optional_support ( text ) , donations.payment_method ( text ) , donations.payment_included_acct_credit ( text ) , donations.payment_included_campaign_gift_card ( text ) , donations.payment_included_web_purchased_gift_card ( text ) , donations.payment_was_promo_matched ( text ) , donations.via_giving_page ( text ) , donations.for_honoree ( text ) , donations.donation_message ( text ) ]\ntable resources , columns = [ resources.resourceid ( text | primary key ) , resources.projectid ( text ) , resources.vendorid ( integer ) , resources.vendor_name ( text ) , resources.project_resource_type ( text ) , resources.item_name ( text ) , resources.item_number ( text ) , resources.item_unit_price ( real ) , resources.item_quantity ( integer ) ]\nforeign keys :\ndonations.projectid = projects.projectid\nresources.projectid = projects.projectid\nmatched contents :\nessays.title ( 2012 )\ndonations.donor_city ( Donation )\ndonations.donation_message ( Donation , donation )\nresources.item_name ( 2012 )\nresources.item_number ( 2012 )",
  "database schema :\ntable genre , columns = [ genre.id ( integer | primary key ) , genre.genre_name ( text ) ]\ntable game , columns = [ game.id ( integer | primary key ) , game.genre_id ( integer ) , game.game_name ( text ) ]\ntable platform , columns = [ platform.id ( integer | primary key ) , platform.platform_name ( text ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key ) , publisher.publisher_name ( text ) ]\ntable game_publisher , columns = [ game_publisher.id ( integer | primary key ) , game_publisher.game_id ( integer ) , game_publisher.publisher_id ( integer ) ]\ntable game_platform , columns = [ game_platform.id ( integer | primary key ) , game_platform.game_publisher_id ( integer ) , game_platform.platform_id ( integer ) , game_platform.release_year ( integer ) ]\ntable region , columns = [ region.id ( integer | primary key ) , region.region_name ( text ) ]\ntable region_sales , columns = [ region_sales.region_id ( integer ) , region_sales.game_platform_id ( integer ) , region_sales.num_sales ( real | comment : number sales ) ]\nforeign keys :\ngame.genre_id = genre.id\ngame_publisher.publisher_id = publisher.id\ngame_publisher.game_id = game.id\ngame_platform.platform_id = platform.id\ngame_platform.game_publisher_id = game_publisher.id\nregion_sales.region_id = region.id\nregion_sales.game_platform_id = game_platform.id\nmatched contents :\ngenre.genre_name ( Platform )\ngame.id ( 50 , 51 )\npublisher.id ( 50 , 51 )\ngame_publisher.id ( 50 , 51 )\ngame_publisher.game_id ( 50 , 51 )\ngame_publisher.publisher_id ( 50 , 51 )\ngame_platform.id ( 50 , 51 )\ngame_platform.game_publisher_id ( 50 , 51 )\nregion_sales.game_platform_id ( 50 , 51 )",
  "database schema :\ntable institution_details , columns = [ institution_details.unitid ( integer | primary key | comment : unit id number ) , institution_details.chronname ( text ) , institution_details.city ( text ) , institution_details.state ( text ) , institution_details.level ( text ) , institution_details.control ( text ) , institution_details.basic ( text ) , institution_details.hbcu ( text | comment : historically black college and universities ) , institution_details.flagship ( text ) , institution_details.long_x ( real ) , institution_details.lat_y ( real ) , institution_details.site ( text ) , institution_details.student_count ( integer ) , institution_details.awards_per_value ( real ) , institution_details.awards_per_state_value ( real ) , institution_details.awards_per_natl_value ( real | comment : awards per national value ) , institution_details.exp_award_value ( integer | comment : expected award value ) , institution_details.exp_award_state_value ( integer | comment : expected award state value ) , institution_details.exp_award_natl_value ( integer | comment : expected award national value ) , institution_details.exp_award_percentile ( integer ) , institution_details.ft_pct ( real | comment : full-time percentage ) , institution_details.fte_value ( integer | comment : full-time percentage ) , institution_details.fte_percentile ( integer ) , institution_details.med_sat_value ( text | comment : median sat value ) , institution_details.med_sat_percentile ( text | comment : median sat percentile ) , institution_details.aid_value ( integer ) , institution_details.aid_percentile ( integer ) , institution_details.endow_value ( text ) , institution_details.endow_percentile ( text ) , institution_details.grad_100_value ( real | comment : graduation 100 value ) , institution_details.grad_100_percentile ( integer | comment : graduation 100 percentile ) , institution_details.grad_150_value ( real | comment : graduation 150 value ) , institution_details.grad_150_percentile ( integer | comment : graduation 150 percentile ) , institution_details.pell_value ( real ) , institution_details.pell_percentile ( integer ) , institution_details.retain_value ( real ) , institution_details.retain_percentile ( integer ) , institution_details.ft_fac_value ( real | comment : full time faculty value ) , institution_details.ft_fac_percentile ( integer | comment : full time faculty percentile ) , institution_details.vsa_year ( text | comment : voluntary system of accountability year ) , institution_details.vsa_grad_after4_first ( text | comment : voluntary system of accountability after 4 year first time ) , institution_details.vsa_grad_elsewhere_after4_first ( text | comment : voluntary system of accountability graduation elsewhere after 4 year first time ) , institution_details.vsa_enroll_after4_first ( text | comment : voluntary system of accountability enrollment after 4 year first time ) , institution_details.vsa_enroll_elsewhere_after4_first ( text | comment : voluntary system of accountability enrollment elsewhere after 4 year first time ) , institution_details.vsa_grad_after6_first ( text | comment : voluntary system of accountability graduation elsewhere after 6 year first time ) , institution_details.vsa_grad_elsewhere_after6_first ( text | comment : voluntary system of accountability graduation elsewhere after 6 year first time ) , institution_details.vsa_enroll_after6_first ( text | comment : voluntary system of accountability enrollment after 6 year first time ) , institution_details.vsa_enroll_elsewhere_after6_first ( text | comment : voluntary system of accountability enrollment elsewhere after 6 year first time ) , institution_details.vsa_grad_after4_transfer ( text | comment : voluntary system of accountability transfer after 6 year first time ) , institution_details.vsa_grad_elsewhere_after4_transfer ( text | comment : voluntary system of accountability graduation elsewhere after 4 year ) , institution_details.vsa_enroll_after4_transfer ( text | comment : voluntary system of accountability enrollment after 4 years transfer ) , institution_details.vsa_enroll_elsewhere_after4_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 4 years transfer ) , institution_details.vsa_grad_after6_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 6 years transfer ) , institution_details.vsa_grad_elsewhere_after6_transfer ( text | comment : voluntary system of accountability graduation elsewhere after 6 years transfer ) , institution_details.vsa_enroll_after6_transfer ( text | comment : voluntary system of accountability enrollment after 6 years transfer ) , institution_details.vsa_enroll_elsewhere_after6_transfer ( text | comment : voluntary system of accountability enrollment elsewhere after 6 years transfer ) , institution_details.similar ( text ) , institution_details.state_sector_ct ( integer ) , institution_details.carnegie_ct ( integer ) , institution_details.counted_pct ( text ) , institution_details.nicknames ( text ) , institution_details.cohort_size ( integer ) ]\ntable institution_grads , columns = [ institution_grads.unitid ( integer ) , institution_grads.year ( integer ) , institution_grads.gender ( text ) , institution_grads.race ( text ) , institution_grads.cohort ( text ) , institution_grads.grad_cohort ( text | comment : graduation cohort ) , institution_grads.grad_100 ( text | comment : graduation 100 ) , institution_grads.grad_150 ( text | comment : graduation 150 ) , institution_grads.grad_100_rate ( text ) , institution_grads.grad_150_rate ( text ) ]\ntable state_sector_grads , columns = [ state_sector_grads.stateid ( integer ) , state_sector_grads.state ( text | comment : state name ) , state_sector_grads.state_abbr ( text ) , state_sector_grads.control ( text ) , state_sector_grads.level ( text ) , state_sector_grads.year ( integer ) , state_sector_grads.gender ( text ) , state_sector_grads.race ( text ) , state_sector_grads.cohort ( text ) , state_sector_grads.grad_cohort ( text | comment : graduation cohort ) , state_sector_grads.grad_100 ( text | comment : graduation 100 ) , state_sector_grads.grad_150 ( text | comment : graduation 150 ) , state_sector_grads.grad_100_rate ( text ) , state_sector_grads.grad_150_rate ( text ) , state_sector_grads.grad_cohort_ct ( integer | comment : graduation cohort count ) ]\ntable state_sector_details , columns = [ state_sector_details.stateid ( integer | primary key ) , state_sector_details.state ( text | comment : state name ) , state_sector_details.state_post ( text ) , state_sector_details.level ( text | primary key ) , state_sector_details.control ( text | primary key ) , state_sector_details.schools_count ( integer ) , state_sector_details.counted_pct ( text | comment : counted percentage ) , state_sector_details.awards_per_state_value ( text ) , state_sector_details.awards_per_natl_value ( real | comment : awards per national value ) , state_sector_details.exp_award_state_value ( text | comment : expected award state value ) , state_sector_details.exp_award_natl_value ( integer | comment : expected award national value ) , state_sector_details.state_appr_value ( text | comment : state appropriation value ) , state_sector_details.state_appr_rank ( text ) , state_sector_details.grad_rate_rank ( text ) , state_sector_details.awards_per_rank ( text ) ]\nforeign keys :\ninstitution_grads.unitid = institution_details.unitid\nstate_sector_grads.stateid = state_sector_details.stateid\nstate_sector_grads.state = institution_details.state\nstate_sector_details.state = institution_details.state\nmatched contents :\ninstitution_details.city ( Institute )\ninstitution_details.aid_value ( 2007 )\ninstitution_details.endow_value ( 2007 )\ninstitution_details.cohort_size ( 2007 )\ninstitution_grads.year ( 2007 )\ninstitution_grads.grad_cohort ( 2007 )\ninstitution_grads.grad_100 ( 2007 )\ninstitution_grads.grad_150 ( 2007 )\nstate_sector_grads.year ( 2007 )\nstate_sector_grads.grad_cohort ( 2007 )\nstate_sector_grads.grad_150 ( 2007 )",
  "database schema :\ntable attributes , columns = [ attributes.attribute_id ( integer | primary key ) , attributes.attribute_name ( text ) ]\ntable categories , columns = [ categories.category_id ( integer | primary key ) , categories.category_name ( text ) ]\ntable compliments , columns = [ compliments.compliment_id ( integer | primary key ) , compliments.compliment_type ( text ) ]\ntable days , columns = [ days.day_id ( integer | primary key ) , days.day_of_week ( text ) ]\ntable years , columns = [ years.year_id ( integer | primary key ) , years.actual_year ( integer ) ]\ntable business_attributes , columns = [ business_attributes.attribute_id ( integer | primary key ) , business_attributes.business_id ( integer | primary key ) , business_attributes.attribute_value ( text ) ]\ntable business_categories , columns = [ business_categories.business_id ( integer | primary key ) , business_categories.category_id ( integer | primary key ) ]\ntable business_hours , columns = [ business_hours.business_id ( integer | primary key ) , business_hours.day_id ( integer | primary key ) , business_hours.opening_time ( text ) , business_hours.closing_time ( text ) ]\ntable checkins , columns = [ checkins.business_id ( integer | primary key ) , checkins.day_id ( integer | primary key ) , checkins.label_time_0 ( text ) , checkins.label_time_1 ( text ) , checkins.label_time_2 ( text ) , checkins.label_time_3 ( text ) , checkins.label_time_4 ( text ) , checkins.label_time_5 ( text ) , checkins.label_time_6 ( text ) , checkins.label_time_7 ( text ) , checkins.label_time_8 ( text ) , checkins.label_time_9 ( text ) , checkins.label_time_10 ( text ) , checkins.label_time_11 ( text ) , checkins.label_time_12 ( text ) , checkins.label_time_13 ( text ) , checkins.label_time_14 ( text ) , checkins.label_time_15 ( text ) , checkins.label_time_16 ( text ) , checkins.label_time_17 ( text ) , checkins.label_time_18 ( text ) , checkins.label_time_19 ( text ) , checkins.label_time_20 ( text ) , checkins.label_time_21 ( text ) , checkins.label_time_22 ( text ) , checkins.label_time_23 ( text ) ]\ntable elite , columns = [ elite.user_id ( integer | primary key ) , elite.year_id ( integer | primary key ) ]\ntable reviews , columns = [ reviews.business_id ( integer | primary key ) , reviews.user_id ( integer | primary key ) , reviews.review_stars ( integer ) , reviews.review_votes_funny ( text ) , reviews.review_votes_useful ( text ) , reviews.review_votes_cool ( text ) , reviews.review_length ( text ) ]\ntable tips , columns = [ tips.business_id ( integer | primary key ) , tips.user_id ( integer | primary key ) , tips.likes ( integer ) , tips.tip_length ( text ) ]\ntable users_compliments , columns = [ users_compliments.compliment_id ( integer | primary key ) , users_compliments.user_id ( integer | primary key ) , users_compliments.number_of_compliments ( text ) ]\ntable business , columns = [ business.business_id ( integer | primary key ) , business.active ( text ) , business.city ( text ) , business.state ( text ) , business.stars ( real ) , business.review_count ( text ) ]\ntable users , columns = [ users.user_id ( integer | primary key ) , users.user_yelping_since_year ( integer ) , users.user_average_stars ( text ) , users.user_votes_funny ( text ) , users.user_votes_useful ( text ) , users.user_votes_cool ( text ) , users.user_review_count ( text ) , users.user_fans ( text ) ]\nforeign keys : None\nmatched contents :\nattributes.attribute_id ( 3 )\ncategories.category_id ( 3 )\nbusiness_attributes.attribute_id ( 3 )\nbusiness_attributes.business_id ( 3 )\nbusiness_attributes.attribute_value ( 3 )\nbusiness_categories.business_id ( 3 )\nbusiness_categories.category_id ( 3 )\nbusiness_hours.business_id ( 3 )\nbusiness_hours.day_id ( 3 )\nbusiness.business_id ( 3 )\nbusiness.state ( AZ )",
  "database schema :\ntable cites , columns = [ cites.cited_paper_id ( text | primary key ) , cites.citing_paper_id ( text | primary key ) ]\ntable paper , columns = [ paper.paper_id ( text | primary key ) , paper.class_label ( text ) ]\ntable content , columns = [ content.paper_id ( text | primary key ) , content.word_cited_id ( text | primary key ) ]\nforeign keys :\ncontent.paper_id = paper.paper_id\nmatched contents :\npaper.class_label ( Agents )",
  "database schema :\ntable bool , columns = [ bool.name ( text | primary key ) ]\ntable person , columns = [ person.name ( text | primary key ) ]\ntable disabled , columns = [ disabled.name ( text | primary key ) ]\ntable enlist , columns = [ enlist.name ( text ) , enlist.organ ( text | comment : organization ) ]\ntable filed_for_bankrupcy , columns = [ filed_for_bankrupcy.name ( text | primary key ) ]\ntable longest_absense_from_school , columns = [ longest_absense_from_school.name ( text | primary key ) , longest_absense_from_school.month ( integer ) ]\ntable male , columns = [ male.name ( text | primary key ) ]\ntable no_payment_due , columns = [ no_payment_due.name ( text | primary key ) , no_payment_due.bool ( text ) ]\ntable unemployed , columns = [ unemployed.name ( text | primary key ) ]\ntable enrolled , columns = [ enrolled.name ( text | primary key ) , enrolled.school ( text | primary key ) , enrolled.month ( integer ) ]\nforeign keys :\ndisabled.name = person.name\nenlist.name = person.name\nfiled_for_bankrupcy.name = person.name\nlongest_absense_from_school.name = person.name\nmale.name = person.name\nno_payment_due.bool = bool.name\nno_payment_due.name = person.name\nunemployed.name = person.name\nenrolled.name = person.name\nmatched contents : None",
  "database schema :\ntable question , columns = [ question.questiontext ( text ) , question.questionid ( integer | primary key ) ]\ntable survey , columns = [ survey.surveyid ( integer | primary key ) , survey.description ( text ) ]\ntable answer , columns = [ answer.answertext ( text ) , answer.surveyid ( integer ) , answer.userid ( integer | primary key ) , answer.questionid ( integer | primary key ) ]\nforeign keys : None\nmatched contents :\nquestion.questionid ( 19 )\nanswer.answertext ( 19 )\nanswer.userid ( 19 )\nanswer.questionid ( 19 )",
  "database schema :\ntable characters , columns = [ characters.movie_title ( text | primary key ) , characters.release_date ( text ) , characters.hero ( text ) , characters.villian ( text ) , characters.song ( text ) ]\ntable director , columns = [ director.name ( text | primary key ) , director.director ( text ) ]\ntable movies_total_gross , columns = [ movies_total_gross.movie_title ( text | primary key ) , movies_total_gross.release_date ( text | primary key ) , movies_total_gross.genre ( text ) , movies_total_gross.mpaa_rating ( text | comment : motion picture association of america rating ) , movies_total_gross.total_gross ( text ) , movies_total_gross.inflation_adjusted_gross ( text ) ]\ntable revenue , columns = [ revenue.year ( integer | primary key ) , revenue.`studio entertainment[ni 1]` ( real ) , revenue.`disney consumer products[ni 2]` ( real ) , revenue.`disney interactive[ni 3][rev 1]` ( integer ) , revenue.`walt disney parks and resorts` ( real ) , revenue.`disney media networks` ( text ) , revenue.total ( integer ) ]\ntable `voice-actors` , columns = [ `voice-actors`.character ( text | primary key ) , `voice-actors`.`voice-actor` ( text ) , `voice-actors`.movie ( text ) ]\nforeign keys :\ncharacters.hero = `voice-actors`.character\ndirector.name = characters.movie_title\nmovies_total_gross.movie_title = characters.movie_title\n`voice-actors`.movie = characters.movie_title\nmatched contents :\nrevenue.year ( 1998 , 1997 )\n`voice-actors`.`voice-actor` ( Walt Disney )",
  "database schema :\ntable current , columns = [ current.ballotpedia_id ( text ) , current.bioguide_id ( text | primary key ) , current.birthday_bio ( date ) , current.cspan_id ( real | primary key ) , current.fec_id ( text ) , current.first_name ( text ) , current.gender_bio ( text ) , current.google_entity_id_id ( text | comment : google entity id ) , current.govtrack_id ( integer ) , current.house_history_id ( real ) , current.icpsr_id ( real | comment : interuniversity consortium for political and social research id ) , current.last_name ( text ) , current.lis_id ( text | comment : legislator id ) , current.maplight_id ( real ) , current.middle_name ( text ) , current.nickname_name ( text | comment : nickname ) , current.official_full_name ( text ) , current.opensecrets_id ( text ) , current.religion_bio ( text ) , current.suffix_name ( text ) , current.thomas_id ( integer ) , current.votesmart_id ( real ) , current.wikidata_id ( text ) , current.wikipedia_id ( text ) ]\ntable `current-terms` , columns = [ `current-terms`.address ( text ) , `current-terms`.bioguide ( text | primary key | comment : bioguide id ) , `current-terms`.caucus ( text ) , `current-terms`.chamber ( text ) , `current-terms`.class ( real ) , `current-terms`.contact_form ( text ) , `current-terms`.district ( real ) , `current-terms`.end ( text | primary key ) , `current-terms`.fax ( text ) , `current-terms`.last ( text ) , `current-terms`.name ( text ) , `current-terms`.office ( text ) , `current-terms`.party ( text ) , `current-terms`.party_affiliations ( text ) , `current-terms`.phone ( text ) , `current-terms`.relation ( text ) , `current-terms`.rss_url ( text | comment : really simple syndication url ) , `current-terms`.start ( text ) , `current-terms`.state ( text ) , `current-terms`.state_rank ( text ) , `current-terms`.title ( text ) , `current-terms`.type ( text ) , `current-terms`.url ( text ) ]\ntable historical , columns = [ historical.ballotpedia_id ( text ) , historical.bioguide_id ( text | primary key ) , historical.bioguide_previous_id ( text ) , historical.birthday_bio ( text ) , historical.cspan_id ( text ) , historical.fec_id ( text ) , historical.first_name ( text ) , historical.gender_bio ( text ) , historical.google_entity_id_id ( text | comment : google entity id ) , historical.govtrack_id ( integer ) , historical.house_history_alternate_id ( text ) , historical.house_history_id ( real ) , historical.icpsr_id ( real | comment : interuniversity consortium for political and social research id ) , historical.last_name ( text ) , historical.lis_id ( text | comment : legislator id ) , historical.maplight_id ( text ) , historical.middle_name ( text ) , historical.nickname_name ( text | comment : nickname ) , historical.official_full_name ( text ) , historical.opensecrets_id ( text ) , historical.religion_bio ( text ) , historical.suffix_name ( text ) , historical.thomas_id ( text ) , historical.votesmart_id ( text ) , historical.wikidata_id ( text ) , historical.wikipedia_id ( text ) ]\ntable `historical-terms` , columns = [ `historical-terms`.address ( text ) , `historical-terms`.bioguide ( text | primary key | comment : bioguide id ) , `historical-terms`.chamber ( text ) , `historical-terms`.class ( real ) , `historical-terms`.contact_form ( text ) , `historical-terms`.district ( real ) , `historical-terms`.end ( text ) , `historical-terms`.fax ( text ) , `historical-terms`.last ( text ) , `historical-terms`.middle ( text ) , `historical-terms`.name ( text ) , `historical-terms`.office ( text ) , `historical-terms`.party ( text ) , `historical-terms`.party_affiliations ( text ) , `historical-terms`.phone ( text ) , `historical-terms`.relation ( text ) , `historical-terms`.rss_url ( text | comment : really simple syndication url ) , `historical-terms`.start ( text ) , `historical-terms`.state ( text ) , `historical-terms`.state_rank ( text ) , `historical-terms`.title ( text ) , `historical-terms`.type ( text ) , `historical-terms`.url ( text ) ]\ntable `social-media` , columns = [ `social-media`.bioguide ( text | primary key ) , `social-media`.facebook ( text ) , `social-media`.facebook_id ( real ) , `social-media`.govtrack ( real ) , `social-media`.instagram ( text ) , `social-media`.instagram_id ( real ) , `social-media`.thomas ( integer ) , `social-media`.twitter ( text ) , `social-media`.twitter_id ( real ) , `social-media`.youtube ( text ) , `social-media`.youtube_id ( text ) ]\nforeign keys :\n`current-terms`.bioguide = current.bioguide_id\n`historical-terms`.bioguide = historical.bioguide_id\n`social-media`.bioguide = current.bioguide_id\nmatched contents : None",
  "database schema :\ntable city , columns = [ city.id ( integer | primary key ) , city.city_name ( text ) ]\ntable games , columns = [ games.id ( integer | primary key ) , games.games_year ( integer ) , games.games_name ( text ) , games.season ( text ) ]\ntable games_city , columns = [ games_city.games_id ( integer ) , games_city.city_id ( integer ) ]\ntable medal , columns = [ medal.id ( integer | primary key ) , medal.medal_name ( text ) ]\ntable noc_region , columns = [ noc_region.id ( integer | primary key ) , noc_region.noc ( text ) , noc_region.region_name ( text ) ]\ntable person , columns = [ person.id ( integer | primary key ) , person.full_name ( text ) , person.gender ( text ) , person.height ( integer ) , person.weight ( integer ) ]\ntable games_competitor , columns = [ games_competitor.id ( integer | primary key ) , games_competitor.games_id ( integer ) , games_competitor.person_id ( integer ) , games_competitor.age ( integer ) ]\ntable person_region , columns = [ person_region.person_id ( integer ) , person_region.region_id ( integer ) ]\ntable sport , columns = [ sport.id ( integer | primary key ) , sport.sport_name ( text ) ]\ntable event , columns = [ event.id ( integer | primary key ) , event.sport_id ( integer ) , event.event_name ( text ) ]\ntable competitor_event , columns = [ competitor_event.event_id ( integer ) , competitor_event.competitor_id ( integer ) , competitor_event.medal_id ( integer ) ]\nforeign keys :\ngames_city.games_id = games.id\ngames_city.city_id = city.id\ngames_competitor.person_id = person.id\ngames_competitor.games_id = games.id\nperson_region.region_id = noc_region.id\nperson_region.person_id = person.id\nevent.sport_id = sport.id\ncompetitor_event.medal_id = medal.id\ncompetitor_event.event_id = event.id\ncompetitor_event.competitor_id = games_competitor.id\nmatched contents :\nperson.full_name ( John Aalberg )",
  "database schema :\ntable cbsa , columns = [ cbsa.cbsa ( integer | primary key ) , cbsa.cbsa_name ( text ) , cbsa.cbsa_type ( text ) ]\ntable state , columns = [ state.abbreviation ( text | primary key ) , state.name ( text ) ]\ntable congress , columns = [ congress.cognress_rep_id ( text | primary key | comment : congress representative id ) , congress.first_name ( text ) , congress.last_name ( text ) , congress.cid ( text ) , congress.party ( text ) , congress.state ( text ) , congress.abbreviation ( text ) , congress.house ( text ) , congress.district ( integer ) , congress.land_area ( real ) ]\ntable zip_data , columns = [ zip_data.zip_code ( integer | primary key ) , zip_data.city ( text ) , zip_data.state ( text ) , zip_data.multi_county ( text | comment : multi country ) , zip_data.type ( text ) , zip_data.organization ( text ) , zip_data.time_zone ( text ) , zip_data.daylight_savings ( text ) , zip_data.latitude ( real ) , zip_data.longitude ( real ) , zip_data.elevation ( integer ) , zip_data.state_fips ( integer ) , zip_data.county_fips ( integer | comment : country fips ) , zip_data.region ( text ) , zip_data.division ( text ) , zip_data.population_2020 ( integer ) , zip_data.population_2010 ( integer ) , zip_data.households ( integer ) , zip_data.avg_house_value ( integer | comment : average house value ) , zip_data.avg_income_per_household ( integer | comment : average income per household ) , zip_data.persons_per_household ( real ) , zip_data.white_population ( integer ) , zip_data.black_population ( integer ) , zip_data.hispanic_population ( integer ) , zip_data.asian_population ( integer ) , zip_data.american_indian_population ( integer ) , zip_data.hawaiian_population ( integer ) , zip_data.other_population ( integer ) , zip_data.male_population ( integer ) , zip_data.female_population ( integer ) , zip_data.median_age ( real ) , zip_data.male_median_age ( real ) , zip_data.female_median_age ( real ) , zip_data.residential_mailboxes ( integer ) , zip_data.business_mailboxes ( integer ) , zip_data.total_delivery_receptacles ( integer ) , zip_data.businesses ( integer ) , zip_data.1st_quarter_payroll ( integer ) , zip_data.annual_payroll ( integer ) , zip_data.employees ( integer ) , zip_data.water_area ( real ) , zip_data.land_area ( real ) , zip_data.single_family_delivery_units ( integer | comment : single-family delivery units ) , zip_data.multi_family_delivery_units ( integer | comment : multi-family delivery units ) , zip_data.total_beneficiaries ( integer ) , zip_data.retired_workers ( integer ) , zip_data.disabled_workers ( integer | comment : disable workers ) , zip_data.parents_and_widowed ( integer ) , zip_data.spouses ( integer ) , zip_data.children ( integer ) , zip_data.over_65 ( integer ) , zip_data.monthly_benefits_all ( integer ) , zip_data.monthly_benefits_retired_workers ( integer ) , zip_data.monthly_benefits_widowed ( integer ) , zip_data.cbsa ( integer ) ]\ntable alias , columns = [ alias.zip_code ( integer | primary key ) , alias.alias ( text ) ]\ntable area_code , columns = [ area_code.zip_code ( integer | primary key ) , area_code.area_code ( integer | primary key ) ]\ntable avoid , columns = [ avoid.zip_code ( integer | primary key ) , avoid.bad_alias ( text | primary key ) ]\ntable country , columns = [ country.zip_code ( integer | primary key ) , country.county ( text | primary key | comment : country ) , country.state ( text ) ]\ntable zip_congress , columns = [ zip_congress.zip_code ( integer | primary key ) , zip_congress.district ( text | primary key ) ]\nforeign keys :\ncongress.abbreviation = state.abbreviation\nzip_data.cbsa = cbsa.cbsa\nzip_data.state = state.abbreviation\nalias.zip_code = zip_data.zip_code\narea_code.zip_code = zip_data.zip_code\navoid.zip_code = zip_data.zip_code\ncountry.state = state.abbreviation\ncountry.zip_code = zip_data.zip_code\nzip_congress.zip_code = zip_data.zip_code\nzip_congress.district = congress.cognress_rep_id\nmatched contents :\nzip_data.city ( Arecibo )\nalias.alias ( Arecibo )\ncountry.county ( ARECIBO )",
  "database schema :\ntable dish , columns = [ dish.id ( integer | primary key ) , dish.name ( text ) , dish.description ( text ) , dish.menus_appeared ( integer ) , dish.times_appeared ( integer ) , dish.first_appeared ( integer ) , dish.last_appeared ( integer ) , dish.lowest_price ( real ) , dish.highest_price ( real ) ]\ntable menu , columns = [ menu.id ( integer | primary key ) , menu.name ( text ) , menu.sponsor ( text ) , menu.event ( text ) , menu.venue ( text ) , menu.place ( text ) , menu.physical_description ( text ) , menu.occasion ( text ) , menu.notes ( text ) , menu.call_number ( text ) , menu.keywords ( text ) , menu.language ( text ) , menu.date ( date ) , menu.location ( text ) , menu.location_type ( text ) , menu.currency ( text ) , menu.currency_symbol ( text ) , menu.status ( text ) , menu.page_count ( integer ) , menu.dish_count ( integer ) ]\ntable menupage , columns = [ menupage.id ( integer | primary key ) , menupage.menu_id ( integer ) , menupage.page_number ( integer ) , menupage.image_id ( real ) , menupage.full_height ( integer ) , menupage.full_width ( integer ) , menupage.uuid ( text ) ]\ntable menuitem , columns = [ menuitem.id ( integer | primary key ) , menuitem.menu_page_id ( integer ) , menuitem.price ( real ) , menuitem.high_price ( real ) , menuitem.dish_id ( integer ) , menuitem.created_at ( text ) , menuitem.updated_at ( text ) , menuitem.xpos ( real | comment : x position ) , menuitem.ypos ( real | comment : y position ) ]\nforeign keys :\nmenupage.menu_id = menu.id\nmenuitem.menu_page_id = menupage.id\nmenuitem.dish_id = dish.id\nmatched contents :\ndish.name ( DISHES )",
  "database schema :\ntable langs , columns = [ langs.lid ( integer | primary key | comment : language id ) , langs.lang ( text | comment : language ) , langs.locale ( text ) , langs.pages ( integer ) , langs.words ( integer ) ]\ntable pages , columns = [ pages.pid ( integer | primary key | comment : page id ) , pages.lid ( integer | comment : language id ) , pages.page ( integer ) , pages.revision ( integer ) , pages.title ( text ) , pages.words ( integer ) ]\ntable words , columns = [ words.wid ( integer | primary key | comment : word id ) , words.word ( text ) , words.occurrences ( integer ) ]\ntable langs_words , columns = [ langs_words.lid ( integer | primary key | comment : language id ) , langs_words.wid ( integer | primary key | comment : word id ) , langs_words.occurrences ( integer ) ]\ntable pages_words , columns = [ pages_words.pid ( integer | primary key | comment : page id ) , pages_words.wid ( integer | primary key | comment : word id ) , pages_words.occurrences ( integer ) ]\ntable biwords , columns = [ biwords.lid ( integer | primary key | comment : language id ) , biwords.w1st ( integer | primary key | comment : word id of the first word ) , biwords.w2nd ( integer | primary key | comment : word id of the second word ) , biwords.occurrences ( integer ) ]\nforeign keys :\npages.lid = langs.lid\nlangs_words.wid = words.wid\nlangs_words.lid = langs.lid\npages_words.wid = words.wid\npages_words.pid = pages.pid\nbiwords.w2nd = words.wid\nbiwords.w1st = words.wid\nbiwords.lid = langs.lid\nmatched contents :\npages.title ( Catalan , Wikipedia , Title , State , Numbers )\nwords.word ( longest , wikipedia , words , differents , languages , catalans , numbers , titles , states , wordes )",
  "database schema :\ntable `air carriers` , columns = [ `air carriers`.code ( integer | primary key ) , `air carriers`.description ( text ) ]\ntable airports , columns = [ airports.code ( text | primary key ) , airports.description ( text ) ]\ntable airlines , columns = [ airlines.fl_date ( text | comment : flight date ) , airlines.op_carrier_airline_id ( integer | comment : operator carrier airline id ) , airlines.tail_num ( text | comment : tail number ) , airlines.op_carrier_fl_num ( integer | comment : operator carrier flight number ) , airlines.origin_airport_id ( integer ) , airlines.origin_airport_seq_id ( integer | comment : origin airport sequence id ) , airlines.origin_city_market_id ( integer ) , airlines.origin ( text ) , airlines.dest_airport_id ( integer | comment : destination airport id ) , airlines.dest_airport_seq_id ( integer | comment : destination airport sequence id ) , airlines.dest_city_market_id ( integer | comment : destination city market id ) , airlines.dest ( text | comment : destination ) , airlines.crs_dep_time ( integer | comment : scheduled local departure time ) , airlines.dep_time ( integer | comment : departure time ) , airlines.dep_delay ( integer | comment : departure delay ) , airlines.dep_delay_new ( integer | comment : departure delay new ) , airlines.arr_time ( integer | comment : arrival time ) , airlines.arr_delay ( integer | comment : arrival delay ) , airlines.arr_delay_new ( integer | comment : arrival delay new ) , airlines.cancelled ( integer ) , airlines.cancellation_code ( text ) , airlines.crs_elapsed_time ( integer | comment : scheduled elapsed time ) , airlines.actual_elapsed_time ( integer ) , airlines.carrier_delay ( integer ) , airlines.weather_delay ( integer ) , airlines.nas_delay ( integer | comment : national aviavtion system delay ) , airlines.security_delay ( integer ) , airlines.late_aircraft_delay ( integer ) ]\nforeign keys :\nairlines.op_carrier_airline_id = `air carriers`.code\nairlines.dest = airports.code\nairlines.origin = airports.code\nmatched contents :\nairlines.fl_date ( 2018/8/17 )",
  "database schema :\ntable address_status , columns = [ address_status.status_id ( integer | primary key ) , address_status.address_status ( text ) ]\ntable author , columns = [ author.author_id ( integer | primary key ) , author.author_name ( text ) ]\ntable book_language , columns = [ book_language.language_id ( integer | primary key ) , book_language.language_code ( text ) , book_language.language_name ( text ) ]\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country_name ( text ) ]\ntable address , columns = [ address.address_id ( integer | primary key ) , address.street_number ( text ) , address.street_name ( text ) , address.city ( text ) , address.country_id ( integer ) ]\ntable customer , columns = [ customer.customer_id ( integer | primary key ) , customer.first_name ( text ) , customer.last_name ( text ) , customer.email ( text ) ]\ntable customer_address , columns = [ customer_address.customer_id ( integer | primary key ) , customer_address.address_id ( integer | primary key ) , customer_address.status_id ( integer ) ]\ntable order_status , columns = [ order_status.status_id ( integer | primary key ) , order_status.status_value ( text ) ]\ntable publisher , columns = [ publisher.publisher_id ( integer | primary key ) , publisher.publisher_name ( text ) ]\ntable book , columns = [ book.book_id ( integer | primary key ) , book.title ( text ) , book.isbn13 ( text ) , book.language_id ( integer ) , book.num_pages ( integer | comment : number pages ) , book.publication_date ( date ) , book.publisher_id ( integer ) ]\ntable book_author , columns = [ book_author.book_id ( integer | primary key ) , book_author.author_id ( integer | primary key ) ]\ntable shipping_method , columns = [ shipping_method.method_id ( integer | primary key ) , shipping_method.method_name ( text ) , shipping_method.cost ( real ) ]\ntable cust_order , columns = [ cust_order.order_id ( integer | primary key ) , cust_order.order_date ( datetime ) , cust_order.customer_id ( integer ) , cust_order.shipping_method_id ( integer ) , cust_order.dest_address_id ( integer | comment : destination address id ) ]\ntable order_history , columns = [ order_history.history_id ( integer | primary key ) , order_history.order_id ( integer ) , order_history.status_id ( integer ) , order_history.status_date ( datetime ) ]\ntable order_line , columns = [ order_line.line_id ( integer | primary key ) , order_line.order_id ( integer ) , order_line.book_id ( integer ) , order_line.price ( real ) ]\nforeign keys :\naddress.country_id = country.country_id\ncustomer_address.customer_id = customer.customer_id\ncustomer_address.address_id = address.address_id\nbook.publisher_id = publisher.publisher_id\nbook.language_id = book_language.language_id\nbook_author.book_id = book.book_id\nbook_author.author_id = author.author_id\nmatched contents :\nauthor.author_id ( 1929 , 500 )\naddress.address_id ( 500 )\ncustomer.customer_id ( 1929 )\ncustomer_address.customer_id ( 1929 )\nbook.book_id ( 1929 , 500 )\nbook.num_pages ( 500 )\nbook.publisher_id ( 1929 , 500 )\nbook_author.book_id ( 1929 , 500 )\nbook_author.author_id ( 1929 , 500 )\ncust_order.order_id ( 1929 , 500 )\ncust_order.customer_id ( 1929 , 500 )\ncust_order.dest_address_id ( 500 )\norder_history.history_id ( 1929 )",
  "database schema :\ntable employee , columns = [ employee.employee_id ( integer | primary key ) , employee.first_name ( text ) , employee.last_name ( text ) , employee.address ( text ) , employee.city ( text ) , employee.state ( text ) , employee.zip ( integer ) , employee.phone ( text ) , employee.title ( text ) , employee.salary ( integer ) , employee.supervisor ( integer ) ]\ntable establishment , columns = [ establishment.license_no ( integer | primary key | comment : license number ) , establishment.dba_name ( text | comment : doing business as name ) , establishment.aka_name ( text | comment : as know as name ) , establishment.facility_type ( text ) , establishment.risk_level ( integer ) , establishment.address ( text ) , establishment.city ( text ) , establishment.state ( text ) , establishment.zip ( integer ) , establishment.latitude ( real ) , establishment.longitude ( real ) , establishment.ward ( integer ) ]\ntable inspection , columns = [ inspection.inspection_id ( integer | primary key ) , inspection.inspection_date ( date ) , inspection.inspection_type ( text ) , inspection.results ( text ) , inspection.employee_id ( integer ) , inspection.license_no ( integer | comment : license number ) , inspection.followup_to ( integer ) ]\ntable inspection_point , columns = [ inspection_point.point_id ( integer | primary key ) , inspection_point.description ( text ) , inspection_point.category ( text ) , inspection_point.code ( text ) , inspection_point.fine ( integer ) , inspection_point.point_level ( text ) ]\ntable violation , columns = [ violation.inspection_id ( integer | primary key ) , violation.point_id ( integer | primary key ) , violation.fine ( integer ) , violation.inspector_comment ( text ) ]\nforeign keys :\nemployee.supervisor = employee.employee_id\ninspection.followup_to = inspection.inspection_id\ninspection.license_no = establishment.license_no\ninspection.employee_id = employee.employee_id\nviolation.point_id = inspection_point.point_id\nviolation.inspection_id = inspection.inspection_id\nmatched contents :\nemployee.first_name ( Darlisha )\nemployee.last_name ( Jacobs )\nemployee.title ( Sanitarian )",
  "database schema :\ntable coins , columns = [ coins.id ( integer | primary key ) , coins.name ( text ) , coins.slug ( text ) , coins.symbol ( text ) , coins.status ( text ) , coins.category ( text ) , coins.description ( text ) , coins.subreddit ( text ) , coins.notice ( text ) , coins.tags ( text ) , coins.tag_names ( text ) , coins.website ( text ) , coins.platform_id ( integer ) , coins.date_added ( text ) , coins.date_launched ( text | comment : date lanched ) ]\ntable historical , columns = [ historical.date ( date ) , historical.coin_id ( integer ) , historical.cmc_rank ( integer | comment : coinmarketcap rank ) , historical.market_cap ( real | comment : market capitalization ) , historical.price ( real ) , historical.open ( real ) , historical.high ( real ) , historical.low ( real ) , historical.close ( real ) , historical.time_high ( text ) , historical.time_low ( text ) , historical.volume_24h ( real ) , historical.percent_change_1h ( real ) , historical.percent_change_24h ( real ) , historical.percent_change_7d ( real ) , historical.circulating_supply ( real ) , historical.total_supply ( real ) , historical.max_supply ( real ) , historical.num_market_pairs ( integer | comment : number market pairs ) ]\nforeign keys : None\nmatched contents :\ncoins.id ( 2018 )\ncoins.name ( COIN )\ncoins.slug ( coin )\ncoins.symbol ( NAME , COIN )\ncoins.category ( coin )\nhistorical.coin_id ( 2018 )\nhistorical.cmc_rank ( 2018 )\nhistorical.num_market_pairs ( 2018 )",
  "database schema :\ntable categories , columns = [ categories.categoryid ( integer | primary key ) , categories.categoryname ( text ) , categories.description ( text ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key ) , customers.customername ( text ) , customers.contactname ( text ) , customers.address ( text ) , customers.city ( text ) , customers.postalcode ( text ) , customers.country ( text ) ]\ntable employees , columns = [ employees.employeeid ( integer | primary key ) , employees.lastname ( text ) , employees.firstname ( text ) , employees.birthdate ( date ) , employees.photo ( text ) , employees.notes ( text ) ]\ntable shippers , columns = [ shippers.shipperid ( integer | primary key ) , shippers.shippername ( text ) , shippers.phone ( text ) ]\ntable suppliers , columns = [ suppliers.supplierid ( integer | primary key ) , suppliers.suppliername ( text ) , suppliers.contactname ( text ) , suppliers.address ( text ) , suppliers.city ( text ) , suppliers.postalcode ( text ) , suppliers.country ( text ) , suppliers.phone ( text ) ]\ntable products , columns = [ products.productid ( integer | primary key ) , products.productname ( text ) , products.supplierid ( integer ) , products.categoryid ( integer ) , products.unit ( text ) , products.price ( real ) ]\ntable orders , columns = [ orders.orderid ( integer | primary key ) , orders.customerid ( integer ) , orders.employeeid ( integer ) , orders.orderdate ( datetime ) , orders.shipperid ( integer ) ]\ntable orderdetails , columns = [ orderdetails.orderdetailid ( integer | primary key ) , orderdetails.orderid ( integer ) , orderdetails.productid ( integer ) , orderdetails.quantity ( integer ) ]\nforeign keys :\nproducts.supplierid = suppliers.supplierid\nproducts.categoryid = categories.categoryid\norders.shipperid = shippers.shipperid\norders.customerid = customers.customerid\norders.employeeid = employees.employeeid\norderdetails.productid = products.productid\norderdetails.orderid = orders.orderid\nmatched contents : None",
  "database schema :\ntable height_info , columns = [ height_info.height_id ( integer | primary key ) , height_info.height_in_cm ( integer ) , height_info.height_in_inch ( text ) ]\ntable weight_info , columns = [ weight_info.weight_id ( integer | primary key ) , weight_info.weight_in_kg ( integer ) , weight_info.weight_in_lbs ( integer ) ]\ntable playerinfo , columns = [ playerinfo.eliteid ( integer | primary key ) , playerinfo.playername ( text ) , playerinfo.birthdate ( text ) , playerinfo.birthyear ( date ) , playerinfo.birthmonth ( integer ) , playerinfo.birthday ( integer ) , playerinfo.birthplace ( text ) , playerinfo.nation ( text ) , playerinfo.height ( integer ) , playerinfo.weight ( integer ) , playerinfo.position_info ( text | comment : position information ) , playerinfo.shoots ( text ) , playerinfo.draftyear ( integer ) , playerinfo.draftround ( integer ) , playerinfo.overall ( integer ) , playerinfo.overallby ( text ) , playerinfo.css_rank ( integer | comment : central scouting service ranking ) , playerinfo.sum_7yr_gp ( integer | comment : sum 7-year game plays ) , playerinfo.sum_7yr_toi ( integer | comment : sum 7-year time on ice ) , playerinfo.gp_greater_than_0 ( text | comment : game play greater than 0 ) ]\ntable seasonstatus , columns = [ seasonstatus.eliteid ( integer ) , seasonstatus.season ( text ) , seasonstatus.team ( text ) , seasonstatus.league ( text ) , seasonstatus.gametype ( text ) , seasonstatus.gp ( integer | comment : game plays ) , seasonstatus.g ( integer ) , seasonstatus.a ( integer ) , seasonstatus.p ( integer ) , seasonstatus.pim ( integer | comment : penalty minutes ) , seasonstatus.plusminus ( integer | comment : plus minutes ) ]\nforeign keys :\nplayerinfo.weight = weight_info.weight_id\nplayerinfo.height = height_info.height_id\nseasonstatus.eliteid = playerinfo.eliteid\nmatched contents :\nplayerinfo.playername ( David Bornhammar )",
  "database schema :\ntable att_classes , columns = [ att_classes.att_class_id ( integer | primary key | comment : attribute class id ) , att_classes.att_class ( text | comment : attribute class ) ]\ntable obj_classes , columns = [ obj_classes.obj_class_id ( integer | primary key | comment : object class id ) , obj_classes.obj_class ( text | comment : object class ) ]\ntable img_obj , columns = [ img_obj.img_id ( integer | primary key | comment : image id ) , img_obj.obj_sample_id ( integer | primary key | comment : object sample id ) , img_obj.obj_class_id ( integer | comment : object class id ) , img_obj.x ( integer ) , img_obj.y ( integer ) , img_obj.w ( integer ) , img_obj.h ( integer ) ]\ntable img_obj_att , columns = [ img_obj_att.img_id ( integer | primary key | comment : image id ) , img_obj_att.att_class_id ( integer | primary key | comment : attribute class id ) , img_obj_att.obj_sample_id ( integer | primary key | comment : object sample id ) ]\ntable pred_classes , columns = [ pred_classes.pred_class_id ( integer | primary key | comment : prediction class id ) , pred_classes.pred_class ( text | comment : prediction class ) ]\ntable img_rel , columns = [ img_rel.img_id ( integer | primary key | comment : image id ) , img_rel.pred_class_id ( integer | primary key | comment : prediction class id ) , img_rel.obj1_sample_id ( integer | primary key | comment : object1 sample id ) , img_rel.obj2_sample_id ( integer | primary key | comment : object2 sample id ) ]\nforeign keys :\nimg_obj.obj_class_id = obj_classes.obj_class_id\nimg_obj_att.img_id = img_obj.img_id\nimg_obj_att.obj_sample_id = img_obj.obj_sample_id\nimg_obj_att.att_class_id = att_classes.att_class_id\nimg_rel.img_id = img_obj.img_id\nimg_rel.obj2_sample_id = img_obj.obj_sample_id\nimg_rel.img_id = img_obj.img_id\nimg_rel.obj1_sample_id = img_obj.obj_sample_id\nimg_rel.pred_class_id = pred_classes.pred_class_id\nmatched contents :\natt_classes.att_class_id ( 1 )\natt_classes.att_class ( many )\nobj_classes.obj_class ( object )\nimg_obj.img_id ( 1 )\nimg_obj.obj_sample_id ( 1 )\nimg_obj.obj_class_id ( 1 )\nimg_obj.x ( 1 )\nimg_obj.y ( 1 )\nimg_obj.w ( 1 )\nimg_obj.h ( 1 )\nimg_obj_att.img_id ( 1 )\nimg_obj_att.att_class_id ( 1 )",
  "database schema :\ntable runs , columns = [ runs.run_at ( text ) , runs.max_rowid ( integer ) , runs.reviews_added ( integer ) ]\ntable podcasts , columns = [ podcasts.podcast_id ( text | primary key ) , podcasts.itunes_id ( integer ) , podcasts.slug ( text ) , podcasts.itunes_url ( text ) , podcasts.title ( text ) ]\ntable reviews , columns = [ reviews.podcast_id ( text ) , reviews.title ( text ) , reviews.content ( text ) , reviews.rating ( integer ) , reviews.author_id ( text ) , reviews.created_at ( text ) ]\ntable categories , columns = [ categories.podcast_id ( text | primary key ) , categories.category ( text | primary key ) ]\nforeign keys : None\nmatched contents :\nreviews.title ( The most , the most , how many , Many , The MOST! )",
  "database schema :\ntable sales_in_weather , columns = [ sales_in_weather.date ( date | primary key ) , sales_in_weather.store_nbr ( integer | primary key | comment : store number ) , sales_in_weather.item_nbr ( integer | primary key | comment : item number ) , sales_in_weather.units ( integer ) ]\ntable weather , columns = [ weather.station_nbr ( integer | primary key | comment : station number ) , weather.date ( date | primary key ) , weather.tmax ( integer | comment : temperature max ) , weather.tmin ( integer | comment : temperature min ) , weather.tavg ( integer | comment : temperature average ) , weather.depart ( integer | comment : departure from normal ) , weather.dewpoint ( integer ) , weather.wetbulb ( integer ) , weather.heat ( integer ) , weather.cool ( integer ) , weather.sunrise ( text ) , weather.sunset ( text ) , weather.codesum ( text | comment : code summarization ) , weather.snowfall ( real ) , weather.preciptotal ( real ) , weather.stnpressure ( real | comment : station pressure ) , weather.sealevel ( real ) , weather.resultspeed ( real | comment : resultant speed ) , weather.resultdir ( integer | comment : resultant direction ) , weather.avgspeed ( real | comment : average speed ) ]\ntable relation , columns = [ relation.store_nbr ( integer | primary key | comment : store number ) , relation.station_nbr ( integer | comment : station number ) ]\nforeign keys :\nrelation.station_nbr = weather.station_nbr\nrelation.store_nbr = sales_in_weather.store_nbr\nmatched contents :\nsales_in_weather.store_nbr ( 9 , 1 )\nsales_in_weather.item_nbr ( 9 , 1 )\nsales_in_weather.units ( 9 , 1 )\nweather.depart ( 9 , 1 )\nweather.dewpoint ( 9 , 1 )\nweather.cool ( 9 , 1 )\nrelation.store_nbr ( 9 , 1 )\nrelation.station_nbr ( 9 , 1 )",
  "database schema :\ntable borders , columns = [ borders.country1 ( text | primary key ) , borders.country2 ( text | primary key ) , borders.length ( real ) ]\ntable city , columns = [ city.name ( text | primary key ) , city.country ( text ) , city.province ( text | primary key ) , city.population ( integer ) , city.longitude ( real ) , city.latitude ( real ) ]\ntable continent , columns = [ continent.name ( text | primary key ) , continent.area ( real ) ]\ntable country , columns = [ country.name ( text ) , country.code ( text | primary key ) , country.capital ( text ) , country.province ( text ) , country.area ( real ) , country.population ( integer ) ]\ntable desert , columns = [ desert.name ( text | primary key ) , desert.area ( real ) , desert.longitude ( real ) , desert.latitude ( real ) ]\ntable economy , columns = [ economy.country ( text | primary key ) , economy.gdp ( real | comment : gross domestic product ) , economy.agriculture ( real ) , economy.service ( real ) , economy.industry ( real ) , economy.inflation ( real ) ]\ntable encompasses , columns = [ encompasses.country ( text | primary key ) , encompasses.continent ( text | primary key ) , encompasses.percentage ( real ) ]\ntable ethnicgroup , columns = [ ethnicgroup.country ( text | primary key ) , ethnicgroup.name ( text | primary key ) , ethnicgroup.percentage ( real ) ]\ntable geo_desert , columns = [ geo_desert.desert ( text | primary key ) , geo_desert.country ( text | primary key ) , geo_desert.province ( text | primary key ) ]\ntable geo_estuary , columns = [ geo_estuary.river ( text | primary key ) , geo_estuary.country ( text | primary key ) , geo_estuary.province ( text | primary key ) ]\ntable geo_island , columns = [ geo_island.island ( text | primary key ) , geo_island.country ( text | primary key ) , geo_island.province ( text | primary key ) ]\ntable geo_lake , columns = [ geo_lake.lake ( text | primary key ) , geo_lake.country ( text | primary key ) , geo_lake.province ( text | primary key ) ]\ntable geo_mountain , columns = [ geo_mountain.mountain ( text | primary key ) , geo_mountain.country ( text | primary key ) , geo_mountain.province ( text | primary key ) ]\ntable geo_river , columns = [ geo_river.river ( text | primary key ) , geo_river.country ( text | primary key ) , geo_river.province ( text | primary key ) ]\ntable geo_sea , columns = [ geo_sea.sea ( text | primary key ) , geo_sea.country ( text | primary key ) , geo_sea.province ( text | primary key ) ]\ntable geo_source , columns = [ geo_source.river ( text | primary key ) , geo_source.country ( text | primary key ) , geo_source.province ( text | primary key ) ]\ntable island , columns = [ island.name ( text | primary key ) , island.islands ( text ) , island.area ( real ) , island.height ( real ) , island.type ( text ) , island.longitude ( real ) , island.latitude ( real ) ]\ntable islandin , columns = [ islandin.island ( text ) , islandin.sea ( text ) , islandin.lake ( text ) , islandin.river ( text ) ]\ntable ismember , columns = [ ismember.country ( text | primary key ) , ismember.organization ( text | primary key ) , ismember.type ( text ) ]\ntable lake , columns = [ lake.name ( text | primary key ) , lake.area ( real ) , lake.depth ( real ) , lake.altitude ( real ) , lake.type ( text ) , lake.river ( text ) , lake.longitude ( real ) , lake.latitude ( real ) ]\ntable language , columns = [ language.country ( text | primary key ) , language.name ( text | primary key ) , language.percentage ( real ) ]\ntable located , columns = [ located.city ( text ) , located.province ( text ) , located.country ( text ) , located.river ( text ) , located.lake ( text ) , located.sea ( text ) ]\ntable locatedon , columns = [ locatedon.city ( text | primary key ) , locatedon.province ( text | primary key ) , locatedon.country ( text | primary key ) , locatedon.island ( text | primary key ) ]\ntable mergeswith , columns = [ mergeswith.sea1 ( text | primary key ) , mergeswith.sea2 ( text | primary key ) ]\ntable mountain , columns = [ mountain.name ( text | primary key ) , mountain.mountains ( text ) , mountain.height ( real ) , mountain.type ( text ) , mountain.longitude ( real ) , mountain.latitude ( real ) ]\ntable mountainonisland , columns = [ mountainonisland.mountain ( text | primary key ) , mountainonisland.island ( text | primary key ) ]\ntable organization , columns = [ organization.abbreviation ( text | primary key ) , organization.name ( text ) , organization.city ( text ) , organization.country ( text ) , organization.province ( text ) , organization.established ( date ) ]\ntable politics , columns = [ politics.country ( text | primary key ) , politics.independence ( date ) , politics.dependent ( text ) , politics.government ( text ) ]\ntable population , columns = [ population.country ( text | primary key ) , population.population_growth ( real ) , population.infant_mortality ( real ) ]\ntable province , columns = [ province.name ( text | primary key ) , province.country ( text | primary key ) , province.population ( integer ) , province.area ( real ) , province.capital ( text ) , province.capprov ( text | comment : capital province ) ]\ntable religion , columns = [ religion.country ( text | primary key ) , religion.name ( text | primary key ) , religion.percentage ( real ) ]\ntable river , columns = [ river.name ( text | primary key ) , river.river ( text ) , river.lake ( text ) , river.sea ( text ) , river.length ( real ) , river.sourcelongitude ( real ) , river.sourcelatitude ( real ) , river.mountains ( text ) , river.sourcealtitude ( real ) , river.estuarylongitude ( real ) , river.estuarylatitude ( real ) ]\ntable sea , columns = [ sea.name ( text | primary key ) , sea.depth ( real ) ]\ntable target , columns = [ target.country ( text | primary key ) , target.target ( text ) ]\nforeign keys : None\nmatched contents :\nethnicgroup.name ( Polish )\nlanguage.name ( Polish )",
  "database schema :\ntable demog , columns = [ demog.geoid ( integer | primary key | comment : geographic id ) , demog.inhabitants_k ( real | comment : inhabitants (thousands) ) , demog.income_k ( real | comment : income (thousands) ) , demog.a_var1 ( real ) , demog.a_var2 ( real ) , demog.a_var3 ( real ) , demog.a_var4 ( real ) , demog.a_var5 ( real ) , demog.a_var6 ( real ) , demog.a_var7 ( real ) , demog.a_var8 ( real ) , demog.a_var9 ( real ) , demog.a_var10 ( real ) , demog.a_var11 ( real ) , demog.a_var12 ( real ) , demog.a_var13 ( real ) , demog.a_var14 ( real ) , demog.a_var15 ( real ) , demog.a_var16 ( real ) , demog.a_var17 ( real ) , demog.a_var18 ( real ) ]\ntable mailings3 , columns = [ mailings3.refid ( integer | primary key | comment : reference id ) , mailings3.ref_date ( datetime | comment : reference date ) , mailings3.response ( text ) ]\ntable customers , columns = [ customers.id ( integer | primary key ) , customers.sex ( text ) , customers.marital_status ( text ) , customers.geoid ( integer | comment : geographic id ) , customers.educationnum ( integer | comment : education number ) , customers.occupation ( text ) , customers.age ( integer ) ]\ntable mailings1_2 , columns = [ mailings1_2.refid ( integer | primary key | comment : reference id ) , mailings1_2.ref_date ( datetime | comment : reference date ) , mailings1_2.response ( text ) ]\ntable sales , columns = [ sales.eventid ( integer | primary key ) , sales.refid ( integer | comment : reference id ) , sales.event_date ( datetime ) , sales.amount ( real ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable community_area , columns = [ community_area.community_area_no ( integer | primary key | comment : community area number ) , community_area.community_area_name ( text ) , community_area.side ( text ) , community_area.population ( text ) ]\ntable district , columns = [ district.district_no ( integer | primary key | comment : district number ) , district.district_name ( text ) , district.address ( text ) , district.zip_code ( integer ) , district.commander ( text ) , district.email ( text ) , district.phone ( text ) , district.fax ( text ) , district.tty ( text ) , district.twitter ( text ) ]\ntable fbi_code , columns = [ fbi_code.fbi_code_no ( text | primary key | comment : fbi code number ) , fbi_code.title ( text ) , fbi_code.description ( text ) , fbi_code.crime_against ( text ) ]\ntable iucr , columns = [ iucr.iucr_no ( text | primary key | comment : iucr number ) , iucr.primary_description ( text ) , iucr.secondary_description ( text ) , iucr.index_code ( text ) ]\ntable neighborhood , columns = [ neighborhood.neighborhood_name ( text | primary key ) , neighborhood.community_area_no ( integer | comment : community area number ) ]\ntable ward , columns = [ ward.ward_no ( integer | primary key ) , ward.alderman_first_name ( text ) , ward.alderman_last_name ( text ) , ward.alderman_name_suffix ( text ) , ward.ward_office_address ( text ) , ward.ward_office_zip ( text ) , ward.ward_email ( text ) , ward.ward_office_phone ( text ) , ward.ward_office_fax ( text ) , ward.city_hall_office_room ( integer ) , ward.city_hall_office_phone ( text ) , ward.city_hall_office_fax ( text ) , ward.population ( integer ) ]\ntable crime , columns = [ crime.report_no ( integer | primary key | comment : report number ) , crime.case_number ( text ) , crime.date ( text ) , crime.block ( text ) , crime.iucr_no ( text | comment : illinois uniform crime reporting number ) , crime.location_description ( text ) , crime.arrest ( text ) , crime.domestic ( text ) , crime.beat ( integer ) , crime.district_no ( integer | comment : district number ) , crime.ward_no ( integer | comment : ward number ) , crime.community_area_no ( integer | comment : community area number ) , crime.fbi_code_no ( text | comment : fbi code number ) , crime.latitude ( text ) , crime.longitude ( text ) ]\nforeign keys :\nneighborhood.community_area_no = community_area.community_area_no\ncrime.fbi_code_no = fbi_code.fbi_code_no\ncrime.community_area_no = community_area.community_area_no\ncrime.district_no = district.district_no\ncrime.iucr_no = iucr.iucr_no\ncrime.ward_no = ward.ward_no\nmatched contents :\ncommunity_area.side ( Central )\ndistrict.district_name ( Central )",
  "database schema :\ntable businesses , columns = [ businesses.business_id ( integer | primary key ) , businesses.name ( text ) , businesses.address ( text ) , businesses.city ( text ) , businesses.postal_code ( text ) , businesses.latitude ( real ) , businesses.longitude ( real ) , businesses.phone_number ( integer ) , businesses.tax_code ( text ) , businesses.business_certificate ( integer ) , businesses.application_date ( date ) , businesses.owner_name ( text ) , businesses.owner_address ( text ) , businesses.owner_city ( text ) , businesses.owner_state ( text ) , businesses.owner_zip ( text ) ]\ntable inspections , columns = [ inspections.business_id ( integer ) , inspections.score ( integer ) , inspections.date ( date ) , inspections.type ( text ) ]\ntable violations , columns = [ violations.business_id ( integer ) , violations.date ( date ) , violations.violation_type_id ( text ) , violations.risk_category ( text ) , violations.description ( text ) ]\nforeign keys :\ninspections.business_id = businesses.business_id\nviolations.business_id = businesses.business_id\nmatched contents :\nbusinesses.owner_state ( California )",
  "database schema :\ntable breweries , columns = [ breweries.id ( integer | primary key ) , breweries.name ( text ) , breweries.city ( text ) , breweries.state ( text ) ]\ntable beers , columns = [ beers.id ( integer | primary key ) , beers.brewery_id ( integer ) , beers.abv ( real | comment : alcohol by volume ) , beers.ibu ( real | comment : international bitterness units ) , beers.name ( text ) , beers.style ( text ) , beers.ounces ( real ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable ingredient , columns = [ ingredient.ingredient_id ( integer | primary key ) , ingredient.category ( text ) , ingredient.name ( text ) , ingredient.plural ( text ) ]\ntable recipe , columns = [ recipe.recipe_id ( integer | primary key ) , recipe.title ( text ) , recipe.subtitle ( text ) , recipe.servings ( integer ) , recipe.yield_unit ( text ) , recipe.prep_min ( integer | comment : preparation minute ) , recipe.cook_min ( integer | comment : cooked minute ) , recipe.stnd_min ( integer | comment : stand minute ) , recipe.source ( text ) , recipe.intro ( text | comment : introduction ) , recipe.directions ( text ) ]\ntable nutrition , columns = [ nutrition.recipe_id ( integer | primary key ) , nutrition.protein ( real ) , nutrition.carbo ( real ) , nutrition.alcohol ( real ) , nutrition.total_fat ( real ) , nutrition.sat_fat ( real | comment : saturated fat ) , nutrition.cholestrl ( real | comment : cholesterol ) , nutrition.sodium ( real ) , nutrition.iron ( real ) , nutrition.vitamin_c ( real ) , nutrition.vitamin_a ( real ) , nutrition.fiber ( real ) , nutrition.pcnt_cal_carb ( real | comment : percentage calculation carbo ) , nutrition.pcnt_cal_fat ( real | comment : percentage calculation fat ) , nutrition.pcnt_cal_prot ( real | comment : percentage calculation protein ) , nutrition.calories ( real ) ]\ntable quantity , columns = [ quantity.quantity_id ( integer | primary key ) , quantity.recipe_id ( integer ) , quantity.ingredient_id ( integer ) , quantity.max_qty ( real | comment : maximum quantity ) , quantity.min_qty ( real | comment : minimum quantity ) , quantity.unit ( text ) , quantity.preparation ( text ) , quantity.optional ( text ) ]\nforeign keys :\nnutrition.recipe_id = recipe.recipe_id\nquantity.recipe_id = nutrition.recipe_id\nquantity.ingredient_id = ingredient.ingredient_id\nquantity.recipe_id = recipe.recipe_id\nmatched contents : None",
  "database schema :\ntable station , columns = [ station.id ( integer | primary key ) , station.name ( text ) , station.lat ( real | comment : latitude ) , station.long ( real | comment : longitude ) , station.dock_count ( integer ) , station.city ( text ) , station.installation_date ( text ) ]\ntable status , columns = [ status.station_id ( integer ) , status.bikes_available ( integer ) , status.docks_available ( integer ) , status.time ( text ) ]\ntable trip , columns = [ trip.id ( integer | primary key ) , trip.duration ( integer ) , trip.start_date ( text ) , trip.start_station_name ( text ) , trip.start_station_id ( integer ) , trip.end_date ( text ) , trip.end_station_name ( text ) , trip.end_station_id ( integer ) , trip.bike_id ( integer ) , trip.subscription_type ( text ) , trip.zip_code ( integer ) ]\ntable weather , columns = [ weather.date ( text ) , weather.max_temperature_f ( integer | comment : max temperature in fahrenheit degree ) , weather.mean_temperature_f ( integer | comment : mean temperature in fahrenheit degree ) , weather.min_temperature_f ( integer | comment : min temperature in fahrenheit degree ) , weather.max_dew_point_f ( integer | comment : max dew point in fahrenheit degree ) , weather.mean_dew_point_f ( integer | comment : mean dew point in fahrenheit degree ) , weather.min_dew_point_f ( integer | comment : min dew point in fahrenheit degree ) , weather.max_humidity ( integer ) , weather.mean_humidity ( integer ) , weather.min_humidity ( integer ) , weather.max_sea_level_pressure_inches ( real | comment : max sea level pressure in inches ) , weather.mean_sea_level_pressure_inches ( real | comment : mean sea level pressure in inches ) , weather.min_sea_level_pressure_inches ( real | comment : min sea level pressure in inches ) , weather.max_visibility_miles ( integer | comment : max visibility in miles ) , weather.mean_visibility_miles ( integer | comment : mean visibility in miles ) , weather.min_visibility_miles ( integer | comment : min visibility in miles ) , weather.max_wind_speed_mph ( integer | comment : max wind speed in mph ) , weather.mean_wind_speed_mph ( integer | comment : mean wind speed in mph ) , weather.max_gust_speed_mph ( integer | comment : max gust speed in mph ) , weather.precipitation_inches ( text | comment : precipitation in inches ) , weather.cloud_cover ( integer ) , weather.events ( text ) , weather.wind_dir_degrees ( integer | comment : wind direction degrees ) , weather.zip_code ( text ) ]\nforeign keys : None\nmatched contents : None",
  "database schema :\ntable film_text , columns = [ film_text.film_id ( integer | primary key ) , film_text.title ( text ) , film_text.description ( text ) ]\ntable actor , columns = [ actor.actor_id ( integer | primary key ) , actor.first_name ( text ) , actor.last_name ( text ) , actor.last_update ( datetime ) ]\ntable address , columns = [ address.address_id ( integer | primary key ) , address.address ( text ) , address.address2 ( text ) , address.district ( text ) , address.city_id ( integer ) , address.postal_code ( text ) , address.phone ( text ) , address.last_update ( datetime ) ]\ntable category , columns = [ category.category_id ( integer | primary key ) , category.name ( text ) , category.last_update ( datetime ) ]\ntable city , columns = [ city.city_id ( integer | primary key ) , city.city ( text ) , city.country_id ( integer ) , city.last_update ( datetime ) ]\ntable country , columns = [ country.country_id ( integer | primary key ) , country.country ( text | comment : the name of the country ) , country.last_update ( datetime ) ]\ntable customer , columns = [ customer.customer_id ( integer | primary key | comment : country id ) , customer.store_id ( integer ) , customer.first_name ( text ) , customer.last_name ( text ) , customer.email ( text ) , customer.address_id ( integer ) , customer.active ( integer ) , customer.create_date ( datetime ) , customer.last_update ( datetime ) ]\ntable film , columns = [ film.film_id ( integer | primary key ) , film.title ( text ) , film.description ( text ) , film.release_year ( text ) , film.language_id ( integer ) , film.original_language_id ( integer ) , film.rental_duration ( integer ) , film.rental_rate ( real ) , film.length ( integer ) , film.replacement_cost ( real ) , film.rating ( text ) , film.special_features ( text ) , film.last_update ( datetime ) ]\ntable film_actor , columns = [ film_actor.actor_id ( integer | primary key ) , film_actor.film_id ( integer | primary key ) , film_actor.last_update ( datetime ) ]\ntable film_category , columns = [ film_category.film_id ( integer | primary key ) , film_category.category_id ( integer | primary key ) , film_category.last_update ( datetime ) ]\ntable inventory , columns = [ inventory.inventory_id ( integer | primary key ) , inventory.film_id ( integer ) , inventory.store_id ( integer ) , inventory.last_update ( datetime ) ]\ntable language , columns = [ language.language_id ( integer | primary key ) , language.name ( text ) , language.last_update ( datetime ) ]\ntable payment , columns = [ payment.payment_id ( integer | primary key ) , payment.customer_id ( integer ) , payment.staff_id ( integer ) , payment.rental_id ( integer ) , payment.amount ( real ) , payment.payment_date ( datetime ) , payment.last_update ( datetime ) ]\ntable rental , columns = [ rental.rental_id ( integer | primary key ) , rental.rental_date ( datetime ) , rental.inventory_id ( integer ) , rental.customer_id ( integer ) , rental.return_date ( datetime ) , rental.staff_id ( integer ) , rental.last_update ( datetime ) ]\ntable staff , columns = [ staff.staff_id ( integer | primary key ) , staff.first_name ( text ) , staff.last_name ( text ) , staff.address_id ( integer ) , staff.picture ( blob | comment : picture of the staff ) , staff.email ( text | comment : email of the staff ) , staff.store_id ( integer ) , staff.active ( integer ) , staff.username ( text ) , staff.password ( text ) , staff.last_update ( datetime ) ]\ntable store , columns = [ store.store_id ( integer | primary key ) , store.manager_staff_id ( integer ) , store.address_id ( integer ) , store.last_update ( datetime ) ]\nforeign keys : None\nmatched contents :\nfilm_text.title ( ACADEMY DINOSAUR )\nfilm.title ( ACADEMY DINOSAUR )"
]